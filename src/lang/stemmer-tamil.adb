--  Generated by Snowball 2.0.0 - https://snowballstem.org/

package body Stemmer.Tamil is

   pragma Style_Checks ("-mr");
   pragma Warnings (Off, "*variable*is never read and never assigned*");
   pragma Warnings (Off, "*mode could be*instead of*");
   pragma Warnings (Off, "*formal parameter.*is not modified*");
   pragma Warnings (Off, "*this line is too long*");
   pragma Warnings (Off, "*is not referenced*");

   procedure R_Has_min_length (Z : in out Context_Type; Result : out Boolean);
   procedure R_Remove_common_word_endings (Z : in out Context_Type; Result : out Boolean);
   procedure R_Remove_tense_suffixes (Z : in out Context_Type; Result : out Boolean);
   procedure R_Remove_tense_suffix (Z : in out Context_Type; Result : out Boolean);
   procedure R_Fix_endings (Z : in out Context_Type; Result : out Boolean);
   procedure R_Fix_ending (Z : in out Context_Type; Result : out Boolean);
   procedure R_Fix_va_start (Z : in out Context_Type; Result : out Boolean);
   procedure R_Remove_vetrumai_urupukal (Z : in out Context_Type; Result : out Boolean);
   procedure R_Remove_um (Z : in out Context_Type; Result : out Boolean);
   procedure R_Remove_command_suffixes (Z : in out Context_Type; Result : out Boolean);
   procedure R_Remove_pronoun_prefixes (Z : in out Context_Type; Result : out Boolean);
   procedure R_Remove_question_prefixes (Z : in out Context_Type; Result : out Boolean);
   procedure R_Remove_question_suffixes (Z : in out Context_Type; Result : out Boolean);
   procedure R_Remove_plural_suffix (Z : in out Context_Type; Result : out Boolean);
   Among_String : constant String := "க" & "ங" & "ச" & "ஞ" & "த"
      & "ந" & "ப" & "ம" & "ய" & "வ" & "ந்த்" & "ந்" & "ந்த"
      & "ீ" & "ை" & "ி" & "க" & "ச" & "ட" & "த" & "ப" & "ற" & "க"
      & "ச" & "ட" & "த" & "ப" & "ற" & "க" & "ச" & "ட" & "த" & "ப"
      & "ற" & "ய" & "ர" & "ல" & "ள" & "ழ" & "வ" & "ங" & "ஞ" & "ண"
      & "ந" & "ன" & "ம" & "வ்" & "ய" & "வ" & "ீ" & "ு" & "ூ"
      & "ெ" & "ே" & "ை" & "ா" & "ி" & "ீ" & "ு" & "ூ" & "ெ" & "ே"
      & "ை" & "ா" & "ி" & "அ" & "இ" & "உ" & "க" & "ங" & "ச" & "ஞ"
      & "த" & "ந" & "ப" & "ம" & "ய" & "வ" & "க" & "ச" & "ட" & "த"
      & "ப" & "ற" & "ே" & "ோ" & "ா" & "பி" & "வி" & "ீ" & "ு"
      & "ூ" & "ெ" & "ே" & "ை" & "ா" & "ி" & "பட்டு"
      & "விட்டு" & "படு" & "விடு" & "பட்டது"
      & "ெல்லாம்" & "பட்ட" & "பட்டண" & "தான"
      & "படிதான" & "குரிய" & "படி" & "பற்றி"
      & "க" & "ச" & "ட" & "த" & "ப" & "ற" & "க" & "ச" & "ட" & "த"
      & "ப" & "ற" & "ீ" & "ு" & "ூ" & "ெ" & "ே" & "ை" & "ா" & "ி"
      & "ீ" & "ு" & "ூ" & "ெ" & "ே" & "ை" & "ா" & "ி" & "படு"
      & "கொண்டிர்" & "அ" & "ஆ" & "இ" & "ஈ" & "உ" & "ஊ"
      & "எ" & "ஏ" & "ஐ" & "ஒ" & "ஓ" & "ஔ" & "ீ" & "ு" & "ூ" & "ெ"
      & "ே" & "ை" & "ா" & "ி" & "கின்ற்" & "ாநின்ற்"
      & "கிற்" & "கின்ற" & "ாநின்ற" & "கிற";

   A_0 : constant Among_Array_Type (0 .. 9) := (
      (1, 3, -1, -1, 0),
      (4, 6, -1, -1, 0),
      (7, 9, -1, -1, 0),
      (10, 12, -1, -1, 0),
      (13, 15, -1, -1, 0),
      (16, 18, -1, -1, 0),
      (19, 21, -1, -1, 0),
      (22, 24, -1, -1, 0),
      (25, 27, -1, -1, 0),
      (28, 30, -1, -1, 0));

   A_1 : constant Among_Array_Type (0 .. 2) := (
      (31, 42, -1, -1, 0),
      (43, 48, -1, -1, 0),
      (49, 57, -1, -1, 0));

   A_2 : constant Among_Array_Type (0 .. 2) := (
      (58, 60, -1, -1, 0),
      (61, 63, -1, -1, 0),
      (64, 66, -1, -1, 0));

   A_3 : constant Among_Array_Type (0 .. 5) := (
      (67, 69, -1, -1, 0),
      (70, 72, -1, -1, 0),
      (73, 75, -1, -1, 0),
      (76, 78, -1, -1, 0),
      (79, 81, -1, -1, 0),
      (82, 84, -1, -1, 0));

   A_4 : constant Among_Array_Type (0 .. 5) := (
      (85, 87, -1, -1, 0),
      (88, 90, -1, -1, 0),
      (91, 93, -1, -1, 0),
      (94, 96, -1, -1, 0),
      (97, 99, -1, -1, 0),
      (100, 102, -1, -1, 0));

   A_5 : constant Among_Array_Type (0 .. 5) := (
      (103, 105, -1, -1, 0),
      (106, 108, -1, -1, 0),
      (109, 111, -1, -1, 0),
      (112, 114, -1, -1, 0),
      (115, 117, -1, -1, 0),
      (118, 120, -1, -1, 0));

   A_6 : constant Among_Array_Type (0 .. 5) := (
      (121, 123, -1, -1, 0),
      (124, 126, -1, -1, 0),
      (127, 129, -1, -1, 0),
      (130, 132, -1, -1, 0),
      (133, 135, -1, -1, 0),
      (136, 138, -1, -1, 0));

   A_7 : constant Among_Array_Type (0 .. 5) := (
      (139, 141, -1, -1, 0),
      (142, 144, -1, -1, 0),
      (145, 147, -1, -1, 0),
      (148, 150, -1, -1, 0),
      (151, 153, -1, -1, 0),
      (154, 156, -1, -1, 0));

   A_8 : constant Among_Array_Type (0 .. 2) := (
      (157, 162, -1, -1, 0),
      (163, 165, -1, -1, 0),
      (166, 168, -1, -1, 0));

   A_9 : constant Among_Array_Type (0 .. 7) := (
      (169, 171, -1, -1, 0),
      (172, 174, -1, -1, 0),
      (175, 177, -1, -1, 0),
      (178, 180, -1, -1, 0),
      (181, 183, -1, -1, 0),
      (184, 186, -1, -1, 0),
      (187, 189, -1, -1, 0),
      (190, 192, -1, -1, 0));

   A_10 : constant Among_Array_Type (0 .. 7) := (
      (193, 195, -1, -1, 0),
      (196, 198, -1, -1, 0),
      (199, 201, -1, -1, 0),
      (202, 204, -1, -1, 0),
      (205, 207, -1, -1, 0),
      (208, 210, -1, -1, 0),
      (211, 213, -1, -1, 0),
      (214, 216, -1, -1, 0));

   A_11 : constant Among_Array_Type (0 .. 2) := (
      (217, 219, -1, -1, 0),
      (220, 222, -1, -1, 0),
      (223, 225, -1, -1, 0));

   A_12 : constant Among_Array_Type (0 .. 9) := (
      (226, 228, -1, -1, 0),
      (229, 231, -1, -1, 0),
      (232, 234, -1, -1, 0),
      (235, 237, -1, -1, 0),
      (238, 240, -1, -1, 0),
      (241, 243, -1, -1, 0),
      (244, 246, -1, -1, 0),
      (247, 249, -1, -1, 0),
      (250, 252, -1, -1, 0),
      (253, 255, -1, -1, 0));

   A_13 : constant Among_Array_Type (0 .. 5) := (
      (256, 258, -1, -1, 0),
      (259, 261, -1, -1, 0),
      (262, 264, -1, -1, 0),
      (265, 267, -1, -1, 0),
      (268, 270, -1, -1, 0),
      (271, 273, -1, -1, 0));

   A_14 : constant Among_Array_Type (0 .. 2) := (
      (274, 276, -1, -1, 0),
      (277, 279, -1, -1, 0),
      (280, 282, -1, -1, 0));

   A_15 : constant Among_Array_Type (0 .. 1) := (
      (283, 288, -1, -1, 0),
      (289, 294, -1, -1, 0));

   A_16 : constant Among_Array_Type (0 .. 7) := (
      (295, 297, -1, -1, 0),
      (298, 300, -1, -1, 0),
      (301, 303, -1, -1, 0),
      (304, 306, -1, -1, 0),
      (307, 309, -1, -1, 0),
      (310, 312, -1, -1, 0),
      (313, 315, -1, -1, 0),
      (316, 318, -1, -1, 0));

   A_17 : constant Among_Array_Type (0 .. 12) := (
      (319, 333, -1, -1, 0),
      (334, 351, -1, -1, 0),
      (352, 360, -1, -1, 0),
      (361, 372, -1, -1, 0),
      (373, 390, -1, -1, 0),
      (391, 411, -1, -1, 0),
      (412, 423, -1, -1, 0),
      (424, 438, -1, -1, 0),
      (439, 447, -1, -1, 0),
      (448, 465, 8, -1, 0),
      (466, 480, -1, -1, 0),
      (481, 489, -1, -1, 0),
      (490, 504, -1, -1, 0));

   A_18 : constant Among_Array_Type (0 .. 5) := (
      (505, 507, -1, -1, 0),
      (508, 510, -1, -1, 0),
      (511, 513, -1, -1, 0),
      (514, 516, -1, -1, 0),
      (517, 519, -1, -1, 0),
      (520, 522, -1, -1, 0));

   A_19 : constant Among_Array_Type (0 .. 5) := (
      (523, 525, -1, -1, 0),
      (526, 528, -1, -1, 0),
      (529, 531, -1, -1, 0),
      (532, 534, -1, -1, 0),
      (535, 537, -1, -1, 0),
      (538, 540, -1, -1, 0));

   A_20 : constant Among_Array_Type (0 .. 7) := (
      (541, 543, -1, -1, 0),
      (544, 546, -1, -1, 0),
      (547, 549, -1, -1, 0),
      (550, 552, -1, -1, 0),
      (553, 555, -1, -1, 0),
      (556, 558, -1, -1, 0),
      (559, 561, -1, -1, 0),
      (562, 564, -1, -1, 0));

   A_21 : constant Among_Array_Type (0 .. 7) := (
      (565, 567, -1, -1, 0),
      (568, 570, -1, -1, 0),
      (571, 573, -1, -1, 0),
      (574, 576, -1, -1, 0),
      (577, 579, -1, -1, 0),
      (580, 582, -1, -1, 0),
      (583, 585, -1, -1, 0),
      (586, 588, -1, -1, 0));

   A_22 : constant Among_Array_Type (0 .. 1) := (
      (589, 597, -1, -1, 0),
      (598, 621, -1, -1, 0));

   A_23 : constant Among_Array_Type (0 .. 11) := (
      (622, 624, -1, -1, 0),
      (625, 627, -1, -1, 0),
      (628, 630, -1, -1, 0),
      (631, 633, -1, -1, 0),
      (634, 636, -1, -1, 0),
      (637, 639, -1, -1, 0),
      (640, 642, -1, -1, 0),
      (643, 645, -1, -1, 0),
      (646, 648, -1, -1, 0),
      (649, 651, -1, -1, 0),
      (652, 654, -1, -1, 0),
      (655, 657, -1, -1, 0));

   A_24 : constant Among_Array_Type (0 .. 7) := (
      (658, 660, -1, -1, 0),
      (661, 663, -1, -1, 0),
      (664, 666, -1, -1, 0),
      (667, 669, -1, -1, 0),
      (670, 672, -1, -1, 0),
      (673, 675, -1, -1, 0),
      (676, 678, -1, -1, 0),
      (679, 681, -1, -1, 0));

   A_25 : constant Among_Array_Type (0 .. 5) := (
      (682, 699, -1, -1, 0),
      (700, 720, -1, -1, 0),
      (721, 732, -1, -1, 0),
      (733, 747, -1, -1, 0),
      (748, 765, -1, -1, 0),
      (766, 774, -1, -1, 0));


   procedure R_Has_min_length (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
   begin
      --  (, line 99
      if not (Length_Utf8 (Z) > 4) then
         Result := False;
         return;
      end if;

      Result := True;
   end R_Has_min_length;

   procedure R_Fix_va_start (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_1 : Integer;
      v_2 : Integer;
      v_3 : Integer;
      v_4 : Integer;
      v_5 : Integer;
      v_6 : Integer;
      v_7 : Integer;
      v_8 : Integer;
      v_9 : Integer;
   begin
      --  (, line 103
      --  or, line 104
      v_1 := Z.C;
      --  (, line 104
      --  and, line 104
      v_2 := Z.C;
      --  try, line 104
      v_3 := Z.C;
      --  literal, line 104
      C := Eq_S (Z, "வோ");
      if C = 0 then
         Z.C := v_3;
         goto lab2;
      end if;
      Z.C := Z.C + C;

      <<lab2>>
      Z.C := v_2;
      Z.Bra := Z.C;      --  [, line 104

      --  literal, line 104
      C := Eq_S (Z, "வோ");
      if C = 0 then
         goto lab1;
      end if;
      Z.C := Z.C + C;
      Z.Ket := Z.C;      --  ], line 104

      --  <-, line 104
      Slice_From (Z, "ஓ");
      goto lab0;

      <<lab1>>
      Z.C := v_1;
      --  (, line 105
      --  and, line 105
      v_4 := Z.C;
      --  try, line 105
      v_5 := Z.C;
      --  literal, line 105
      C := Eq_S (Z, "வொ");
      if C = 0 then
         Z.C := v_5;
         goto lab4;
      end if;
      Z.C := Z.C + C;

      <<lab4>>
      Z.C := v_4;
      Z.Bra := Z.C;      --  [, line 105

      --  literal, line 105
      C := Eq_S (Z, "வொ");
      if C = 0 then
         goto lab3;
      end if;
      Z.C := Z.C + C;
      Z.Ket := Z.C;      --  ], line 105

      --  <-, line 105
      Slice_From (Z, "ஒ");
      goto lab0;

      <<lab3>>
      Z.C := v_1;
      --  (, line 106
      --  and, line 106
      v_6 := Z.C;
      --  try, line 106
      v_7 := Z.C;
      --  literal, line 106
      C := Eq_S (Z, "வு");
      if C = 0 then
         Z.C := v_7;
         goto lab6;
      end if;
      Z.C := Z.C + C;

      <<lab6>>
      Z.C := v_6;
      Z.Bra := Z.C;      --  [, line 106

      --  literal, line 106
      C := Eq_S (Z, "வு");
      if C = 0 then
         goto lab5;
      end if;
      Z.C := Z.C + C;
      Z.Ket := Z.C;      --  ], line 106

      --  <-, line 106
      Slice_From (Z, "உ");
      goto lab0;

      <<lab5>>
      Z.C := v_1;
      --  (, line 107
      --  and, line 107
      v_8 := Z.C;
      --  try, line 107
      v_9 := Z.C;
      --  literal, line 107
      C := Eq_S (Z, "வூ");
      if C = 0 then
         Z.C := v_9;
         goto lab7;
      end if;
      Z.C := Z.C + C;

      <<lab7>>
      Z.C := v_8;
      Z.Bra := Z.C;      --  [, line 107

      --  literal, line 107
      C := Eq_S (Z, "வூ");
      if C = 0 then
         Result := False;
         return;
      end if;
      Z.C := Z.C + C;
      Z.Ket := Z.C;      --  ], line 107

      --  <-, line 107
      Slice_From (Z, "ஊ");

      <<lab0>>

      Result := True;
   end R_Fix_va_start;

   procedure R_Fix_endings (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_1 : Integer;
      v_2 : Integer;
   begin
      --  (, line 110
      --  do, line 111
      v_1 := Z.C;
      --  repeat, line 111

      <<lab1>>

      loop
         v_2 := Z.C;
         --  call fix_ending, line 111
         R_Fix_ending (Z, Result);
         if not Result then
            goto lab2;
         end if;
         goto lab1;

         <<lab2>>
         Z.C := v_2;

         exit;
      end loop;

      <<lab0>>
      Z.C := v_1;

      Result := True;
   end R_Fix_endings;

   procedure R_Remove_question_prefixes (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_1 : Integer;
   begin
      --  (, line 114
      Z.Bra := Z.C;      --  [, line 115

      --  (, line 115
      --  literal, line 115
      C := Eq_S (Z, "எ");
      if C = 0 then
         Result := False;
         return;
      end if;
      Z.C := Z.C + C;
      --  among, line 115
      Find_Among (Z, A_0, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  literal, line 115
      C := Eq_S (Z, "்");
      if C = 0 then
         Result := False;
         return;
      end if;
      Z.C := Z.C + C;
      Z.Ket := Z.C;      --  ], line 115

      --  delete, line 115
      Slice_Del (Z);
      --  do, line 116
      v_1 := Z.C;
      --  call fix_va_start, line 116
      R_Fix_va_start (Z, Result);
      Z.C := v_1;

      Result := True;
   end R_Remove_question_prefixes;

   procedure R_Fix_ending (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_1 : Integer;
      v_2 : Integer;
      v_3 : Integer;
      v_4 : Integer;
      v_5 : Integer;
      v_6 : Integer;
      v_7 : Integer;
      v_8 : Integer;
      v_9 : Integer;
      v_10 : Integer;
      v_11 : Integer;
      v_12 : Integer;
      v_13 : Integer;
   begin
      --  (, line 120
      if not (Length_Utf8 (Z) > 3) then
         Result := False;
         return;
      end if;
      Z.Lb := Z.C; Z.C := Z.L;      --  backwards, line 122

      --  (, line 122
      --  or, line 124
      v_1 := Z.L - Z.C;
      --  (, line 123
      Z.Ket := Z.C;      --  [, line 123

      --  among, line 123
      if Z.C - 5 <= Z.Lb or else (Character'Pos (Z.P (Z.C)) /= 141 and then Character'Pos (Z.P (Z.C)) /= 164) then
         goto lab1;
         --  among, line 123
      end if;
      Find_Among_Backward (Z, A_1, Among_String, null, A);
      if A = 0 then
         goto lab1;
      end if;
      Z.Bra := Z.C;      --  ], line 123

      --  delete, line 123
      Slice_Del (Z);
      goto lab0;

      <<lab1>>
      Z.C := Z.L - v_1;
      --  (, line 125
      Z.Ket := Z.C;      --  [, line 125

      --  literal, line 125
      C := Eq_S_Backward (Z, "ய்");
      if C = 0 then
         goto lab2;
      end if;
      Z.C := Z.C - C;
      --  test, line 125
      v_2 := Z.L - Z.C;
      --  among, line 125
      Find_Among_Backward (Z, A_2, Among_String, null, A);
      if A = 0 then
         goto lab2;
      end if;
      Z.C := Z.L - v_2;
      Z.Bra := Z.C;      --  ], line 125

      --  delete, line 125
      Slice_Del (Z);
      goto lab0;

      <<lab2>>
      Z.C := Z.L - v_1;
      --  (, line 127
      Z.Ket := Z.C;      --  [, line 127

      --  or, line 127
      v_3 := Z.L - Z.C;
      --  literal, line 127
      C := Eq_S_Backward (Z, "ட்ப்");
      if C = 0 then
         goto lab5;
      end if;
      Z.C := Z.C - C;
      goto lab4;

      <<lab5>>
      Z.C := Z.L - v_3;
      --  literal, line 127
      C := Eq_S_Backward (Z, "ட்க்");
      if C = 0 then
         goto lab3;
      end if;
      Z.C := Z.C - C;

      <<lab4>>
      Z.Bra := Z.C;      --  ], line 127

      --  <-, line 127
      Slice_From (Z, "ள்");
      goto lab0;

      <<lab3>>
      Z.C := Z.L - v_1;
      --  (, line 129
      Z.Ket := Z.C;      --  [, line 129

      --  literal, line 129
      C := Eq_S_Backward (Z, "ன்ற்");
      if C = 0 then
         goto lab6;
      end if;
      Z.C := Z.C - C;
      Z.Bra := Z.C;      --  ], line 129

      --  <-, line 129
      Slice_From (Z, "ல்");
      goto lab0;

      <<lab6>>
      Z.C := Z.L - v_1;
      --  (, line 132
      Z.Ket := Z.C;      --  [, line 132

      --  literal, line 132
      C := Eq_S_Backward (Z, "ற்க்");
      if C = 0 then
         goto lab7;
      end if;
      Z.C := Z.C - C;
      Z.Bra := Z.C;      --  ], line 132

      --  <-, line 132
      Slice_From (Z, "ல்");
      goto lab0;

      <<lab7>>
      Z.C := Z.L - v_1;
      --  (, line 134
      Z.Ket := Z.C;      --  [, line 134

      --  literal, line 134
      C := Eq_S_Backward (Z, "ட்ட்");
      if C = 0 then
         goto lab8;
      end if;
      Z.C := Z.C - C;
      Z.Bra := Z.C;      --  ], line 134

      --  <-, line 134
      Slice_From (Z, "டு");
      goto lab0;

      <<lab8>>
      Z.C := Z.L - v_1;
      --  (, line 136
      --  Boolean test found_vetrumai_urupu, line 136
      if not Z.B_Found_vetrumai_urupu then
         goto lab9;
      end if;
      Z.Ket := Z.C;      --  [, line 136

      --  literal, line 136
      C := Eq_S_Backward (Z, "த்த்");
      if C = 0 then
         goto lab9;
      end if;
      Z.C := Z.C - C;
      --  (, line 136
      --  test, line 136
      v_4 := Z.L - Z.C;
      --  not, line 136
      v_5 := Z.L - Z.C;
      --  literal, line 136
      C := Eq_S_Backward (Z, "ை");
      if C = 0 then
         goto lab10;
      end if;
      Z.C := Z.C - C;
      goto lab9;

      <<lab10>>
      Z.C := Z.L - v_5;
      Z.C := Z.L - v_4;
      Z.Bra := Z.C;      --  ], line 136

      --  <-, line 136
      Slice_From (Z, "ம்");
      Z.Bra := Z.C;      --  ], line 136

      goto lab0;

      <<lab9>>
      Z.C := Z.L - v_1;
      --  (, line 138
      Z.Ket := Z.C;      --  [, line 138

      --  or, line 138
      v_6 := Z.L - Z.C;
      --  literal, line 138
      C := Eq_S_Backward (Z, "ுக்");
      if C = 0 then
         goto lab13;
      end if;
      Z.C := Z.C - C;
      goto lab12;

      <<lab13>>
      Z.C := Z.L - v_6;
      --  literal, line 138
      C := Eq_S_Backward (Z, "ுக்க்");
      if C = 0 then
         goto lab11;
      end if;
      Z.C := Z.C - C;

      <<lab12>>
      Z.Bra := Z.C;      --  ], line 138

      --  <-, line 138
      Slice_From (Z, "்");
      goto lab0;

      <<lab11>>
      Z.C := Z.L - v_1;
      --  (, line 140
      Z.Ket := Z.C;      --  [, line 140

      --  literal, line 140
      C := Eq_S_Backward (Z, "்");
      if C = 0 then
         goto lab14;
      end if;
      Z.C := Z.C - C;
      --  among, line 140
      Find_Among_Backward (Z, A_3, Among_String, null, A);
      if A = 0 then
         goto lab14;
      end if;
      --  literal, line 140
      C := Eq_S_Backward (Z, "்");
      if C = 0 then
         goto lab14;
      end if;
      Z.C := Z.C - C;
      --  among, line 140
      Find_Among_Backward (Z, A_4, Among_String, null, A);
      if A = 0 then
         goto lab14;
      end if;
      Z.Bra := Z.C;      --  ], line 140

      --  delete, line 140
      Slice_Del (Z);
      goto lab0;

      <<lab14>>
      Z.C := Z.L - v_1;
      --  (, line 142
      Z.Ket := Z.C;      --  [, line 142

      --  literal, line 142
      C := Eq_S_Backward (Z, "ுக்");
      if C = 0 then
         goto lab15;
      end if;
      Z.C := Z.C - C;
      Z.Bra := Z.C;      --  ], line 142

      --  <-, line 142
      Slice_From (Z, "்");
      goto lab0;

      <<lab15>>
      Z.C := Z.L - v_1;
      --  (, line 144
      Z.Ket := Z.C;      --  [, line 144

      --  literal, line 144
      C := Eq_S_Backward (Z, "்");
      if C = 0 then
         goto lab16;
      end if;
      Z.C := Z.C - C;
      --  among, line 144
      Find_Among_Backward (Z, A_5, Among_String, null, A);
      if A = 0 then
         goto lab16;
      end if;
      Z.Bra := Z.C;      --  ], line 144

      --  delete, line 144
      Slice_Del (Z);
      goto lab0;

      <<lab16>>
      Z.C := Z.L - v_1;
      --  (, line 146
      Z.Ket := Z.C;      --  [, line 146

      --  literal, line 146
      C := Eq_S_Backward (Z, "்");
      if C = 0 then
         goto lab17;
      end if;
      Z.C := Z.C - C;
      --  (, line 146
      --  or, line 146
      v_7 := Z.L - Z.C;
      --  among, line 146
      if Z.C - 2 <= Z.Lb or else Check_Among (Z, Z.C - 1, 5, 16#3d8000#) then
         goto lab19;
         --  among, line 146
      end if;
      Find_Among_Backward (Z, A_6, Among_String, null, A);
      if A = 0 then
         goto lab19;
      end if;
      goto lab18;

      <<lab19>>
      Z.C := Z.L - v_7;
      --  among, line 146
      Find_Among_Backward (Z, A_7, Among_String, null, A);
      if A = 0 then
         goto lab17;
      end if;

      <<lab18>>
      --  literal, line 146
      C := Eq_S_Backward (Z, "்");
      if C = 0 then
         goto lab17;
      end if;
      Z.C := Z.C - C;
      Z.Bra := Z.C;      --  ], line 146

      --  <-, line 146
      Slice_From (Z, "்");
      goto lab0;

      <<lab17>>
      Z.C := Z.L - v_1;
      --  (, line 148
      Z.Ket := Z.C;      --  [, line 148

      --  among, line 148
      Find_Among_Backward (Z, A_8, Among_String, null, A);
      if A = 0 then
         goto lab20;
      end if;
      Z.Bra := Z.C;      --  ], line 148

      --  delete, line 148
      Slice_Del (Z);
      goto lab0;

      <<lab20>>
      Z.C := Z.L - v_1;
      --  (, line 150
      Z.Ket := Z.C;      --  [, line 150

      --  literal, line 150
      C := Eq_S_Backward (Z, "னு");
      if C = 0 then
         goto lab21;
      end if;
      Z.C := Z.C - C;
      --  (, line 150
      --  test, line 150
      v_8 := Z.L - Z.C;
      --  not, line 150
      v_9 := Z.L - Z.C;
      --  among, line 150
      Find_Among_Backward (Z, A_9, Among_String, null, A);
      if A = 0 then
         goto lab22;
      end if;
      goto lab21;

      <<lab22>>
      Z.C := Z.L - v_9;
      Z.C := Z.L - v_8;
      Z.Bra := Z.C;      --  ], line 150

      --  delete, line 150
      Slice_Del (Z);
      goto lab0;

      <<lab21>>
      Z.C := Z.L - v_1;
      --  (, line 152
      Z.Ket := Z.C;      --  [, line 152

      --  literal, line 152
      C := Eq_S_Backward (Z, "ங்");
      if C = 0 then
         goto lab23;
      end if;
      Z.C := Z.C - C;
      --  (, line 152
      --  test, line 152
      v_10 := Z.L - Z.C;
      --  not, line 152
      v_11 := Z.L - Z.C;
      --  literal, line 152
      C := Eq_S_Backward (Z, "ை");
      if C = 0 then
         goto lab24;
      end if;
      Z.C := Z.C - C;
      goto lab23;

      <<lab24>>
      Z.C := Z.L - v_11;
      Z.C := Z.L - v_10;
      Z.Bra := Z.C;      --  ], line 152

      --  <-, line 152
      Slice_From (Z, "ம்");
      goto lab0;

      <<lab23>>
      Z.C := Z.L - v_1;
      --  (, line 154
      Z.Ket := Z.C;      --  [, line 154

      --  literal, line 154
      C := Eq_S_Backward (Z, "ங்");
      if C = 0 then
         goto lab25;
      end if;
      Z.C := Z.C - C;
      Z.Bra := Z.C;      --  ], line 154

      --  delete, line 154
      Slice_Del (Z);
      goto lab0;

      <<lab25>>
      Z.C := Z.L - v_1;
      --  (, line 156
      Z.Ket := Z.C;      --  [, line 156

      --  literal, line 156
      C := Eq_S_Backward (Z, "்");
      if C = 0 then
         Result := False;
         return;
      end if;
      Z.C := Z.C - C;
      --  (, line 156
      --  test, line 156
      v_12 := Z.L - Z.C;
      --  (, line 156
      --  or, line 156
      v_13 := Z.L - Z.C;
      --  among, line 156
      Find_Among_Backward (Z, A_10, Among_String, null, A);
      if A = 0 then
         goto lab27;
      end if;
      goto lab26;

      <<lab27>>
      Z.C := Z.L - v_13;
      --  literal, line 156
      C := Eq_S_Backward (Z, "்");
      if C = 0 then
         Result := False;
         return;
      end if;
      Z.C := Z.C - C;

      <<lab26>>
      Z.C := Z.L - v_12;
      Z.Bra := Z.C;      --  ], line 156

      --  delete, line 156
      Slice_Del (Z);

      <<lab0>>
      Z.C := Z.Lb;

      Result := True;
   end R_Fix_ending;

   procedure R_Remove_pronoun_prefixes (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_1 : Integer;
   begin
      --  (, line 160
      --  unset found_a_match, line 161
      Z.B_Found_a_match := False;
      Z.Bra := Z.C;      --  [, line 162

      --  among, line 162
      if Z.C + 2 >= Z.L or else Check_Among (Z, Z.C + 2, 4, 16#2a0#) then
         Result := False;
         return;
         --  among, line 162
      end if;
      Find_Among (Z, A_11, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  among, line 162
      Find_Among (Z, A_12, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  literal, line 162
      C := Eq_S (Z, "்");
      if C = 0 then
         Result := False;
         return;
      end if;
      Z.C := Z.C + C;
      Z.Ket := Z.C;      --  ], line 162

      --  delete, line 162
      Slice_Del (Z);
      --  (, line 163
      --  set found_a_match, line 163
      Z.B_Found_a_match := True;
      --  do, line 164
      v_1 := Z.C;
      --  call fix_va_start, line 164
      R_Fix_va_start (Z, Result);
      Z.C := v_1;

      Result := True;
   end R_Remove_pronoun_prefixes;

   procedure R_Remove_plural_suffix (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_1 : Integer;
      v_2 : Integer;
      v_3 : Integer;
   begin
      --  (, line 167
      --  unset found_a_match, line 168
      Z.B_Found_a_match := False;
      Z.Lb := Z.C; Z.C := Z.L;      --  backwards, line 169

      --  (, line 169
      --  or, line 170
      v_1 := Z.L - Z.C;
      --  (, line 170
      Z.Ket := Z.C;      --  [, line 170

      --  literal, line 170
      C := Eq_S_Backward (Z, "ுங்கள்");
      if C = 0 then
         goto lab1;
      end if;
      Z.C := Z.C - C;
      --  (, line 170
      --  test, line 170
      v_2 := Z.L - Z.C;
      --  not, line 170
      v_3 := Z.L - Z.C;
      --  among, line 170
      Find_Among_Backward (Z, A_13, Among_String, null, A);
      if A = 0 then
         goto lab2;
      end if;
      goto lab1;

      <<lab2>>
      Z.C := Z.L - v_3;
      Z.C := Z.L - v_2;
      Z.Bra := Z.C;      --  ], line 170

      --  <-, line 170
      Slice_From (Z, "்");
      goto lab0;

      <<lab1>>
      Z.C := Z.L - v_1;
      --  (, line 171
      Z.Ket := Z.C;      --  [, line 171

      --  literal, line 171
      C := Eq_S_Backward (Z, "ற்கள்");
      if C = 0 then
         goto lab3;
      end if;
      Z.C := Z.C - C;
      Z.Bra := Z.C;      --  ], line 171

      --  <-, line 171
      Slice_From (Z, "ல்");
      goto lab0;

      <<lab3>>
      Z.C := Z.L - v_1;
      --  (, line 172
      Z.Ket := Z.C;      --  [, line 172

      --  literal, line 172
      C := Eq_S_Backward (Z, "ட்கள்");
      if C = 0 then
         goto lab4;
      end if;
      Z.C := Z.C - C;
      Z.Bra := Z.C;      --  ], line 172

      --  <-, line 172
      Slice_From (Z, "ள்");
      goto lab0;

      <<lab4>>
      Z.C := Z.L - v_1;
      --  (, line 173
      Z.Ket := Z.C;      --  [, line 173

      --  literal, line 173
      C := Eq_S_Backward (Z, "கள்");
      if C = 0 then
         Result := False;
         return;
      end if;
      Z.C := Z.C - C;
      Z.Bra := Z.C;      --  ], line 173

      --  delete, line 173
      Slice_Del (Z);

      <<lab0>>
      --  (, line 174
      --  set found_a_match, line 174
      Z.B_Found_a_match := True;
      Z.C := Z.Lb;

      Result := True;
   end R_Remove_plural_suffix;

   procedure R_Remove_question_suffixes (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_1 : Integer;
   begin
      --  (, line 178
      --  call has_min_length, line 179
      R_Has_min_length (Z, Result);
      if not Result then
         Result := False;
         return;
      end if;
      --  unset found_a_match, line 180
      Z.B_Found_a_match := False;
      Z.Lb := Z.C; Z.C := Z.L;      --  backwards, line 181

      --  (, line 181
      --  do, line 182
      v_1 := Z.L - Z.C;
      --  (, line 182
      Z.Ket := Z.C;      --  [, line 183

      --  among, line 183
      Find_Among_Backward (Z, A_14, Among_String, null, A);
      if A = 0 then
         goto lab0;
      end if;
      Z.Bra := Z.C;      --  ], line 183

      --  <-, line 183
      Slice_From (Z, "்");
      --  (, line 184
      --  set found_a_match, line 184
      Z.B_Found_a_match := True;

      <<lab0>>
      Z.C := Z.L - v_1;
      Z.C := Z.Lb;
      --  do, line 187
      --  call fix_endings, line 187
      R_Fix_endings (Z, Result);

      Result := True;
   end R_Remove_question_suffixes;

   procedure R_Remove_command_suffixes (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
   begin
      --  (, line 190
      --  call has_min_length, line 191
      R_Has_min_length (Z, Result);
      if not Result then
         Result := False;
         return;
      end if;
      --  unset found_a_match, line 192
      Z.B_Found_a_match := False;
      Z.Lb := Z.C; Z.C := Z.L;      --  backwards, line 193

      --  (, line 193
      Z.Ket := Z.C;      --  [, line 194

      --  among, line 194
      if Z.C - 5 <= Z.Lb or else Character'Pos (Z.P (Z.C)) /= 191 then
         Result := False;
         return;
         --  among, line 194
      end if;
      Find_Among_Backward (Z, A_15, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 194

      --  delete, line 194
      Slice_Del (Z);
      --  (, line 195
      --  set found_a_match, line 195
      Z.B_Found_a_match := True;
      Z.C := Z.Lb;

      Result := True;
   end R_Remove_command_suffixes;

   procedure R_Remove_um (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_1 : Integer;
   begin
      --  (, line 199
      --  unset found_a_match, line 200
      Z.B_Found_a_match := False;
      --  call has_min_length, line 201
      R_Has_min_length (Z, Result);
      if not Result then
         Result := False;
         return;
      end if;
      Z.Lb := Z.C; Z.C := Z.L;      --  backwards, line 202

      --  (, line 202
      Z.Ket := Z.C;      --  [, line 202

      --  literal, line 202
      C := Eq_S_Backward (Z, "ும்");
      if C = 0 then
         Result := False;
         return;
      end if;
      Z.C := Z.C - C;
      Z.Bra := Z.C;      --  ], line 202

      --  <-, line 202
      Slice_From (Z, "்");
      --  (, line 203
      --  set found_a_match, line 203
      Z.B_Found_a_match := True;
      Z.C := Z.Lb;
      --  do, line 205
      v_1 := Z.C;
      --  call fix_ending, line 205
      R_Fix_ending (Z, Result);
      Z.C := v_1;

      Result := True;
   end R_Remove_um;

   procedure R_Remove_common_word_endings (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_1 : Integer;
      v_2 : Integer;
      v_3 : Integer;
      v_4 : Integer;
      v_5 : Integer;
      v_6 : Integer;
   begin
      --  (, line 208
      --  unset found_a_match, line 212
      Z.B_Found_a_match := False;
      --  call has_min_length, line 213
      R_Has_min_length (Z, Result);
      if not Result then
         Result := False;
         return;
      end if;
      Z.Lb := Z.C; Z.C := Z.L;      --  backwards, line 214

      --  (, line 214
      --  or, line 231
      v_1 := Z.L - Z.C;
      --  test, line 215
      v_2 := Z.L - Z.C;
      --  (, line 215
      Z.Ket := Z.C;      --  [, line 215

      --  or, line 215
      v_3 := Z.L - Z.C;
      --  literal, line 215
      C := Eq_S_Backward (Z, "ுடன்");
      if C = 0 then
         goto lab3;
      end if;
      Z.C := Z.C - C;
      goto lab2;

      <<lab3>>
      Z.C := Z.L - v_3;
      --  literal, line 216
      C := Eq_S_Backward (Z, "ில்லை");
      if C = 0 then
         goto lab4;
      end if;
      Z.C := Z.C - C;
      goto lab2;

      <<lab4>>
      Z.C := Z.L - v_3;
      --  literal, line 217
      C := Eq_S_Backward (Z, "ிடம்");
      if C = 0 then
         goto lab5;
      end if;
      Z.C := Z.C - C;
      goto lab2;

      <<lab5>>
      Z.C := Z.L - v_3;
      --  literal, line 218
      C := Eq_S_Backward (Z, "ின்றி");
      if C = 0 then
         goto lab6;
      end if;
      Z.C := Z.C - C;
      goto lab2;

      <<lab6>>
      Z.C := Z.L - v_3;
      --  literal, line 219
      C := Eq_S_Backward (Z, "ாகி");
      if C = 0 then
         goto lab7;
      end if;
      Z.C := Z.C - C;
      goto lab2;

      <<lab7>>
      Z.C := Z.L - v_3;
      --  literal, line 220
      C := Eq_S_Backward (Z, "ாகிய");
      if C = 0 then
         goto lab8;
      end if;
      Z.C := Z.C - C;
      goto lab2;

      <<lab8>>
      Z.C := Z.L - v_3;
      --  literal, line 221
      C := Eq_S_Backward (Z, "ென்று");
      if C = 0 then
         goto lab9;
      end if;
      Z.C := Z.C - C;
      goto lab2;

      <<lab9>>
      Z.C := Z.L - v_3;
      --  literal, line 222
      C := Eq_S_Backward (Z, "ுள்ள");
      if C = 0 then
         goto lab10;
      end if;
      Z.C := Z.C - C;
      goto lab2;

      <<lab10>>
      Z.C := Z.L - v_3;
      --  literal, line 223
      C := Eq_S_Backward (Z, "ுடைய");
      if C = 0 then
         goto lab11;
      end if;
      Z.C := Z.C - C;
      goto lab2;

      <<lab11>>
      Z.C := Z.L - v_3;
      --  literal, line 224
      C := Eq_S_Backward (Z, "ுடை");
      if C = 0 then
         goto lab12;
      end if;
      Z.C := Z.C - C;
      goto lab2;

      <<lab12>>
      Z.C := Z.L - v_3;
      --  literal, line 225
      C := Eq_S_Backward (Z, "ெனும்");
      if C = 0 then
         goto lab13;
      end if;
      Z.C := Z.C - C;
      goto lab2;

      <<lab13>>
      Z.C := Z.L - v_3;
      --  (, line 226
      --  literal, line 226
      C := Eq_S_Backward (Z, "ல்ல");
      if C = 0 then
         goto lab14;
      end if;
      Z.C := Z.C - C;
      --  test, line 226
      v_4 := Z.L - Z.C;
      --  (, line 226
      --  not, line 226
      v_5 := Z.L - Z.C;
      --  among, line 226
      Find_Among_Backward (Z, A_16, Among_String, null, A);
      if A = 0 then
         goto lab15;
      end if;
      goto lab14;

      <<lab15>>
      Z.C := Z.L - v_5;
      Z.C := Z.L - v_4;
      goto lab2;

      <<lab14>>
      Z.C := Z.L - v_3;
      --  literal, line 227
      C := Eq_S_Backward (Z, "ென");
      if C = 0 then
         goto lab16;
      end if;
      Z.C := Z.C - C;
      goto lab2;

      <<lab16>>
      Z.C := Z.L - v_3;
      --  literal, line 228
      C := Eq_S_Backward (Z, "ாகி");
      if C = 0 then
         goto lab1;
      end if;
      Z.C := Z.C - C;

      <<lab2>>
      Z.Bra := Z.C;      --  ], line 228

      --  <-, line 228
      Slice_From (Z, "்");
      --  (, line 229
      --  set found_a_match, line 229
      Z.B_Found_a_match := True;
      Z.C := Z.L - v_2;
      goto lab0;

      <<lab1>>
      Z.C := Z.L - v_1;
      --  test, line 232
      v_6 := Z.L - Z.C;
      --  (, line 232
      Z.Ket := Z.C;      --  [, line 232

      --  among, line 232
      Find_Among_Backward (Z, A_17, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 245

      --  delete, line 245
      Slice_Del (Z);
      --  (, line 246
      --  set found_a_match, line 246
      Z.B_Found_a_match := True;
      Z.C := Z.L - v_6;

      <<lab0>>
      Z.C := Z.Lb;
      --  do, line 249
      --  call fix_endings, line 249
      R_Fix_endings (Z, Result);

      Result := True;
   end R_Remove_common_word_endings;

   procedure R_Remove_vetrumai_urupukal (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_1 : Integer;
      v_2 : Integer;
      v_3 : Integer;
      v_4 : Integer;
      v_5 : Integer;
      v_6 : Integer;
      v_7 : Integer;
      v_8 : Integer;
      v_9 : Integer;
      v_10 : Integer;
      v_11 : Integer;
      v_12 : Integer;
      v_13 : Integer;
      v_14 : Integer;
      v_15 : Integer;
      v_16 : Integer;
      v_17 : Integer;
      v_18 : Integer;
      v_19 : Integer;
      v_20 : Integer;
   begin
      --  (, line 252
      --  unset found_a_match, line 253
      Z.B_Found_a_match := False;
      --  unset found_vetrumai_urupu, line 254
      Z.B_Found_vetrumai_urupu := False;
      --  call has_min_length, line 255
      R_Has_min_length (Z, Result);
      if not Result then
         Result := False;
         return;
      end if;
      Z.Lb := Z.C; Z.C := Z.L;      --  backwards, line 256

      --  (, line 256
      --  (, line 257
      --  or, line 259
      v_1 := Z.L - Z.C;
      --  test, line 258
      v_2 := Z.L - Z.C;
      --  (, line 258
      Z.Ket := Z.C;      --  [, line 258

      --  literal, line 258
      C := Eq_S_Backward (Z, "னை");
      if C = 0 then
         goto lab1;
      end if;
      Z.C := Z.C - C;
      Z.Bra := Z.C;      --  ], line 258

      --  delete, line 258
      Slice_Del (Z);
      Z.C := Z.L - v_2;
      goto lab0;

      <<lab1>>
      Z.C := Z.L - v_1;
      --  test, line 260
      v_3 := Z.L - Z.C;
      --  (, line 260
      Z.Ket := Z.C;      --  [, line 260

      --  or, line 261
      v_4 := Z.L - Z.C;
      --  (, line 260
      --  or, line 260
      v_5 := Z.L - Z.C;
      --  literal, line 260
      C := Eq_S_Backward (Z, "ினை");
      if C = 0 then
         goto lab6;
      end if;
      Z.C := Z.C - C;
      goto lab5;

      <<lab6>>
      Z.C := Z.L - v_5;
      --  literal, line 261
      C := Eq_S_Backward (Z, "ை");
      if C = 0 then
         goto lab4;
      end if;
      Z.C := Z.C - C;

      <<lab5>>
      --  (, line 261
      --  test, line 261
      v_6 := Z.L - Z.C;
      --  not, line 261
      v_7 := Z.L - Z.C;
      --  among, line 261
      Find_Among_Backward (Z, A_18, Among_String, null, A);
      if A = 0 then
         goto lab7;
      end if;
      goto lab4;

      <<lab7>>
      Z.C := Z.L - v_7;
      Z.C := Z.L - v_6;
      goto lab3;

      <<lab4>>
      Z.C := Z.L - v_4;
      --  (, line 262
      --  literal, line 262
      C := Eq_S_Backward (Z, "ை");
      if C = 0 then
         goto lab2;
      end if;
      Z.C := Z.C - C;
      --  (, line 262
      --  test, line 262
      v_8 := Z.L - Z.C;
      --  (, line 262
      --  among, line 262
      Find_Among_Backward (Z, A_19, Among_String, null, A);
      if A = 0 then
         goto lab2;
      end if;
      --  literal, line 262
      C := Eq_S_Backward (Z, "்");
      if C = 0 then
         goto lab2;
      end if;
      Z.C := Z.C - C;
      Z.C := Z.L - v_8;

      <<lab3>>
      Z.Bra := Z.C;      --  ], line 263

      --  <-, line 263
      Slice_From (Z, "்");
      Z.C := Z.L - v_3;
      goto lab0;

      <<lab2>>
      Z.C := Z.L - v_1;
      --  test, line 266
      v_9 := Z.L - Z.C;
      --  (, line 266
      Z.Ket := Z.C;      --  [, line 266

      --  or, line 267
      v_10 := Z.L - Z.C;
      --  literal, line 267
      C := Eq_S_Backward (Z, "ொடு");
      if C = 0 then
         goto lab10;
      end if;
      Z.C := Z.C - C;
      goto lab9;

      <<lab10>>
      Z.C := Z.L - v_10;
      --  literal, line 268
      C := Eq_S_Backward (Z, "ோடு");
      if C = 0 then
         goto lab11;
      end if;
      Z.C := Z.C - C;
      goto lab9;

      <<lab11>>
      Z.C := Z.L - v_10;
      --  literal, line 269
      C := Eq_S_Backward (Z, "ில்");
      if C = 0 then
         goto lab12;
      end if;
      Z.C := Z.C - C;
      goto lab9;

      <<lab12>>
      Z.C := Z.L - v_10;
      --  literal, line 270
      C := Eq_S_Backward (Z, "ிற்");
      if C = 0 then
         goto lab13;
      end if;
      Z.C := Z.C - C;
      goto lab9;

      <<lab13>>
      Z.C := Z.L - v_10;
      --  (, line 271
      --  literal, line 271
      C := Eq_S_Backward (Z, "ின்");
      if C = 0 then
         goto lab14;
      end if;
      Z.C := Z.C - C;
      --  (, line 271
      --  test, line 271
      v_11 := Z.L - Z.C;
      --  not, line 271
      v_12 := Z.L - Z.C;
      --  literal, line 271
      C := Eq_S_Backward (Z, "ம");
      if C = 0 then
         goto lab15;
      end if;
      Z.C := Z.C - C;
      goto lab14;

      <<lab15>>
      Z.C := Z.L - v_12;
      Z.C := Z.L - v_11;
      goto lab9;

      <<lab14>>
      Z.C := Z.L - v_10;
      --  literal, line 272
      C := Eq_S_Backward (Z, "ின்று");
      if C = 0 then
         goto lab16;
      end if;
      Z.C := Z.C - C;
      goto lab9;

      <<lab16>>
      Z.C := Z.L - v_10;
      --  literal, line 273
      C := Eq_S_Backward (Z, "ிருந்து");
      if C = 0 then
         goto lab17;
      end if;
      Z.C := Z.C - C;
      goto lab9;

      <<lab17>>
      Z.C := Z.L - v_10;
      --  literal, line 274
      C := Eq_S_Backward (Z, "விட");
      if C = 0 then
         goto lab18;
      end if;
      Z.C := Z.C - C;
      goto lab9;

      <<lab18>>
      Z.C := Z.L - v_10;
      --  (, line 275
      if not (Length_Utf8 (Z) >= 7) then
         goto lab19;
      end if;
      --  literal, line 275
      C := Eq_S_Backward (Z, "ிடம்");
      if C = 0 then
         goto lab19;
      end if;
      Z.C := Z.C - C;
      goto lab9;

      <<lab19>>
      Z.C := Z.L - v_10;
      --  literal, line 276
      C := Eq_S_Backward (Z, "ால்");
      if C = 0 then
         goto lab20;
      end if;
      Z.C := Z.C - C;
      goto lab9;

      <<lab20>>
      Z.C := Z.L - v_10;
      --  literal, line 277
      C := Eq_S_Backward (Z, "ுடை");
      if C = 0 then
         goto lab21;
      end if;
      Z.C := Z.C - C;
      goto lab9;

      <<lab21>>
      Z.C := Z.L - v_10;
      --  literal, line 278
      C := Eq_S_Backward (Z, "ாமல்");
      if C = 0 then
         goto lab22;
      end if;
      Z.C := Z.C - C;
      goto lab9;

      <<lab22>>
      Z.C := Z.L - v_10;
      --  (, line 279
      --  literal, line 279
      C := Eq_S_Backward (Z, "ல்");
      if C = 0 then
         goto lab23;
      end if;
      Z.C := Z.C - C;
      --  (, line 279
      --  test, line 279
      v_13 := Z.L - Z.C;
      --  not, line 279
      v_14 := Z.L - Z.C;
      --  among, line 279
      Find_Among_Backward (Z, A_20, Among_String, null, A);
      if A = 0 then
         goto lab24;
      end if;
      goto lab23;

      <<lab24>>
      Z.C := Z.L - v_14;
      Z.C := Z.L - v_13;
      goto lab9;

      <<lab23>>
      Z.C := Z.L - v_10;
      --  literal, line 280
      C := Eq_S_Backward (Z, "ுள்");
      if C = 0 then
         goto lab8;
      end if;
      Z.C := Z.C - C;

      <<lab9>>
      Z.Bra := Z.C;      --  ], line 281

      --  <-, line 281
      Slice_From (Z, "்");
      Z.C := Z.L - v_9;
      goto lab0;

      <<lab8>>
      Z.C := Z.L - v_1;
      --  test, line 284
      v_15 := Z.L - Z.C;
      --  (, line 284
      Z.Ket := Z.C;      --  [, line 284

      --  or, line 285
      v_16 := Z.L - Z.C;
      --  literal, line 285
      C := Eq_S_Backward (Z, "கண்");
      if C = 0 then
         goto lab27;
      end if;
      Z.C := Z.C - C;
      goto lab26;

      <<lab27>>
      Z.C := Z.L - v_16;
      --  literal, line 286
      C := Eq_S_Backward (Z, "முன்");
      if C = 0 then
         goto lab28;
      end if;
      Z.C := Z.C - C;
      goto lab26;

      <<lab28>>
      Z.C := Z.L - v_16;
      --  literal, line 287
      C := Eq_S_Backward (Z, "மேல்");
      if C = 0 then
         goto lab29;
      end if;
      Z.C := Z.C - C;
      goto lab26;

      <<lab29>>
      Z.C := Z.L - v_16;
      --  literal, line 288
      C := Eq_S_Backward (Z, "மேற்");
      if C = 0 then
         goto lab30;
      end if;
      Z.C := Z.C - C;
      goto lab26;

      <<lab30>>
      Z.C := Z.L - v_16;
      --  literal, line 289
      C := Eq_S_Backward (Z, "கீழ்");
      if C = 0 then
         goto lab31;
      end if;
      Z.C := Z.C - C;
      goto lab26;

      <<lab31>>
      Z.C := Z.L - v_16;
      --  literal, line 290
      C := Eq_S_Backward (Z, "பின்");
      if C = 0 then
         goto lab32;
      end if;
      Z.C := Z.C - C;
      goto lab26;

      <<lab32>>
      Z.C := Z.L - v_16;
      --  (, line 291
      --  literal, line 291
      C := Eq_S_Backward (Z, "து");
      if C = 0 then
         goto lab25;
      end if;
      Z.C := Z.C - C;
      --  (, line 291
      --  test, line 291
      v_17 := Z.L - Z.C;
      --  not, line 291
      v_18 := Z.L - Z.C;
      --  among, line 291
      Find_Among_Backward (Z, A_21, Among_String, null, A);
      if A = 0 then
         goto lab33;
      end if;
      goto lab25;

      <<lab33>>
      Z.C := Z.L - v_18;
      Z.C := Z.L - v_17;

      <<lab26>>
      Z.Bra := Z.C;      --  ], line 292

      --  delete, line 292
      Slice_Del (Z);
      Z.C := Z.L - v_15;
      goto lab0;

      <<lab25>>
      Z.C := Z.L - v_1;
      --  test, line 295
      v_19 := Z.L - Z.C;
      --  (, line 295
      Z.Ket := Z.C;      --  [, line 295

      --  literal, line 295
      C := Eq_S_Backward (Z, "ீ");
      if C = 0 then
         Result := False;
         return;
      end if;
      Z.C := Z.C - C;
      Z.Bra := Z.C;      --  ], line 295

      --  <-, line 295
      Slice_From (Z, "ி");
      Z.C := Z.L - v_19;

      <<lab0>>
      --  (, line 297
      --  set found_a_match, line 297
      Z.B_Found_a_match := True;
      --  (, line 298
      --  set found_vetrumai_urupu, line 298
      Z.B_Found_vetrumai_urupu := True;
      --  do, line 299
      v_20 := Z.L - Z.C;
      --  (, line 299
      Z.Ket := Z.C;      --  [, line 299

      --  literal, line 299
      C := Eq_S_Backward (Z, "ின்");
      if C = 0 then
         goto lab34;
      end if;
      Z.C := Z.C - C;
      Z.Bra := Z.C;      --  ], line 299

      --  <-, line 299
      Slice_From (Z, "்");

      <<lab34>>
      Z.C := Z.L - v_20;
      Z.C := Z.Lb;
      --  do, line 301
      --  call fix_endings, line 301
      R_Fix_endings (Z, Result);

      Result := True;
   end R_Remove_vetrumai_urupukal;

   procedure R_Remove_tense_suffixes (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_1 : Integer;
      v_2 : Integer;
   begin
      --  (, line 304
      --  set found_a_match, line 305
      Z.B_Found_a_match := True;
      --  repeat, line 306

      <<lab0>>

      loop
         v_1 := Z.C;
         --  (, line 306
         --  Boolean test found_a_match, line 306
         if not Z.B_Found_a_match then
            goto lab1;
         end if;
         --  (, line 306
         --  do, line 306
         v_2 := Z.C;
         --  call remove_tense_suffix, line 306
         R_Remove_tense_suffix (Z, Result);
         Z.C := v_2;
         goto lab0;

         <<lab1>>
         Z.C := v_1;

         exit;
      end loop;

      Result := True;
   end R_Remove_tense_suffixes;

   procedure R_Remove_tense_suffix (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_1 : Integer;
      v_2 : Integer;
      v_3 : Integer;
      v_4 : Integer;
      v_5 : Integer;
      v_6 : Integer;
      v_7 : Integer;
      v_8 : Integer;
      v_9 : Integer;
      v_10 : Integer;
      v_11 : Integer;
      v_12 : Integer;
      v_13 : Integer;
      v_14 : Integer;
      v_15 : Integer;
      v_16 : Integer;
      v_17 : Integer;
   begin
      --  (, line 309
      --  unset found_a_match, line 310
      Z.B_Found_a_match := False;
      --  call has_min_length, line 311
      R_Has_min_length (Z, Result);
      if not Result then
         Result := False;
         return;
      end if;
      Z.Lb := Z.C; Z.C := Z.L;      --  backwards, line 312

      --  (, line 312
      --  do, line 313
      v_1 := Z.L - Z.C;
      --  (, line 313
      --  or, line 320
      v_2 := Z.L - Z.C;
      --  test, line 314
      v_3 := Z.L - Z.C;
      --  (, line 314
      Z.Ket := Z.C;      --  [, line 314

      --  among, line 314
      if Z.C - 8 <= Z.Lb or else (Character'Pos (Z.P (Z.C)) /= 129 and then Character'Pos (Z.P (Z.C)) /= 141) then
         goto lab2;
         --  among, line 314
      end if;
      Find_Among_Backward (Z, A_22, Among_String, null, A);
      if A = 0 then
         goto lab2;
      end if;
      Z.Bra := Z.C;      --  ], line 317

      --  delete, line 317
      Slice_Del (Z);
      --  (, line 318
      --  set found_a_match, line 318
      Z.B_Found_a_match := True;
      Z.C := Z.L - v_3;
      goto lab1;

      <<lab2>>
      Z.C := Z.L - v_2;
      --  test, line 321
      v_4 := Z.L - Z.C;
      --  (, line 321
      Z.Ket := Z.C;      --  [, line 321

      --  or, line 322
      v_5 := Z.L - Z.C;
      --  literal, line 322
      C := Eq_S_Backward (Z, "மார்");
      if C = 0 then
         goto lab5;
      end if;
      Z.C := Z.C - C;
      goto lab4;

      <<lab5>>
      Z.C := Z.L - v_5;
      --  literal, line 323
      C := Eq_S_Backward (Z, "மின்");
      if C = 0 then
         goto lab6;
      end if;
      Z.C := Z.C - C;
      goto lab4;

      <<lab6>>
      Z.C := Z.L - v_5;
      --  literal, line 324
      C := Eq_S_Backward (Z, "னன்");
      if C = 0 then
         goto lab7;
      end if;
      Z.C := Z.C - C;
      goto lab4;

      <<lab7>>
      Z.C := Z.L - v_5;
      --  literal, line 325
      C := Eq_S_Backward (Z, "னான்");
      if C = 0 then
         goto lab8;
      end if;
      Z.C := Z.C - C;
      goto lab4;

      <<lab8>>
      Z.C := Z.L - v_5;
      --  literal, line 326
      C := Eq_S_Backward (Z, "னாள்");
      if C = 0 then
         goto lab9;
      end if;
      Z.C := Z.C - C;
      goto lab4;

      <<lab9>>
      Z.C := Z.L - v_5;
      --  literal, line 327
      C := Eq_S_Backward (Z, "னார்");
      if C = 0 then
         goto lab10;
      end if;
      Z.C := Z.C - C;
      goto lab4;

      <<lab10>>
      Z.C := Z.L - v_5;
      --  (, line 328
      --  literal, line 328
      C := Eq_S_Backward (Z, "வன்");
      if C = 0 then
         goto lab11;
      end if;
      Z.C := Z.C - C;
      --  test, line 328
      v_6 := Z.L - Z.C;
      --  (, line 328
      --  not, line 328
      v_7 := Z.L - Z.C;
      --  among, line 328
      if Z.C - 2 <= Z.Lb or else Check_Among (Z, Z.C - 1, 4, 16#1dc7e0#) then
         goto lab12;
         --  among, line 328
      end if;
      Find_Among_Backward (Z, A_23, Among_String, null, A);
      if A = 0 then
         goto lab12;
      end if;
      goto lab11;

      <<lab12>>
      Z.C := Z.L - v_7;
      Z.C := Z.L - v_6;
      goto lab4;

      <<lab11>>
      Z.C := Z.L - v_5;
      --  literal, line 329
      C := Eq_S_Backward (Z, "னள்");
      if C = 0 then
         goto lab13;
      end if;
      Z.C := Z.C - C;
      goto lab4;

      <<lab13>>
      Z.C := Z.L - v_5;
      --  literal, line 330
      C := Eq_S_Backward (Z, "வள்");
      if C = 0 then
         goto lab14;
      end if;
      Z.C := Z.C - C;
      goto lab4;

      <<lab14>>
      Z.C := Z.L - v_5;
      --  literal, line 331
      C := Eq_S_Backward (Z, "னர்");
      if C = 0 then
         goto lab15;
      end if;
      Z.C := Z.C - C;
      goto lab4;

      <<lab15>>
      Z.C := Z.L - v_5;
      --  literal, line 332
      C := Eq_S_Backward (Z, "வர்");
      if C = 0 then
         goto lab16;
      end if;
      Z.C := Z.C - C;
      goto lab4;

      <<lab16>>
      Z.C := Z.L - v_5;
      --  literal, line 333
      C := Eq_S_Backward (Z, "ன");
      if C = 0 then
         goto lab17;
      end if;
      Z.C := Z.C - C;
      goto lab4;

      <<lab17>>
      Z.C := Z.L - v_5;
      --  literal, line 333
      C := Eq_S_Backward (Z, "ப");
      if C = 0 then
         goto lab18;
      end if;
      Z.C := Z.C - C;
      goto lab4;

      <<lab18>>
      Z.C := Z.L - v_5;
      --  literal, line 333
      C := Eq_S_Backward (Z, "க");
      if C = 0 then
         goto lab19;
      end if;
      Z.C := Z.C - C;
      goto lab4;

      <<lab19>>
      Z.C := Z.L - v_5;
      --  literal, line 333
      C := Eq_S_Backward (Z, "த");
      if C = 0 then
         goto lab20;
      end if;
      Z.C := Z.C - C;
      goto lab4;

      <<lab20>>
      Z.C := Z.L - v_5;
      --  literal, line 333
      C := Eq_S_Backward (Z, "ய");
      if C = 0 then
         goto lab21;
      end if;
      Z.C := Z.C - C;
      goto lab4;

      <<lab21>>
      Z.C := Z.L - v_5;
      --  literal, line 334
      C := Eq_S_Backward (Z, "பன்");
      if C = 0 then
         goto lab22;
      end if;
      Z.C := Z.C - C;
      goto lab4;

      <<lab22>>
      Z.C := Z.L - v_5;
      --  literal, line 335
      C := Eq_S_Backward (Z, "பள்");
      if C = 0 then
         goto lab23;
      end if;
      Z.C := Z.C - C;
      goto lab4;

      <<lab23>>
      Z.C := Z.L - v_5;
      --  literal, line 336
      C := Eq_S_Backward (Z, "பர்");
      if C = 0 then
         goto lab24;
      end if;
      Z.C := Z.C - C;
      goto lab4;

      <<lab24>>
      Z.C := Z.L - v_5;
      --  (, line 337
      --  literal, line 337
      C := Eq_S_Backward (Z, "து");
      if C = 0 then
         goto lab25;
      end if;
      Z.C := Z.C - C;
      --  (, line 337
      --  test, line 337
      v_8 := Z.L - Z.C;
      --  not, line 337
      v_9 := Z.L - Z.C;
      --  among, line 337
      Find_Among_Backward (Z, A_24, Among_String, null, A);
      if A = 0 then
         goto lab26;
      end if;
      goto lab25;

      <<lab26>>
      Z.C := Z.L - v_9;
      Z.C := Z.L - v_8;
      goto lab4;

      <<lab25>>
      Z.C := Z.L - v_5;
      --  literal, line 338
      C := Eq_S_Backward (Z, "ிற்று");
      if C = 0 then
         goto lab27;
      end if;
      Z.C := Z.C - C;
      goto lab4;

      <<lab27>>
      Z.C := Z.L - v_5;
      --  literal, line 339
      C := Eq_S_Backward (Z, "பம்");
      if C = 0 then
         goto lab28;
      end if;
      Z.C := Z.C - C;
      goto lab4;

      <<lab28>>
      Z.C := Z.L - v_5;
      --  literal, line 340
      C := Eq_S_Backward (Z, "னம்");
      if C = 0 then
         goto lab29;
      end if;
      Z.C := Z.C - C;
      goto lab4;

      <<lab29>>
      Z.C := Z.L - v_5;
      --  literal, line 341
      C := Eq_S_Backward (Z, "தும்");
      if C = 0 then
         goto lab30;
      end if;
      Z.C := Z.C - C;
      goto lab4;

      <<lab30>>
      Z.C := Z.L - v_5;
      --  literal, line 342
      C := Eq_S_Backward (Z, "றும்");
      if C = 0 then
         goto lab31;
      end if;
      Z.C := Z.C - C;
      goto lab4;

      <<lab31>>
      Z.C := Z.L - v_5;
      --  literal, line 343
      C := Eq_S_Backward (Z, "கும்");
      if C = 0 then
         goto lab32;
      end if;
      Z.C := Z.C - C;
      goto lab4;

      <<lab32>>
      Z.C := Z.L - v_5;
      --  literal, line 344
      C := Eq_S_Backward (Z, "னென்");
      if C = 0 then
         goto lab33;
      end if;
      Z.C := Z.C - C;
      goto lab4;

      <<lab33>>
      Z.C := Z.L - v_5;
      --  literal, line 345
      C := Eq_S_Backward (Z, "னை");
      if C = 0 then
         goto lab34;
      end if;
      Z.C := Z.C - C;
      goto lab4;

      <<lab34>>
      Z.C := Z.L - v_5;
      --  literal, line 346
      C := Eq_S_Backward (Z, "வை");
      if C = 0 then
         goto lab3;
      end if;
      Z.C := Z.C - C;

      <<lab4>>
      Z.Bra := Z.C;      --  ], line 347

      --  delete, line 347
      Slice_Del (Z);
      --  (, line 348
      --  set found_a_match, line 348
      Z.B_Found_a_match := True;
      Z.C := Z.L - v_4;
      goto lab1;

      <<lab3>>
      Z.C := Z.L - v_2;
      --  test, line 351
      v_10 := Z.L - Z.C;
      --  (, line 351
      Z.Ket := Z.C;      --  [, line 351

      --  or, line 352
      v_11 := Z.L - Z.C;
      --  (, line 352
      --  literal, line 352
      C := Eq_S_Backward (Z, "ான்");
      if C = 0 then
         goto lab37;
      end if;
      Z.C := Z.C - C;
      --  test, line 352
      v_12 := Z.L - Z.C;
      --  (, line 352
      --  not, line 352
      v_13 := Z.L - Z.C;
      --  literal, line 352
      C := Eq_S_Backward (Z, "ச");
      if C = 0 then
         goto lab38;
      end if;
      Z.C := Z.C - C;
      goto lab37;

      <<lab38>>
      Z.C := Z.L - v_13;
      Z.C := Z.L - v_12;
      goto lab36;

      <<lab37>>
      Z.C := Z.L - v_11;
      --  literal, line 353
      C := Eq_S_Backward (Z, "ாள்");
      if C = 0 then
         goto lab39;
      end if;
      Z.C := Z.C - C;
      goto lab36;

      <<lab39>>
      Z.C := Z.L - v_11;
      --  literal, line 354
      C := Eq_S_Backward (Z, "ார்");
      if C = 0 then
         goto lab40;
      end if;
      Z.C := Z.C - C;
      goto lab36;

      <<lab40>>
      Z.C := Z.L - v_11;
      --  literal, line 355
      C := Eq_S_Backward (Z, "ேன்");
      if C = 0 then
         goto lab41;
      end if;
      Z.C := Z.C - C;
      goto lab36;

      <<lab41>>
      Z.C := Z.L - v_11;
      --  literal, line 356
      C := Eq_S_Backward (Z, "ா");
      if C = 0 then
         goto lab42;
      end if;
      Z.C := Z.C - C;
      goto lab36;

      <<lab42>>
      Z.C := Z.L - v_11;
      --  literal, line 357
      C := Eq_S_Backward (Z, "ாம்");
      if C = 0 then
         goto lab43;
      end if;
      Z.C := Z.C - C;
      goto lab36;

      <<lab43>>
      Z.C := Z.L - v_11;
      --  literal, line 358
      C := Eq_S_Backward (Z, "ெம்");
      if C = 0 then
         goto lab44;
      end if;
      Z.C := Z.C - C;
      goto lab36;

      <<lab44>>
      Z.C := Z.L - v_11;
      --  literal, line 359
      C := Eq_S_Backward (Z, "ேம்");
      if C = 0 then
         goto lab45;
      end if;
      Z.C := Z.C - C;
      goto lab36;

      <<lab45>>
      Z.C := Z.L - v_11;
      --  literal, line 360
      C := Eq_S_Backward (Z, "ோம்");
      if C = 0 then
         goto lab46;
      end if;
      Z.C := Z.C - C;
      goto lab36;

      <<lab46>>
      Z.C := Z.L - v_11;
      --  literal, line 361
      C := Eq_S_Backward (Z, "கும்");
      if C = 0 then
         goto lab47;
      end if;
      Z.C := Z.C - C;
      goto lab36;

      <<lab47>>
      Z.C := Z.L - v_11;
      --  literal, line 362
      C := Eq_S_Backward (Z, "தும்");
      if C = 0 then
         goto lab48;
      end if;
      Z.C := Z.C - C;
      goto lab36;

      <<lab48>>
      Z.C := Z.L - v_11;
      --  literal, line 363
      C := Eq_S_Backward (Z, "டும்");
      if C = 0 then
         goto lab49;
      end if;
      Z.C := Z.C - C;
      goto lab36;

      <<lab49>>
      Z.C := Z.L - v_11;
      --  literal, line 364
      C := Eq_S_Backward (Z, "றும்");
      if C = 0 then
         goto lab50;
      end if;
      Z.C := Z.C - C;
      goto lab36;

      <<lab50>>
      Z.C := Z.L - v_11;
      --  literal, line 365
      C := Eq_S_Backward (Z, "ாய்");
      if C = 0 then
         goto lab51;
      end if;
      Z.C := Z.C - C;
      goto lab36;

      <<lab51>>
      Z.C := Z.L - v_11;
      --  literal, line 366
      C := Eq_S_Backward (Z, "னென்");
      if C = 0 then
         goto lab52;
      end if;
      Z.C := Z.C - C;
      goto lab36;

      <<lab52>>
      Z.C := Z.L - v_11;
      --  literal, line 367
      C := Eq_S_Backward (Z, "னிர்");
      if C = 0 then
         goto lab53;
      end if;
      Z.C := Z.C - C;
      goto lab36;

      <<lab53>>
      Z.C := Z.L - v_11;
      --  literal, line 368
      C := Eq_S_Backward (Z, "ீர்");
      if C = 0 then
         goto lab54;
      end if;
      Z.C := Z.C - C;
      goto lab36;

      <<lab54>>
      Z.C := Z.L - v_11;
      --  literal, line 369
      C := Eq_S_Backward (Z, "ீயர்");
      if C = 0 then
         goto lab35;
      end if;
      Z.C := Z.C - C;

      <<lab36>>
      Z.Bra := Z.C;      --  ], line 370

      --  <-, line 370
      Slice_From (Z, "்");
      --  (, line 371
      --  set found_a_match, line 371
      Z.B_Found_a_match := True;
      Z.C := Z.L - v_10;
      goto lab1;

      <<lab35>>
      Z.C := Z.L - v_2;
      --  test, line 374
      v_14 := Z.L - Z.C;
      --  (, line 374
      --  (, line 374
      Z.Ket := Z.C;      --  [, line 374

      --  or, line 374
      v_15 := Z.L - Z.C;
      --  literal, line 374
      C := Eq_S_Backward (Z, "கு");
      if C = 0 then
         goto lab56;
      end if;
      Z.C := Z.C - C;
      goto lab55;

      <<lab56>>
      Z.C := Z.L - v_15;
      --  literal, line 374
      C := Eq_S_Backward (Z, "து");
      if C = 0 then
         goto lab0;
      end if;
      Z.C := Z.C - C;

      <<lab55>>
      --  (, line 374
      --  test, line 374
      v_16 := Z.L - Z.C;
      --  literal, line 374
      C := Eq_S_Backward (Z, "்");
      if C = 0 then
         goto lab0;
      end if;
      Z.C := Z.C - C;
      Z.C := Z.L - v_16;
      Z.Bra := Z.C;      --  ], line 374

      --  delete, line 374
      Slice_Del (Z);
      --  (, line 375
      --  set found_a_match, line 375
      Z.B_Found_a_match := True;
      Z.C := Z.L - v_14;

      <<lab1>>

      <<lab0>>
      Z.C := Z.L - v_1;
      --  do, line 378
      v_17 := Z.L - Z.C;
      --  (, line 378
      Z.Ket := Z.C;      --  [, line 378

      --  among, line 378
      if Z.C - 8 <= Z.Lb or else (Character'Pos (Z.P (Z.C)) /= 141 and then Character'Pos (Z.P (Z.C)) /= 177) then
         goto lab57;
         --  among, line 378
      end if;
      Find_Among_Backward (Z, A_25, Among_String, null, A);
      if A = 0 then
         goto lab57;
      end if;
      Z.Bra := Z.C;      --  ], line 385

      --  delete, line 385
      Slice_Del (Z);
      --  (, line 386
      --  set found_a_match, line 386
      Z.B_Found_a_match := True;

      <<lab57>>
      Z.C := Z.L - v_17;
      Z.C := Z.Lb;
      --  do, line 389
      --  call fix_endings, line 389
      R_Fix_endings (Z, Result);

      Result := True;
   end R_Remove_tense_suffix;

   procedure Stem (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_1 : Integer;
      v_2 : Integer;
      v_3 : Integer;
      v_4 : Integer;
      v_5 : Integer;
      v_6 : Integer;
      v_7 : Integer;
      v_8 : Integer;
      v_9 : Integer;
      v_10 : Integer;
   begin
      --  (, line 392
      --  unset found_vetrumai_urupu, line 393
      Z.B_Found_vetrumai_urupu := False;
      --  do, line 394
      v_1 := Z.C;
      --  call fix_ending, line 394
      R_Fix_ending (Z, Result);
      Z.C := v_1;
      --  call has_min_length, line 395
      R_Has_min_length (Z, Result);
      if not Result then
         Result := False;
         return;
      end if;
      --  do, line 396
      v_2 := Z.C;
      --  call remove_question_prefixes, line 396
      R_Remove_question_prefixes (Z, Result);
      Z.C := v_2;
      --  do, line 397
      v_3 := Z.C;
      --  call remove_pronoun_prefixes, line 397
      R_Remove_pronoun_prefixes (Z, Result);
      Z.C := v_3;
      --  do, line 398
      v_4 := Z.C;
      --  call remove_question_suffixes, line 398
      R_Remove_question_suffixes (Z, Result);
      Z.C := v_4;
      --  do, line 399
      v_5 := Z.C;
      --  call remove_um, line 399
      R_Remove_um (Z, Result);
      Z.C := v_5;
      --  do, line 400
      v_6 := Z.C;
      --  call remove_common_word_endings, line 400
      R_Remove_common_word_endings (Z, Result);
      Z.C := v_6;
      --  do, line 401
      v_7 := Z.C;
      --  call remove_vetrumai_urupukal, line 401
      R_Remove_vetrumai_urupukal (Z, Result);
      Z.C := v_7;
      --  do, line 402
      v_8 := Z.C;
      --  call remove_plural_suffix, line 402
      R_Remove_plural_suffix (Z, Result);
      Z.C := v_8;
      --  do, line 403
      v_9 := Z.C;
      --  call remove_command_suffixes, line 403
      R_Remove_command_suffixes (Z, Result);
      Z.C := v_9;
      --  do, line 404
      v_10 := Z.C;
      --  call remove_tense_suffixes, line 404
      R_Remove_tense_suffixes (Z, Result);
      Z.C := v_10;

      Result := True;
   end Stem;
end Stemmer.Tamil;

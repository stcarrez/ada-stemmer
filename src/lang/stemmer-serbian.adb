--  Generated by Snowball 2.0.0 - https://snowballstem.org/

package body Stemmer.Serbian is
   procedure R_Step_3 (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step_2 (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step_1 (Z : in out Context_Type; Result : out Boolean);
   procedure R_R1 (Z : in out Context_Type; Result : out Boolean);
   procedure R_Mark_regions (Z : in out Context_Type; Result : out Boolean);
   procedure R_Prelude (Z : in out Context_Type; Result : out Boolean);
   procedure R_Cyr_to_lat (Z : in out Context_Type; Result : out Boolean);

   G_V : constant Grouping_Array (0 .. 23) := (
      True, False, False, False, True, False, False, False,
      True, False, False, False, False, False, True, False,
      False, False, False, False, True, False, False, False
   );

   G_Sa : constant Grouping_Array (0 .. 119) := (
      True, False, False, False, False, False, True, False,
      False, False, True, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, True, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, True
   );

   G_Ca : constant Grouping_Array (0 .. 287) := (
      True, True, True, False, True, True, True, False,
      True, True, True, True, True, False, True, False,
      True, True, True, False, True, False, False, False,
      True, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, True, False, False,
      False, False, False, True, False, False, False, True,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, True,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, True, False, False, False
   );

   G_Rg : constant Grouping_Array (0 .. 7) := (
      True, False, False, False, False, False, False, False
   );
   Among_String : constant String := "а" & "б" & "в" & "г" & "д" & "е"
      & "ж" & "з" & "и" & "к" & "л" & "м" & "н" & "о" & "п" & "р" & "с"
      & "т" & "у" & "ф" & "х" & "ц" & "ч" & "ш" & "ђ" & "ј" & "љ" & "њ"
      & "ћ" & "џ" & "daba" & "ajaca" & "ejaca" & "ljaca" & "njaca" & "ojaca"
      & "alaca" & "elaca" & "olaca" & "maca" & "naca" & "raca" & "saca" & "vaca"
      & "šaca" & "aoca" & "acaka" & "ajaka" & "ojaka" & "anaka" & "ataka" & "etaka"
      & "itaka" & "otaka" & "utaka" & "ačaka" & "esama" & "izama" & "jacima"
      & "nicima" & "ticima" & "teticima" & "zicima" & "atcima" & "utcima" & "čcima"
      & "pesima" & "inzima" & "lozima" & "metara" & "centara" & "istara" & "ekata"
      & "anata" & "nstava" & "kustava" & "ajac" & "ejac" & "ljac" & "njac" & "anjac"
      & "ojac" & "alac" & "elac" & "olac" & "mac" & "nac" & "rac" & "sac" & "vac"
      & "šac" & "jebe" & "olce" & "kuse" & "rave" & "save" & "šave" & "baci" & "jaci"
      & "tvenici" & "snici" & "tetici" & "bojci" & "vojci" & "ojsci" & "atci" & "itci"
      & "utci" & "čci" & "pesi" & "inzi" & "lozi" & "acak" & "usak" & "atak" & "etak"
      & "itak" & "otak" & "utak" & "ačak" & "ušak" & "izam" & "tican" & "cajan"
      & "čajan" & "voljan" & "eskan" & "alan" & "bilan" & "gilan" & "nilan" & "rilan"
      & "silan" & "tilan" & "avilan" & "laran" & "eran" & "asan" & "esan" & "dusan"
      & "kusan" & "atan" & "pletan" & "tetan" & "antan" & "pravan" & "stavan" & "sivan"
      & "tivan" & "ozan" & "tičan" & "ašan" & "dušan" & "metar" & "centar" & "istar"
      & "ekat" & "enat" & "oscu" & "ošću" & "aca" & "eca" & "uca" & "ga" & "acega"
      & "ecega" & "ucega" & "anjijega" & "enjijega" & "snjijega" & "šnjijega"
      & "kijega" & "skijega" & "škijega" & "elijega" & "nijega" & "osijega"
      & "atijega" & "evitijega" & "ovitijega" & "astijega" & "avijega" & "evijega"
      & "ivijega" & "ovijega" & "ošijega" & "anjega" & "enjega" & "snjega" & "šnjega"
      & "kega" & "skega" & "škega" & "elega" & "nega" & "anega" & "enega" & "snega"
      & "šnega" & "osega" & "atega" & "evitega" & "ovitega" & "astega" & "avega"
      & "evega" & "ivega" & "ovega" & "aćega" & "ećega" & "ućega" & "ošega"
      & "acoga" & "ecoga" & "ucoga" & "anjoga" & "enjoga" & "snjoga" & "šnjoga"
      & "koga" & "skoga" & "škoga" & "loga" & "eloga" & "noga" & "cinoga" & "činoga"
      & "osoga" & "atoga" & "evitoga" & "ovitoga" & "astoga" & "avoga" & "evoga"
      & "ivoga" & "ovoga" & "aćoga" & "ećoga" & "ućoga" & "ošoga" & "uga" & "aja"
      & "caja" & "laja" & "raja" & "ćaja" & "čaja" & "đaja" & "bija" & "cija"
      & "dija" & "fija" & "gija" & "anjija" & "enjija" & "snjija" & "šnjija" & "kija"
      & "skija" & "škija" & "lija" & "elija" & "mija" & "nija" & "ganija" & "manija"
      & "panija" & "ranija" & "tanija" & "pija" & "rija" & "rarija" & "sija" & "osija"
      & "tija" & "atija" & "evitija" & "ovitija" & "otija" & "astija" & "avija"
      & "evija" & "ivija" & "ovija" & "zija" & "ošija" & "žija" & "anja" & "enja"
      & "snja" & "šnja" & "ka" & "ska" & "ška" & "ala" & "acala" & "astajala"
      & "istajala" & "ostajala" & "ijala" & "injala" & "nala" & "irala" & "urala"
      & "tala" & "astala" & "istala" & "ostala" & "avala" & "evala" & "ivala" & "ovala"
      & "uvala" & "ačala" & "ela" & "ila" & "acila" & "lucila" & "nila" & "astanila"
      & "istanila" & "ostanila" & "rosila" & "jetila" & "ozila" & "ačila" & "lučila"
      & "rošila" & "ola" & "asla" & "nula" & "gama" & "logama" & "ugama" & "ajama"
      & "cajama" & "lajama" & "rajama" & "ćajama" & "čajama" & "đajama" & "bijama"
      & "cijama" & "dijama" & "fijama" & "gijama" & "lijama" & "mijama" & "nijama"
      & "ganijama" & "manijama" & "panijama" & "ranijama" & "tanijama" & "pijama"
      & "rijama" & "sijama" & "tijama" & "zijama" & "žijama" & "alama" & "ijalama"
      & "nalama" & "elama" & "ilama" & "ramama" & "lemama" & "inama" & "cinama"
      & "činama" & "rama" & "arama" & "drama" & "erama" & "orama" & "basama"
      & "gasama" & "jasama" & "kasama" & "nasama" & "tasama" & "vasama" & "esama"
      & "isama" & "etama" & "estama" & "istama" & "kstama" & "ostama" & "avama"
      & "evama" & "ivama" & "bašama" & "gašama" & "jašama" & "kašama" & "našama"
      & "tašama" & "vašama" & "ešama" & "išama" & "lema" & "acima" & "ecima"
      & "ucima" & "ajima" & "cajima" & "lajima" & "rajima" & "ćajima" & "čajima"
      & "đajima" & "bijima" & "cijima" & "dijima" & "fijima" & "gijima" & "anjijima"
      & "enjijima" & "snjijima" & "šnjijima" & "kijima" & "skijima" & "škijima"
      & "lijima" & "elijima" & "mijima" & "nijima" & "ganijima" & "manijima"
      & "panijima" & "ranijima" & "tanijima" & "pijima" & "rijima" & "sijima"
      & "osijima" & "tijima" & "atijima" & "evitijima" & "ovitijima" & "astijima"
      & "avijima" & "evijima" & "ivijima" & "ovijima" & "zijima" & "ošijima"
      & "žijima" & "anjima" & "enjima" & "snjima" & "šnjima" & "kima" & "skima"
      & "škima" & "alima" & "ijalima" & "nalima" & "elima" & "ilima" & "ozilima"
      & "olima" & "lemima" & "nima" & "anima" & "inima" & "cinima" & "činima"
      & "onima" & "arima" & "drima" & "erima" & "orima" & "basima" & "gasima"
      & "jasima" & "kasima" & "nasima" & "tasima" & "vasima" & "esima" & "isima"
      & "osima" & "atima" & "ikatima" & "latima" & "etima" & "evitima" & "ovitima"
      & "astima" & "estima" & "istima" & "kstima" & "ostima" & "ištima" & "avima"
      & "evima" & "ajevima" & "cajevima" & "lajevima" & "rajevima" & "ćajevima"
      & "čajevima" & "đajevima" & "ivima" & "ovima" & "govima" & "ugovima" & "lovima"
      & "olovima" & "movima" & "onovima" & "stvima" & "štvima" & "aćima" & "ećima"
      & "ućima" & "bašima" & "gašima" & "jašima" & "kašima" & "našima"
      & "tašima" & "vašima" & "ešima" & "išima" & "ošima" & "na" & "ana" & "acana"
      & "urana" & "tana" & "avana" & "evana" & "ivana" & "uvana" & "ačana" & "acena"
      & "lucena" & "ačena" & "lučena" & "ina" & "cina" & "anina" & "čina" & "ona"
      & "ara" & "dra" & "era" & "ora" & "basa" & "gasa" & "jasa" & "kasa" & "nasa"
      & "tasa" & "vasa" & "esa" & "isa" & "osa" & "ata" & "ikata" & "lata" & "eta"
      & "evita" & "ovita" & "asta" & "esta" & "ista" & "ksta" & "osta" & "nuta"
      & "išta" & "ava" & "eva" & "ajeva" & "cajeva" & "lajeva" & "rajeva" & "ćajeva"
      & "čajeva" & "đajeva" & "iva" & "ova" & "gova" & "ugova" & "lova" & "olova"
      & "mova" & "onova" & "stva" & "štva" & "aća" & "eća" & "uća" & "baša"
      & "gaša" & "jaša" & "kaša" & "naša" & "taša" & "vaša" & "eša" & "iša"
      & "oša" & "ace" & "ece" & "uce" & "luce" & "astade" & "istade" & "ostade" & "ge"
      & "loge" & "uge" & "aje" & "caje" & "laje" & "raje" & "astaje" & "istaje"
      & "ostaje" & "ćaje" & "čaje" & "đaje" & "ije" & "bije" & "cije" & "dije"
      & "fije" & "gije" & "anjije" & "enjije" & "snjije" & "šnjije" & "kije" & "skije"
      & "škije" & "lije" & "elije" & "mije" & "nije" & "ganije" & "manije" & "panije"
      & "ranije" & "tanije" & "pije" & "rije" & "sije" & "osije" & "tije" & "atije"
      & "evitije" & "ovitije" & "astije" & "avije" & "evije" & "ivije" & "ovije"
      & "zije" & "ošije" & "žije" & "anje" & "enje" & "snje" & "šnje" & "uje"
      & "lucuje" & "iruje" & "lučuje" & "ke" & "ske" & "ške" & "ale" & "acale"
      & "astajale" & "istajale" & "ostajale" & "ijale" & "injale" & "nale" & "irale"
      & "urale" & "tale" & "astale" & "istale" & "ostale" & "avale" & "evale" & "ivale"
      & "ovale" & "uvale" & "ačale" & "ele" & "ile" & "acile" & "lucile" & "nile"
      & "rosile" & "jetile" & "ozile" & "ačile" & "lučile" & "rošile" & "ole"
      & "asle" & "nule" & "rame" & "leme" & "acome" & "ecome" & "ucome" & "anjome"
      & "enjome" & "snjome" & "šnjome" & "kome" & "skome" & "škome" & "elome"
      & "nome" & "cinome" & "činome" & "osome" & "atome" & "evitome" & "ovitome"
      & "astome" & "avome" & "evome" & "ivome" & "ovome" & "aćome" & "ećome"
      & "ućome" & "ošome" & "ne" & "ane" & "acane" & "urane" & "tane" & "astane"
      & "istane" & "ostane" & "avane" & "evane" & "ivane" & "uvane" & "ačane"
      & "acene" & "lucene" & "ačene" & "lučene" & "ine" & "cine" & "anine" & "čine"
      & "one" & "are" & "dre" & "ere" & "ore" & "ase" & "base" & "acase" & "gase"
      & "jase" & "astajase" & "istajase" & "ostajase" & "injase" & "kase" & "nase"
      & "irase" & "urase" & "tase" & "vase" & "avase" & "evase" & "ivase" & "ovase"
      & "uvase" & "ese" & "ise" & "acise" & "lucise" & "rosise" & "jetise" & "ose"
      & "astadose" & "istadose" & "ostadose" & "ate" & "acate" & "ikate" & "late"
      & "irate" & "urate" & "tate" & "avate" & "evate" & "ivate" & "uvate" & "ačate"
      & "ete" & "astadete" & "istadete" & "ostadete" & "astajete" & "istajete"
      & "ostajete" & "ijete" & "injete" & "ujete" & "lucujete" & "irujete"
      & "lučujete" & "nete" & "astanete" & "istanete" & "ostanete" & "astete" & "ite"
      & "acite" & "lucite" & "nite" & "astanite" & "istanite" & "ostanite" & "rosite"
      & "jetite" & "astite" & "evite" & "ovite" & "ačite" & "lučite" & "rošite"
      & "ajte" & "urajte" & "tajte" & "astajte" & "istajte" & "ostajte" & "avajte"
      & "evajte" & "ivajte" & "uvajte" & "ijte" & "lucujte" & "irujte" & "lučujte"
      & "aste" & "acaste" & "astajaste" & "istajaste" & "ostajaste" & "injaste"
      & "iraste" & "uraste" & "taste" & "avaste" & "evaste" & "ivaste" & "ovaste"
      & "uvaste" & "ačaste" & "este" & "iste" & "aciste" & "luciste" & "niste"
      & "rosiste" & "jetiste" & "ačiste" & "lučiste" & "rošiste" & "kste" & "oste"
      & "astadoste" & "istadoste" & "ostadoste" & "nuste" & "ište" & "ave" & "eve"
      & "ajeve" & "cajeve" & "lajeve" & "rajeve" & "ćajeve" & "čajeve" & "đajeve"
      & "ive" & "ove" & "gove" & "ugove" & "love" & "olove" & "move" & "onove" & "aće"
      & "eće" & "uće" & "ače" & "luče" & "aše" & "baše" & "gaše" & "jaše"
      & "astajaše" & "istajaše" & "ostajaše" & "injaše" & "kaše" & "naše"
      & "iraše" & "uraše" & "taše" & "vaše" & "avaše" & "evaše" & "ivaše"
      & "ovaše" & "uvaše" & "ačaše" & "eše" & "iše" & "jetiše" & "ačiše"
      & "lučiše" & "rošiše" & "oše" & "astadoše" & "istadoše" & "ostadoše"
      & "aceg" & "eceg" & "uceg" & "anjijeg" & "enjijeg" & "snjijeg" & "šnjijeg"
      & "kijeg" & "skijeg" & "škijeg" & "elijeg" & "nijeg" & "osijeg" & "atijeg"
      & "evitijeg" & "ovitijeg" & "astijeg" & "avijeg" & "evijeg" & "ivijeg" & "ovijeg"
      & "ošijeg" & "anjeg" & "enjeg" & "snjeg" & "šnjeg" & "keg" & "eleg" & "neg"
      & "aneg" & "eneg" & "sneg" & "šneg" & "oseg" & "ateg" & "aveg" & "eveg" & "iveg"
      & "oveg" & "aćeg" & "ećeg" & "ućeg" & "ošeg" & "acog" & "ecog" & "ucog"
      & "anjog" & "enjog" & "snjog" & "šnjog" & "kog" & "skog" & "škog" & "elog"
      & "nog" & "cinog" & "činog" & "osog" & "atog" & "evitog" & "ovitog" & "astog"
      & "avog" & "evog" & "ivog" & "ovog" & "aćog" & "ećog" & "ućog" & "ošog"
      & "ah" & "acah" & "astajah" & "istajah" & "ostajah" & "injah" & "irah" & "urah"
      & "tah" & "avah" & "evah" & "ivah" & "ovah" & "uvah" & "ačah" & "ih" & "acih"
      & "ecih" & "ucih" & "lucih" & "anjijih" & "enjijih" & "snjijih" & "šnjijih"
      & "kijih" & "skijih" & "škijih" & "elijih" & "nijih" & "osijih" & "atijih"
      & "evitijih" & "ovitijih" & "astijih" & "avijih" & "evijih" & "ivijih" & "ovijih"
      & "ošijih" & "anjih" & "enjih" & "snjih" & "šnjih" & "kih" & "skih" & "ških"
      & "elih" & "nih" & "cinih" & "činih" & "osih" & "rosih" & "atih" & "jetih"
      & "evitih" & "ovitih" & "astih" & "avih" & "evih" & "ivih" & "ovih" & "aćih"
      & "ećih" & "ućih" & "ačih" & "lučih" & "oših" & "roših" & "astadoh"
      & "istadoh" & "ostadoh" & "acuh" & "ecuh" & "ucuh" & "aćuh" & "ećuh" & "ućuh"
      & "aci" & "aceci" & "ieci" & "ajuci" & "irajuci" & "urajuci" & "astajuci"
      & "istajuci" & "ostajuci" & "avajuci" & "evajuci" & "ivajuci" & "uvajuci"
      & "ujuci" & "lucujuci" & "irujuci" & "luci" & "nuci" & "etuci" & "astuci" & "gi"
      & "ugi" & "aji" & "caji" & "laji" & "raji" & "ćaji" & "čaji" & "đaji" & "biji"
      & "ciji" & "diji" & "fiji" & "giji" & "anjiji" & "enjiji" & "snjiji" & "šnjiji"
      & "kiji" & "skiji" & "škiji" & "liji" & "eliji" & "miji" & "niji" & "ganiji"
      & "maniji" & "paniji" & "raniji" & "taniji" & "piji" & "riji" & "siji" & "osiji"
      & "tiji" & "atiji" & "evitiji" & "ovitiji" & "astiji" & "aviji" & "eviji"
      & "iviji" & "oviji" & "ziji" & "ošiji" & "žiji" & "anji" & "enji" & "snji"
      & "šnji" & "ki" & "ski" & "ški" & "ali" & "acali" & "astajali" & "istajali"
      & "ostajali" & "ijali" & "injali" & "nali" & "irali" & "urali" & "tali"
      & "astali" & "istali" & "ostali" & "avali" & "evali" & "ivali" & "ovali"
      & "uvali" & "ačali" & "eli" & "ili" & "acili" & "lucili" & "nili" & "rosili"
      & "jetili" & "ozili" & "ačili" & "lučili" & "rošili" & "oli" & "asli" & "nuli"
      & "rami" & "lemi" & "ni" & "ani" & "acani" & "urani" & "tani" & "avani" & "evani"
      & "ivani" & "uvani" & "ačani" & "aceni" & "luceni" & "ačeni" & "lučeni"
      & "ini" & "cini" & "čini" & "oni" & "ari" & "dri" & "eri" & "ori" & "basi"
      & "gasi" & "jasi" & "kasi" & "nasi" & "tasi" & "vasi" & "esi" & "isi" & "osi"
      & "avsi" & "acavsi" & "iravsi" & "tavsi" & "etavsi" & "astavsi" & "istavsi"
      & "ostavsi" & "ivsi" & "nivsi" & "rosivsi" & "nuvsi" & "ati" & "acati"
      & "astajati" & "istajati" & "ostajati" & "injati" & "ikati" & "lati" & "irati"
      & "urati" & "tati" & "astati" & "istati" & "ostati" & "avati" & "evati" & "ivati"
      & "ovati" & "uvati" & "ačati" & "eti" & "iti" & "aciti" & "luciti" & "niti"
      & "rositi" & "jetiti" & "eviti" & "oviti" & "ačiti" & "lučiti" & "rošiti"
      & "asti" & "esti" & "isti" & "ksti" & "osti" & "nuti" & "avi" & "evi" & "ajevi"
      & "cajevi" & "lajevi" & "rajevi" & "ćajevi" & "čajevi" & "đajevi" & "ivi"
      & "ovi" & "govi" & "ugovi" & "lovi" & "olovi" & "movi" & "onovi" & "ieći"
      & "ačeći" & "ajući" & "irajući" & "urajući" & "astajući" & "istajući"
      & "ostajući" & "avajući" & "evajući" & "ivajući" & "uvajući" & "ujući"
      & "irujući" & "lučujući" & "nući" & "etući" & "astući" & "ači" & "luči"
      & "baši" & "gaši" & "jaši" & "kaši" & "naši" & "taši" & "vaši" & "eši"
      & "iši" & "oši" & "avši" & "iravši" & "tavši" & "etavši" & "astavši"
      & "istavši" & "ostavši" & "ačavši" & "ivši" & "nivši" & "rošivši"
      & "nuvši" & "aj" & "uraj" & "taj" & "avaj" & "evaj" & "ivaj" & "uvaj" & "ij"
      & "acoj" & "ecoj" & "ucoj" & "anjijoj" & "enjijoj" & "snjijoj" & "šnjijoj"
      & "kijoj" & "skijoj" & "škijoj" & "elijoj" & "nijoj" & "osijoj" & "evitijoj"
      & "ovitijoj" & "astijoj" & "avijoj" & "evijoj" & "ivijoj" & "ovijoj" & "ošijoj"
      & "anjoj" & "enjoj" & "snjoj" & "šnjoj" & "koj" & "skoj" & "škoj" & "aloj"
      & "eloj" & "noj" & "cinoj" & "činoj" & "osoj" & "atoj" & "evitoj" & "ovitoj"
      & "astoj" & "avoj" & "evoj" & "ivoj" & "ovoj" & "aćoj" & "ećoj" & "ućoj"
      & "ošoj" & "lucuj" & "iruj" & "lučuj" & "al" & "iral" & "ural" & "el" & "il"
      & "am" & "acam" & "iram" & "uram" & "tam" & "avam" & "evam" & "ivam" & "uvam"
      & "ačam" & "em" & "acem" & "ecem" & "ucem" & "astadem" & "istadem" & "ostadem"
      & "ajem" & "cajem" & "lajem" & "rajem" & "astajem" & "istajem" & "ostajem"
      & "ćajem" & "čajem" & "đajem" & "ijem" & "anjijem" & "enjijem" & "snjijem"
      & "šnjijem" & "kijem" & "skijem" & "škijem" & "lijem" & "elijem" & "nijem"
      & "rarijem" & "sijem" & "osijem" & "atijem" & "evitijem" & "ovitijem" & "otijem"
      & "astijem" & "avijem" & "evijem" & "ivijem" & "ovijem" & "ošijem" & "anjem"
      & "enjem" & "injem" & "snjem" & "šnjem" & "ujem" & "lucujem" & "irujem"
      & "lučujem" & "kem" & "skem" & "škem" & "elem" & "nem" & "anem" & "astanem"
      & "istanem" & "ostanem" & "enem" & "snem" & "šnem" & "basem" & "gasem" & "jasem"
      & "kasem" & "nasem" & "tasem" & "vasem" & "esem" & "isem" & "osem" & "atem"
      & "etem" & "evitem" & "ovitem" & "astem" & "istem" & "ištem" & "avem" & "evem"
      & "ivem" & "aćem" & "ećem" & "ućem" & "bašem" & "gašem" & "jašem"
      & "kašem" & "našem" & "tašem" & "vašem" & "ešem" & "išem" & "ošem" & "im"
      & "acim" & "ecim" & "ucim" & "lucim" & "anjijim" & "enjijim" & "snjijim"
      & "šnjijim" & "kijim" & "skijim" & "škijim" & "elijim" & "nijim" & "osijim"
      & "atijim" & "evitijim" & "ovitijim" & "astijim" & "avijim" & "evijim" & "ivijim"
      & "ovijim" & "ošijim" & "anjim" & "enjim" & "snjim" & "šnjim" & "kim" & "skim"
      & "škim" & "elim" & "nim" & "cinim" & "činim" & "osim" & "rosim" & "atim"
      & "jetim" & "evitim" & "ovitim" & "astim" & "avim" & "evim" & "ivim" & "ovim"
      & "aćim" & "ećim" & "ućim" & "ačim" & "lučim" & "ošim" & "rošim" & "acom"
      & "ecom" & "ucom" & "gom" & "logom" & "ugom" & "bijom" & "cijom" & "dijom"
      & "fijom" & "gijom" & "lijom" & "mijom" & "nijom" & "ganijom" & "manijom"
      & "panijom" & "ranijom" & "tanijom" & "pijom" & "rijom" & "sijom" & "tijom"
      & "zijom" & "žijom" & "anjom" & "enjom" & "snjom" & "šnjom" & "kom" & "skom"
      & "škom" & "alom" & "ijalom" & "nalom" & "elom" & "ilom" & "ozilom" & "olom"
      & "ramom" & "lemom" & "nom" & "anom" & "inom" & "cinom" & "aninom" & "činom"
      & "onom" & "arom" & "drom" & "erom" & "orom" & "basom" & "gasom" & "jasom"
      & "kasom" & "nasom" & "tasom" & "vasom" & "esom" & "isom" & "osom" & "atom"
      & "ikatom" & "latom" & "etom" & "evitom" & "ovitom" & "astom" & "estom" & "istom"
      & "kstom" & "ostom" & "avom" & "evom" & "ivom" & "ovom" & "lovom" & "movom"
      & "stvom" & "štvom" & "aćom" & "ećom" & "ućom" & "bašom" & "gašom"
      & "jašom" & "kašom" & "našom" & "tašom" & "vašom" & "ešom" & "išom"
      & "ošom" & "an" & "acan" & "iran" & "uran" & "tan" & "avan" & "evan" & "ivan"
      & "uvan" & "ačan" & "acen" & "lucen" & "ačen" & "lučen" & "anin" & "ao"
      & "acao" & "astajao" & "istajao" & "ostajao" & "injao" & "irao" & "urao" & "tao"
      & "astao" & "istao" & "ostao" & "avao" & "evao" & "ivao" & "ovao" & "uvao"
      & "ačao" & "go" & "ugo" & "io" & "acio" & "lucio" & "lio" & "nio" & "rario"
      & "sio" & "rosio" & "jetio" & "otio" & "ačio" & "lučio" & "rošio" & "bijo"
      & "cijo" & "dijo" & "fijo" & "gijo" & "lijo" & "mijo" & "nijo" & "pijo" & "rijo"
      & "sijo" & "tijo" & "zijo" & "žijo" & "anjo" & "enjo" & "snjo" & "šnjo" & "ko"
      & "sko" & "ško" & "alo" & "acalo" & "astajalo" & "istajalo" & "ostajalo"
      & "ijalo" & "injalo" & "nalo" & "iralo" & "uralo" & "talo" & "astalo" & "istalo"
      & "ostalo" & "avalo" & "evalo" & "ivalo" & "ovalo" & "uvalo" & "ačalo" & "elo"
      & "ilo" & "acilo" & "lucilo" & "nilo" & "rosilo" & "jetilo" & "ačilo"
      & "lučilo" & "rošilo" & "aslo" & "nulo" & "amo" & "acamo" & "ramo" & "iramo"
      & "uramo" & "tamo" & "avamo" & "evamo" & "ivamo" & "uvamo" & "ačamo" & "emo"
      & "astademo" & "istademo" & "ostademo" & "astajemo" & "istajemo" & "ostajemo"
      & "ijemo" & "injemo" & "ujemo" & "lucujemo" & "irujemo" & "lučujemo" & "lemo"
      & "nemo" & "astanemo" & "istanemo" & "ostanemo" & "etemo" & "astemo" & "imo"
      & "acimo" & "lucimo" & "nimo" & "astanimo" & "istanimo" & "ostanimo" & "rosimo"
      & "etimo" & "jetimo" & "astimo" & "ačimo" & "lučimo" & "rošimo" & "ajmo"
      & "urajmo" & "tajmo" & "astajmo" & "istajmo" & "ostajmo" & "avajmo" & "evajmo"
      & "ivajmo" & "uvajmo" & "ijmo" & "ujmo" & "lucujmo" & "irujmo" & "lučujmo"
      & "asmo" & "acasmo" & "astajasmo" & "istajasmo" & "ostajasmo" & "injasmo"
      & "irasmo" & "urasmo" & "tasmo" & "avasmo" & "evasmo" & "ivasmo" & "ovasmo"
      & "uvasmo" & "ačasmo" & "ismo" & "acismo" & "lucismo" & "nismo" & "rosismo"
      & "jetismo" & "ačismo" & "lučismo" & "rošismo" & "astadosmo" & "istadosmo"
      & "ostadosmo" & "nusmo" & "no" & "ano" & "acano" & "urano" & "tano" & "avano"
      & "evano" & "ivano" & "uvano" & "ačano" & "aceno" & "luceno" & "ačeno"
      & "lučeno" & "ino" & "cino" & "čino" & "ato" & "ikato" & "lato" & "eto"
      & "evito" & "ovito" & "asto" & "esto" & "isto" & "ksto" & "osto" & "nuto" & "nuo"
      & "avo" & "evo" & "ivo" & "ovo" & "stvo" & "štvo" & "as" & "acas" & "iras"
      & "uras" & "tas" & "avas" & "evas" & "ivas" & "uvas" & "es" & "astades"
      & "istades" & "ostades" & "astajes" & "istajes" & "ostajes" & "ijes" & "injes"
      & "ujes" & "lucujes" & "irujes" & "nes" & "astanes" & "istanes" & "ostanes"
      & "etes" & "astes" & "is" & "acis" & "lucis" & "nis" & "rosis" & "jetis" & "at"
      & "acat" & "astajat" & "istajat" & "ostajat" & "injat" & "irat" & "urat" & "tat"
      & "astat" & "istat" & "ostat" & "avat" & "evat" & "ivat" & "irivat" & "ovat"
      & "uvat" & "ačat" & "it" & "acit" & "lucit" & "rosit" & "jetit" & "ačit"
      & "lučit" & "rošit" & "nut" & "astadu" & "istadu" & "ostadu" & "gu" & "logu"
      & "ugu" & "ahu" & "acahu" & "astajahu" & "istajahu" & "ostajahu" & "injahu"
      & "irahu" & "urahu" & "avahu" & "evahu" & "ivahu" & "ovahu" & "uvahu" & "ačahu"
      & "aju" & "caju" & "acaju" & "laju" & "raju" & "iraju" & "uraju" & "taju"
      & "astaju" & "istaju" & "ostaju" & "avaju" & "evaju" & "ivaju" & "uvaju"
      & "ćaju" & "čaju" & "ačaju" & "đaju" & "iju" & "biju" & "ciju" & "diju"
      & "fiju" & "giju" & "anjiju" & "enjiju" & "snjiju" & "šnjiju" & "kiju" & "liju"
      & "eliju" & "miju" & "niju" & "ganiju" & "maniju" & "paniju" & "raniju"
      & "taniju" & "piju" & "riju" & "rariju" & "siju" & "osiju" & "tiju" & "atiju"
      & "otiju" & "aviju" & "eviju" & "iviju" & "oviju" & "ziju" & "ošiju" & "žiju"
      & "anju" & "enju" & "snju" & "šnju" & "uju" & "lucuju" & "iruju" & "lučuju"
      & "ku" & "sku" & "šku" & "alu" & "ijalu" & "nalu" & "elu" & "ilu" & "ozilu"
      & "olu" & "ramu" & "acemu" & "ecemu" & "ucemu" & "anjijemu" & "enjijemu"
      & "snjijemu" & "šnjijemu" & "kijemu" & "skijemu" & "škijemu" & "elijemu"
      & "nijemu" & "osijemu" & "atijemu" & "evitijemu" & "ovitijemu" & "astijemu"
      & "avijemu" & "evijemu" & "ivijemu" & "ovijemu" & "ošijemu" & "anjemu"
      & "enjemu" & "snjemu" & "šnjemu" & "kemu" & "skemu" & "škemu" & "lemu"
      & "elemu" & "nemu" & "anemu" & "enemu" & "snemu" & "šnemu" & "osemu" & "atemu"
      & "evitemu" & "ovitemu" & "astemu" & "avemu" & "evemu" & "ivemu" & "ovemu"
      & "aćemu" & "ećemu" & "ućemu" & "ošemu" & "acomu" & "ecomu" & "ucomu"
      & "anjomu" & "enjomu" & "snjomu" & "šnjomu" & "komu" & "skomu" & "škomu"
      & "elomu" & "nomu" & "cinomu" & "činomu" & "osomu" & "atomu" & "evitomu"
      & "ovitomu" & "astomu" & "avomu" & "evomu" & "ivomu" & "ovomu" & "aćomu"
      & "ećomu" & "ućomu" & "ošomu" & "nu" & "anu" & "astanu" & "istanu" & "ostanu"
      & "inu" & "cinu" & "aninu" & "činu" & "onu" & "aru" & "dru" & "eru" & "oru"
      & "basu" & "gasu" & "jasu" & "kasu" & "nasu" & "tasu" & "vasu" & "esu" & "isu"
      & "osu" & "atu" & "ikatu" & "latu" & "etu" & "evitu" & "ovitu" & "astu" & "estu"
      & "istu" & "kstu" & "ostu" & "ištu" & "avu" & "evu" & "ivu" & "ovu" & "lovu"
      & "movu" & "stvu" & "štvu" & "bašu" & "gašu" & "jašu" & "kašu" & "našu"
      & "tašu" & "vašu" & "ešu" & "išu" & "ošu" & "avav" & "evav" & "ivav"
      & "uvav" & "kov" & "aš" & "iraš" & "uraš" & "taš" & "avaš" & "evaš"
      & "ivaš" & "uvaš" & "ačaš" & "eš" & "astadeš" & "istadeš" & "ostadeš"
      & "astaješ" & "istaješ" & "ostaješ" & "iješ" & "inješ" & "uješ" & "iruješ"
      & "lučuješ" & "neš" & "astaneš" & "istaneš" & "ostaneš" & "eteš"
      & "asteš" & "iš" & "niš" & "jetiš" & "ačiš" & "lučiš" & "rošiš" & "a"
      & "oga" & "ama" & "ima" & "ena" & "e" & "og" & "anog" & "enog" & "anih" & "enih"
      & "i" & "ani" & "eni" & "anoj" & "enoj" & "anim" & "enim" & "om" & "enom" & "o"
      & "ano" & "eno" & "ost" & "u" & "enu";

   A_0 : constant Among_Array_Type (0 .. 29) := (
      (1, 2, -1, 1),
      (3, 4, -1, 2),
      (5, 6, -1, 3),
      (7, 8, -1, 4),
      (9, 10, -1, 5),
      (11, 12, -1, 7),
      (13, 14, -1, 8),
      (15, 16, -1, 9),
      (17, 18, -1, 10),
      (19, 20, -1, 12),
      (21, 22, -1, 13),
      (23, 24, -1, 15),
      (25, 26, -1, 16),
      (27, 28, -1, 18),
      (29, 30, -1, 19),
      (31, 32, -1, 20),
      (33, 34, -1, 21),
      (35, 36, -1, 22),
      (37, 38, -1, 24),
      (39, 40, -1, 25),
      (41, 42, -1, 26),
      (43, 44, -1, 27),
      (45, 46, -1, 28),
      (47, 48, -1, 30),
      (49, 50, -1, 6),
      (51, 52, -1, 11),
      (53, 54, -1, 14),
      (55, 56, -1, 17),
      (57, 58, -1, 23),
      (59, 60, -1, 29));

   A_1 : constant Among_Array_Type (0 .. 129) := (
      (61, 64, -1, 73),
      (65, 69, -1, 12),
      (70, 74, -1, 14),
      (75, 79, -1, 13),
      (80, 84, -1, 85),
      (85, 89, -1, 15),
      (90, 94, -1, 82),
      (95, 99, -1, 83),
      (100, 104, -1, 84),
      (105, 108, -1, 75),
      (109, 112, -1, 76),
      (113, 116, -1, 81),
      (117, 120, -1, 80),
      (121, 124, -1, 79),
      (125, 129, -1, 18),
      (130, 133, -1, 82),
      (134, 138, -1, 55),
      (139, 143, -1, 16),
      (144, 148, -1, 17),
      (149, 153, -1, 78),
      (154, 158, -1, 58),
      (159, 163, -1, 59),
      (164, 168, -1, 60),
      (169, 173, -1, 61),
      (174, 178, -1, 62),
      (179, 184, -1, 54),
      (185, 189, -1, 67),
      (190, 194, -1, 87),
      (195, 200, -1, 5),
      (201, 206, -1, 23),
      (207, 212, -1, 24),
      (213, 220, 30, 21),
      (221, 226, -1, 25),
      (227, 232, -1, 58),
      (233, 238, -1, 62),
      (239, 244, -1, 74),
      (245, 250, -1, 2),
      (251, 256, -1, 19),
      (257, 262, -1, 1),
      (263, 268, -1, 68),
      (269, 275, -1, 69),
      (276, 281, -1, 70),
      (282, 286, -1, 86),
      (287, 291, -1, 53),
      (292, 297, -1, 22),
      (298, 304, -1, 29),
      (305, 308, -1, 12),
      (309, 312, -1, 14),
      (313, 316, -1, 13),
      (317, 320, -1, 85),
      (321, 325, 49, 11),
      (326, 329, -1, 15),
      (330, 333, -1, 82),
      (334, 337, -1, 83),
      (338, 341, -1, 84),
      (342, 344, -1, 75),
      (345, 347, -1, 76),
      (348, 350, -1, 81),
      (351, 353, -1, 80),
      (354, 356, -1, 79),
      (357, 360, -1, 18),
      (361, 364, -1, 88),
      (365, 368, -1, 84),
      (369, 372, -1, 27),
      (373, 376, -1, 42),
      (377, 380, -1, 52),
      (381, 385, -1, 51),
      (386, 389, -1, 89),
      (390, 393, -1, 5),
      (394, 400, -1, 20),
      (401, 405, -1, 26),
      (406, 411, -1, 21),
      (412, 416, -1, 4),
      (417, 421, -1, 3),
      (422, 426, -1, 66),
      (427, 430, -1, 58),
      (431, 434, -1, 60),
      (435, 438, -1, 62),
      (439, 442, -1, 74),
      (443, 446, -1, 2),
      (447, 450, -1, 19),
      (451, 454, -1, 1),
      (455, 458, -1, 55),
      (459, 462, -1, 57),
      (463, 466, -1, 58),
      (467, 470, -1, 59),
      (471, 474, -1, 60),
      (475, 478, -1, 61),
      (479, 482, -1, 62),
      (483, 487, -1, 54),
      (488, 492, -1, 56),
      (493, 496, -1, 87),
      (497, 501, -1, 65),
      (502, 506, -1, 7),
      (507, 512, -1, 6),
      (513, 518, -1, 77),
      (519, 523, -1, 63),
      (524, 527, -1, 40),
      (528, 532, -1, 33),
      (533, 537, -1, 37),
      (538, 542, -1, 39),
      (543, 547, -1, 38),
      (548, 552, -1, 36),
      (553, 557, -1, 34),
      (558, 563, -1, 35),
      (564, 568, -1, 9),
      (569, 572, -1, 8),
      (573, 576, -1, 91),
      (577, 580, -1, 10),
      (581, 585, -1, 31),
      (586, 590, -1, 28),
      (591, 594, -1, 47),
      (595, 600, -1, 50),
      (601, 605, -1, 49),
      (606, 610, -1, 32),
      (611, 616, -1, 44),
      (617, 622, -1, 43),
      (623, 627, -1, 46),
      (628, 632, -1, 45),
      (633, 636, -1, 41),
      (637, 642, -1, 64),
      (643, 647, -1, 90),
      (648, 653, -1, 30),
      (654, 658, -1, 68),
      (659, 664, -1, 69),
      (665, 669, -1, 70),
      (670, 673, -1, 86),
      (674, 677, -1, 48),
      (678, 681, -1, 72),
      (682, 687, -1, 71));

   A_2 : constant Among_Array_Type (0 .. 2034) := (
      (688, 690, -1, 124),
      (691, 693, -1, 125),
      (694, 696, -1, 126),
      (697, 698, -1, 20),
      (699, 703, 3, 124),
      (704, 708, 3, 125),
      (709, 713, 3, 126),
      (714, 721, 3, 84),
      (722, 729, 3, 85),
      (730, 737, 3, 122),
      (738, 746, 3, 86),
      (747, 752, 3, 95),
      (753, 759, 11, 1),
      (760, 767, 11, 2),
      (768, 774, 3, 83),
      (775, 780, 3, 13),
      (781, 787, 3, 123),
      (788, 794, 3, 120),
      (795, 803, 3, 92),
      (804, 812, 3, 93),
      (813, 820, 3, 94),
      (821, 827, 3, 77),
      (828, 834, 3, 78),
      (835, 841, 3, 79),
      (842, 848, 3, 80),
      (849, 856, 3, 91),
      (857, 862, 3, 84),
      (863, 868, 3, 85),
      (869, 874, 3, 122),
      (875, 881, 3, 86),
      (882, 885, 3, 95),
      (886, 890, 30, 1),
      (891, 896, 30, 2),
      (897, 901, 3, 83),
      (902, 905, 3, 13),
      (906, 910, 34, 10),
      (911, 915, 34, 87),
      (916, 920, 34, 159),
      (921, 926, 34, 88),
      (927, 931, 3, 123),
      (932, 936, 3, 120),
      (937, 943, 3, 92),
      (944, 950, 3, 93),
      (951, 956, 3, 94),
      (957, 961, 3, 77),
      (962, 966, 3, 78),
      (967, 971, 3, 79),
      (972, 976, 3, 80),
      (977, 982, 3, 14),
      (983, 988, 3, 15),
      (989, 994, 3, 16),
      (995, 1000, 3, 91),
      (1001, 1005, 3, 124),
      (1006, 1010, 3, 125),
      (1011, 1015, 3, 126),
      (1016, 1021, 3, 84),
      (1022, 1027, 3, 85),
      (1028, 1033, 3, 122),
      (1034, 1040, 3, 86),
      (1041, 1044, 3, 95),
      (1045, 1049, 59, 1),
      (1050, 1055, 59, 2),
      (1056, 1059, 3, 19),
      (1060, 1064, 62, 83),
      (1065, 1068, 3, 13),
      (1069, 1074, 64, 137),
      (1075, 1081, 64, 89),
      (1082, 1086, 3, 123),
      (1087, 1091, 3, 120),
      (1092, 1098, 3, 92),
      (1099, 1105, 3, 93),
      (1106, 1111, 3, 94),
      (1112, 1116, 3, 77),
      (1117, 1121, 3, 78),
      (1122, 1126, 3, 79),
      (1127, 1131, 3, 80),
      (1132, 1137, 3, 14),
      (1138, 1143, 3, 15),
      (1144, 1149, 3, 16),
      (1150, 1155, 3, 91),
      (1156, 1158, 3, 18),
      (1159, 1161, -1, 109),
      (1162, 1165, 81, 26),
      (1166, 1169, 81, 30),
      (1170, 1173, 81, 31),
      (1174, 1178, 81, 28),
      (1179, 1183, 81, 27),
      (1184, 1188, 81, 29),
      (1189, 1192, -1, 32),
      (1193, 1196, -1, 33),
      (1197, 1200, -1, 34),
      (1201, 1204, -1, 40),
      (1205, 1208, -1, 39),
      (1209, 1214, -1, 84),
      (1215, 1220, -1, 85),
      (1221, 1226, -1, 122),
      (1227, 1233, -1, 86),
      (1234, 1237, -1, 95),
      (1238, 1242, 97, 1),
      (1243, 1248, 97, 2),
      (1249, 1252, -1, 24),
      (1253, 1257, 100, 83),
      (1258, 1261, -1, 37),
      (1262, 1265, -1, 13),
      (1266, 1271, 103, 9),
      (1272, 1277, 103, 6),
      (1278, 1283, 103, 7),
      (1284, 1289, 103, 8),
      (1290, 1295, 103, 5),
      (1296, 1299, -1, 41),
      (1300, 1303, -1, 42),
      (1304, 1309, 110, 21),
      (1310, 1313, -1, 23),
      (1314, 1318, 112, 123),
      (1319, 1322, -1, 44),
      (1323, 1327, 114, 120),
      (1328, 1334, 114, 92),
      (1335, 1341, 114, 93),
      (1342, 1346, 114, 22),
      (1347, 1352, 114, 94),
      (1353, 1357, -1, 77),
      (1358, 1362, -1, 78),
      (1363, 1367, -1, 79),
      (1368, 1372, -1, 80),
      (1373, 1376, -1, 45),
      (1377, 1382, -1, 91),
      (1383, 1387, -1, 38),
      (1388, 1391, -1, 84),
      (1392, 1395, -1, 85),
      (1396, 1399, -1, 122),
      (1400, 1404, -1, 86),
      (1405, 1406, -1, 95),
      (1407, 1409, 131, 1),
      (1410, 1413, 131, 2),
      (1414, 1416, -1, 104),
      (1417, 1421, 134, 128),
      (1422, 1429, 134, 106),
      (1430, 1437, 134, 107),
      (1438, 1445, 134, 108),
      (1446, 1450, 134, 47),
      (1451, 1456, 134, 114),
      (1457, 1460, 134, 46),
      (1461, 1465, 134, 100),
      (1466, 1470, 134, 105),
      (1471, 1474, 134, 113),
      (1475, 1480, 144, 110),
      (1481, 1486, 144, 111),
      (1487, 1492, 144, 112),
      (1493, 1497, 134, 97),
      (1498, 1502, 134, 96),
      (1503, 1507, 134, 98),
      (1508, 1512, 134, 76),
      (1513, 1517, 134, 99),
      (1518, 1523, 134, 102),
      (1524, 1526, -1, 83),
      (1527, 1529, -1, 116),
      (1530, 1534, 155, 124),
      (1535, 1540, 155, 121),
      (1541, 1544, 155, 103),
      (1545, 1552, 158, 110),
      (1553, 1560, 158, 111),
      (1561, 1568, 158, 112),
      (1569, 1574, 155, 127),
      (1575, 1580, 155, 118),
      (1581, 1585, 155, 48),
      (1586, 1591, 155, 101),
      (1592, 1598, 155, 117),
      (1599, 1605, 155, 90),
      (1606, 1608, -1, 50),
      (1609, 1612, -1, 115),
      (1613, 1616, -1, 13),
      (1617, 1620, -1, 20),
      (1621, 1626, 171, 19),
      (1627, 1631, 171, 18),
      (1632, 1636, -1, 109),
      (1637, 1642, 174, 26),
      (1643, 1648, 174, 30),
      (1649, 1654, 174, 31),
      (1655, 1661, 174, 28),
      (1662, 1668, 174, 27),
      (1669, 1675, 174, 29),
      (1676, 1681, -1, 32),
      (1682, 1687, -1, 33),
      (1688, 1693, -1, 34),
      (1694, 1699, -1, 40),
      (1700, 1705, -1, 39),
      (1706, 1711, -1, 35),
      (1712, 1717, -1, 37),
      (1718, 1723, -1, 36),
      (1724, 1731, 188, 9),
      (1732, 1739, 188, 6),
      (1740, 1747, 188, 7),
      (1748, 1755, 188, 8),
      (1756, 1763, 188, 5),
      (1764, 1769, -1, 41),
      (1770, 1775, -1, 42),
      (1776, 1781, -1, 43),
      (1782, 1787, -1, 44),
      (1788, 1793, -1, 45),
      (1794, 1800, -1, 38),
      (1801, 1805, -1, 104),
      (1806, 1812, 200, 47),
      (1813, 1818, 200, 46),
      (1819, 1823, -1, 119),
      (1824, 1828, -1, 116),
      (1829, 1834, -1, 52),
      (1835, 1840, -1, 51),
      (1841, 1845, -1, 11),
      (1846, 1851, 207, 137),
      (1852, 1858, 207, 89),
      (1859, 1862, -1, 52),
      (1863, 1867, 210, 53),
      (1868, 1872, 210, 54),
      (1873, 1877, 210, 55),
      (1878, 1882, 210, 56),
      (1883, 1888, -1, 135),
      (1889, 1894, -1, 131),
      (1895, 1900, -1, 129),
      (1901, 1906, -1, 133),
      (1907, 1912, -1, 132),
      (1913, 1918, -1, 130),
      (1919, 1924, -1, 134),
      (1925, 1929, -1, 152),
      (1930, 1934, -1, 154),
      (1935, 1939, -1, 70),
      (1940, 1945, -1, 71),
      (1946, 1951, -1, 72),
      (1952, 1957, -1, 73),
      (1958, 1963, -1, 74),
      (1964, 1968, -1, 77),
      (1969, 1973, -1, 78),
      (1974, 1978, -1, 79),
      (1979, 1985, -1, 63),
      (1986, 1992, -1, 64),
      (1993, 1999, -1, 61),
      (2000, 2006, -1, 62),
      (2007, 2013, -1, 60),
      (2014, 2020, -1, 59),
      (2021, 2027, -1, 65),
      (2028, 2033, -1, 66),
      (2034, 2039, -1, 67),
      (2040, 2043, -1, 51),
      (2044, 2048, -1, 124),
      (2049, 2053, -1, 125),
      (2054, 2058, -1, 126),
      (2059, 2063, -1, 109),
      (2064, 2069, 245, 26),
      (2070, 2075, 245, 30),
      (2076, 2081, 245, 31),
      (2082, 2088, 245, 28),
      (2089, 2095, 245, 27),
      (2096, 2102, 245, 29),
      (2103, 2108, -1, 32),
      (2109, 2114, -1, 33),
      (2115, 2120, -1, 34),
      (2121, 2126, -1, 40),
      (2127, 2132, -1, 39),
      (2133, 2140, -1, 84),
      (2141, 2148, -1, 85),
      (2149, 2156, -1, 122),
      (2157, 2165, -1, 86),
      (2166, 2171, -1, 95),
      (2172, 2178, 261, 1),
      (2179, 2186, 261, 2),
      (2187, 2192, -1, 35),
      (2193, 2199, 264, 83),
      (2200, 2205, -1, 37),
      (2206, 2211, -1, 13),
      (2212, 2219, 267, 9),
      (2220, 2227, 267, 6),
      (2228, 2235, 267, 7),
      (2236, 2243, 267, 8),
      (2244, 2251, 267, 5),
      (2252, 2257, -1, 41),
      (2258, 2263, -1, 42),
      (2264, 2269, -1, 43),
      (2270, 2276, 275, 123),
      (2277, 2282, -1, 44),
      (2283, 2289, 277, 120),
      (2290, 2298, 277, 92),
      (2299, 2307, 277, 93),
      (2308, 2315, 277, 94),
      (2316, 2322, -1, 77),
      (2323, 2329, -1, 78),
      (2330, 2336, -1, 79),
      (2337, 2343, -1, 80),
      (2344, 2349, -1, 45),
      (2350, 2357, -1, 91),
      (2358, 2364, -1, 38),
      (2365, 2370, -1, 84),
      (2371, 2376, -1, 85),
      (2377, 2382, -1, 122),
      (2383, 2389, -1, 86),
      (2390, 2393, -1, 95),
      (2394, 2398, 293, 1),
      (2399, 2404, 293, 2),
      (2405, 2409, -1, 104),
      (2410, 2416, 296, 47),
      (2417, 2422, 296, 46),
      (2423, 2427, -1, 83),
      (2428, 2432, -1, 116),
      (2433, 2439, 300, 48),
      (2440, 2444, -1, 50),
      (2445, 2450, -1, 51),
      (2451, 2454, -1, 13),
      (2455, 2459, 304, 10),
      (2460, 2464, 304, 11),
      (2465, 2470, 306, 137),
      (2471, 2477, 306, 89),
      (2478, 2482, 304, 12),
      (2483, 2487, -1, 53),
      (2488, 2492, -1, 54),
      (2493, 2497, -1, 55),
      (2498, 2502, -1, 56),
      (2503, 2508, -1, 135),
      (2509, 2514, -1, 131),
      (2515, 2520, -1, 129),
      (2521, 2526, -1, 133),
      (2527, 2532, -1, 132),
      (2533, 2538, -1, 130),
      (2539, 2544, -1, 134),
      (2545, 2549, -1, 57),
      (2550, 2554, -1, 58),
      (2555, 2559, -1, 123),
      (2560, 2564, -1, 120),
      (2565, 2571, 324, 68),
      (2572, 2577, 324, 69),
      (2578, 2582, -1, 70),
      (2583, 2589, -1, 92),
      (2590, 2596, -1, 93),
      (2597, 2602, -1, 94),
      (2603, 2608, -1, 71),
      (2609, 2614, -1, 72),
      (2615, 2620, -1, 73),
      (2621, 2626, -1, 74),
      (2627, 2633, -1, 75),
      (2634, 2638, -1, 77),
      (2639, 2643, -1, 78),
      (2644, 2650, 337, 109),
      (2651, 2658, 338, 26),
      (2659, 2666, 338, 30),
      (2667, 2674, 338, 31),
      (2675, 2683, 338, 28),
      (2684, 2692, 338, 27),
      (2693, 2701, 338, 29),
      (2702, 2706, -1, 79),
      (2707, 2711, -1, 80),
      (2712, 2717, 346, 20),
      (2718, 2724, 347, 17),
      (2725, 2730, 346, 82),
      (2731, 2737, 349, 49),
      (2738, 2743, 346, 81),
      (2744, 2750, 346, 12),
      (2751, 2756, -1, 3),
      (2757, 2763, -1, 4),
      (2764, 2769, -1, 14),
      (2770, 2775, -1, 15),
      (2776, 2781, -1, 16),
      (2782, 2788, -1, 63),
      (2789, 2795, -1, 64),
      (2796, 2802, -1, 61),
      (2803, 2809, -1, 62),
      (2810, 2816, -1, 60),
      (2817, 2823, -1, 59),
      (2824, 2830, -1, 65),
      (2831, 2836, -1, 66),
      (2837, 2842, -1, 67),
      (2843, 2848, -1, 91),
      (2849, 2850, -1, 13),
      (2851, 2853, 368, 10),
      (2854, 2858, 369, 128),
      (2859, 2863, 369, 105),
      (2864, 2867, 369, 113),
      (2868, 2872, 369, 97),
      (2873, 2877, 369, 96),
      (2878, 2882, 369, 98),
      (2883, 2887, 369, 99),
      (2888, 2893, 369, 102),
      (2894, 2898, 368, 124),
      (2899, 2904, 368, 121),
      (2905, 2910, 368, 101),
      (2911, 2917, 368, 117),
      (2918, 2920, 368, 11),
      (2921, 2924, 382, 137),
      (2925, 2929, 382, 10),
      (2930, 2934, 382, 89),
      (2935, 2937, 368, 12),
      (2938, 2940, -1, 53),
      (2941, 2943, -1, 54),
      (2944, 2946, -1, 55),
      (2947, 2949, -1, 56),
      (2950, 2953, -1, 135),
      (2954, 2957, -1, 131),
      (2958, 2961, -1, 129),
      (2962, 2965, -1, 133),
      (2966, 2969, -1, 132),
      (2970, 2973, -1, 130),
      (2974, 2977, -1, 134),
      (2978, 2980, -1, 57),
      (2981, 2983, -1, 58),
      (2984, 2986, -1, 123),
      (2987, 2989, -1, 120),
      (2990, 2994, 401, 68),
      (2995, 2998, 401, 69),
      (2999, 3001, -1, 70),
      (3002, 3006, -1, 92),
      (3007, 3011, -1, 93),
      (3012, 3015, -1, 94),
      (3016, 3019, -1, 71),
      (3020, 3023, -1, 72),
      (3024, 3027, -1, 73),
      (3028, 3031, -1, 74),
      (3032, 3035, -1, 13),
      (3036, 3040, -1, 75),
      (3041, 3043, -1, 77),
      (3044, 3046, -1, 78),
      (3047, 3051, 415, 109),
      (3052, 3057, 416, 26),
      (3058, 3063, 416, 30),
      (3064, 3069, 416, 31),
      (3070, 3076, 416, 28),
      (3077, 3083, 416, 27),
      (3084, 3090, 416, 29),
      (3091, 3093, -1, 79),
      (3094, 3096, -1, 80),
      (3097, 3100, 424, 20),
      (3101, 3105, 425, 17),
      (3106, 3109, 424, 82),
      (3110, 3114, 427, 49),
      (3115, 3118, 424, 81),
      (3119, 3123, 424, 12),
      (3124, 3127, -1, 3),
      (3128, 3132, -1, 4),
      (3133, 3136, -1, 14),
      (3137, 3140, -1, 15),
      (3141, 3144, -1, 16),
      (3145, 3149, -1, 63),
      (3150, 3154, -1, 64),
      (3155, 3159, -1, 61),
      (3160, 3164, -1, 62),
      (3165, 3169, -1, 60),
      (3170, 3174, -1, 59),
      (3175, 3179, -1, 65),
      (3180, 3183, -1, 66),
      (3184, 3187, -1, 67),
      (3188, 3191, -1, 91),
      (3192, 3194, -1, 124),
      (3195, 3197, -1, 125),
      (3198, 3200, -1, 126),
      (3201, 3204, 448, 121),
      (3205, 3210, -1, 110),
      (3211, 3216, -1, 111),
      (3217, 3222, -1, 112),
      (3223, 3224, -1, 20),
      (3225, 3228, 453, 19),
      (3229, 3231, 453, 18),
      (3232, 3234, -1, 104),
      (3235, 3238, 456, 26),
      (3239, 3242, 456, 30),
      (3243, 3246, 456, 31),
      (3247, 3252, 456, 106),
      (3253, 3258, 456, 107),
      (3259, 3264, 456, 108),
      (3265, 3269, 456, 28),
      (3270, 3274, 456, 27),
      (3275, 3279, 456, 29),
      (3280, 3282, -1, 116),
      (3283, 3286, 466, 32),
      (3287, 3290, 466, 33),
      (3291, 3294, 466, 34),
      (3295, 3298, 466, 40),
      (3299, 3302, 466, 39),
      (3303, 3308, 466, 84),
      (3309, 3314, 466, 85),
      (3315, 3320, 466, 122),
      (3321, 3327, 466, 86),
      (3328, 3331, 466, 95),
      (3332, 3336, 476, 1),
      (3337, 3342, 476, 2),
      (3343, 3346, 466, 35),
      (3347, 3351, 479, 83),
      (3352, 3355, 466, 37),
      (3356, 3359, 466, 13),
      (3360, 3365, 482, 9),
      (3366, 3371, 482, 6),
      (3372, 3377, 482, 7),
      (3378, 3383, 482, 8),
      (3384, 3389, 482, 5),
      (3390, 3393, 466, 41),
      (3394, 3397, 466, 42),
      (3398, 3401, 466, 43),
      (3402, 3406, 490, 123),
      (3407, 3410, 466, 44),
      (3411, 3415, 492, 120),
      (3416, 3422, 492, 92),
      (3423, 3429, 492, 93),
      (3430, 3435, 492, 94),
      (3436, 3440, 466, 77),
      (3441, 3445, 466, 78),
      (3446, 3450, 466, 79),
      (3451, 3455, 466, 80),
      (3456, 3459, 466, 45),
      (3460, 3465, 466, 91),
      (3466, 3470, 466, 38),
      (3471, 3474, -1, 84),
      (3475, 3478, -1, 85),
      (3479, 3482, -1, 122),
      (3483, 3487, -1, 86),
      (3488, 3490, -1, 25),
      (3491, 3496, 508, 121),
      (3497, 3501, 508, 100),
      (3502, 3508, 508, 117),
      (3509, 3510, -1, 95),
      (3511, 3513, 512, 1),
      (3514, 3517, 512, 2),
      (3518, 3520, -1, 104),
      (3521, 3525, 515, 128),
      (3526, 3533, 515, 106),
      (3534, 3541, 515, 107),
      (3542, 3549, 515, 108),
      (3550, 3554, 515, 47),
      (3555, 3560, 515, 114),
      (3561, 3564, 515, 46),
      (3565, 3569, 515, 100),
      (3570, 3574, 515, 105),
      (3575, 3578, 515, 113),
      (3579, 3584, 525, 110),
      (3585, 3590, 525, 111),
      (3591, 3596, 525, 112),
      (3597, 3601, 515, 97),
      (3602, 3606, 515, 96),
      (3607, 3611, 515, 98),
      (3612, 3616, 515, 76),
      (3617, 3621, 515, 99),
      (3622, 3627, 515, 102),
      (3628, 3630, -1, 83),
      (3631, 3633, -1, 116),
      (3634, 3638, 536, 124),
      (3639, 3644, 536, 121),
      (3645, 3648, 536, 103),
      (3649, 3654, 536, 127),
      (3655, 3660, 536, 118),
      (3661, 3665, 536, 48),
      (3666, 3671, 536, 101),
      (3672, 3678, 536, 117),
      (3679, 3685, 536, 90),
      (3686, 3688, -1, 50),
      (3689, 3692, -1, 115),
      (3693, 3696, -1, 13),
      (3697, 3700, -1, 52),
      (3701, 3704, -1, 51),
      (3705, 3709, -1, 124),
      (3710, 3714, -1, 125),
      (3715, 3719, -1, 126),
      (3720, 3725, -1, 84),
      (3726, 3731, -1, 85),
      (3732, 3737, -1, 122),
      (3738, 3744, -1, 86),
      (3745, 3748, -1, 95),
      (3749, 3753, 558, 1),
      (3754, 3759, 558, 2),
      (3760, 3764, -1, 83),
      (3765, 3768, -1, 13),
      (3769, 3774, 562, 137),
      (3775, 3781, 562, 89),
      (3782, 3786, -1, 123),
      (3787, 3791, -1, 120),
      (3792, 3798, -1, 92),
      (3799, 3805, -1, 93),
      (3806, 3811, -1, 94),
      (3812, 3816, -1, 77),
      (3817, 3821, -1, 78),
      (3822, 3826, -1, 79),
      (3827, 3831, -1, 80),
      (3832, 3837, -1, 14),
      (3838, 3843, -1, 15),
      (3844, 3849, -1, 16),
      (3850, 3855, -1, 91),
      (3856, 3857, -1, 13),
      (3858, 3860, 578, 10),
      (3861, 3865, 579, 128),
      (3866, 3870, 579, 105),
      (3871, 3874, 579, 113),
      (3875, 3880, 582, 110),
      (3881, 3886, 582, 111),
      (3887, 3892, 582, 112),
      (3893, 3897, 579, 97),
      (3898, 3902, 579, 96),
      (3903, 3907, 579, 98),
      (3908, 3912, 579, 99),
      (3913, 3918, 579, 102),
      (3919, 3923, 578, 124),
      (3924, 3929, 578, 121),
      (3930, 3935, 578, 101),
      (3936, 3942, 578, 117),
      (3943, 3945, 578, 11),
      (3946, 3949, 595, 137),
      (3950, 3954, 595, 10),
      (3955, 3959, 595, 89),
      (3960, 3962, 578, 12),
      (3963, 3965, -1, 53),
      (3966, 3968, -1, 54),
      (3969, 3971, -1, 55),
      (3972, 3974, -1, 56),
      (3975, 3977, -1, 161),
      (3978, 3981, 604, 135),
      (3982, 3986, 604, 128),
      (3987, 3990, 604, 131),
      (3991, 3994, 604, 129),
      (3995, 4002, 608, 138),
      (4003, 4010, 608, 139),
      (4011, 4018, 608, 140),
      (4019, 4024, 608, 150),
      (4025, 4028, 604, 133),
      (4029, 4032, 604, 132),
      (4033, 4037, 604, 155),
      (4038, 4042, 604, 156),
      (4043, 4046, 604, 130),
      (4047, 4050, 604, 134),
      (4051, 4055, 618, 144),
      (4056, 4060, 618, 145),
      (4061, 4065, 618, 146),
      (4066, 4070, 618, 148),
      (4071, 4075, 618, 147),
      (4076, 4078, -1, 57),
      (4079, 4081, -1, 58),
      (4082, 4086, 625, 124),
      (4087, 4092, 625, 121),
      (4093, 4098, 625, 127),
      (4099, 4104, 625, 149),
      (4105, 4107, -1, 123),
      (4108, 4115, 630, 141),
      (4116, 4123, 630, 142),
      (4124, 4131, 630, 143),
      (4132, 4134, -1, 104),
      (4135, 4139, 634, 128),
      (4140, 4144, 634, 68),
      (4145, 4148, 634, 69),
      (4149, 4153, 634, 100),
      (4154, 4158, 634, 105),
      (4159, 4162, 634, 113),
      (4163, 4167, 634, 97),
      (4168, 4172, 634, 96),
      (4173, 4177, 634, 98),
      (4178, 4182, 634, 99),
      (4183, 4188, 634, 102),
      (4189, 4191, -1, 70),
      (4192, 4199, 646, 110),
      (4200, 4207, 646, 111),
      (4208, 4215, 646, 112),
      (4216, 4223, 646, 106),
      (4224, 4231, 646, 107),
      (4232, 4239, 646, 108),
      (4240, 4244, 646, 116),
      (4245, 4250, 646, 114),
      (4251, 4255, 646, 25),
      (4256, 4263, 655, 121),
      (4264, 4270, 655, 100),
      (4271, 4279, 655, 117),
      (4280, 4283, 646, 13),
      (4284, 4291, 659, 110),
      (4292, 4299, 659, 111),
      (4300, 4307, 659, 112),
      (4308, 4313, 646, 115),
      (4314, 4316, -1, 116),
      (4317, 4321, 664, 124),
      (4322, 4327, 664, 121),
      (4328, 4331, 664, 13),
      (4332, 4339, 667, 110),
      (4340, 4347, 667, 111),
      (4348, 4355, 667, 112),
      (4356, 4361, 664, 127),
      (4362, 4367, 664, 118),
      (4368, 4373, 664, 115),
      (4374, 4378, 664, 92),
      (4379, 4383, 664, 93),
      (4384, 4389, 664, 101),
      (4390, 4396, 664, 117),
      (4397, 4403, 664, 90),
      (4404, 4407, -1, 104),
      (4408, 4413, 679, 105),
      (4414, 4418, 679, 113),
      (4419, 4425, 681, 106),
      (4426, 4432, 681, 107),
      (4433, 4439, 681, 108),
      (4440, 4445, 679, 97),
      (4446, 4451, 679, 96),
      (4452, 4457, 679, 98),
      (4458, 4463, 679, 99),
      (4464, 4467, -1, 116),
      (4468, 4474, -1, 121),
      (4475, 4480, -1, 100),
      (4481, 4488, -1, 117),
      (4489, 4492, -1, 94),
      (4493, 4498, 693, 128),
      (4499, 4507, 693, 106),
      (4508, 4516, 693, 107),
      (4517, 4525, 693, 108),
      (4526, 4532, 693, 114),
      (4533, 4538, 693, 100),
      (4539, 4544, 693, 105),
      (4545, 4549, 693, 113),
      (4550, 4555, 693, 97),
      (4556, 4561, 693, 96),
      (4562, 4567, 693, 98),
      (4568, 4573, 693, 76),
      (4574, 4579, 693, 99),
      (4580, 4586, 693, 102),
      (4587, 4590, -1, 71),
      (4591, 4594, -1, 72),
      (4595, 4600, 709, 124),
      (4601, 4607, 709, 121),
      (4608, 4612, 709, 103),
      (4613, 4619, 709, 127),
      (4620, 4626, 709, 118),
      (4627, 4633, 709, 101),
      (4634, 4641, 709, 117),
      (4642, 4649, 709, 90),
      (4650, 4653, -1, 73),
      (4654, 4657, -1, 74),
      (4658, 4666, 719, 110),
      (4667, 4675, 719, 111),
      (4676, 4684, 719, 112),
      (4685, 4689, -1, 13),
      (4690, 4694, -1, 75),
      (4695, 4697, -1, 77),
      (4698, 4700, -1, 78),
      (4701, 4705, 726, 109),
      (4706, 4711, 727, 26),
      (4712, 4717, 727, 30),
      (4718, 4723, 727, 31),
      (4724, 4730, 727, 28),
      (4731, 4737, 727, 27),
      (4738, 4744, 727, 29),
      (4745, 4747, -1, 79),
      (4748, 4750, -1, 80),
      (4751, 4754, 735, 20),
      (4755, 4759, 736, 17),
      (4760, 4763, 735, 82),
      (4764, 4768, 738, 49),
      (4769, 4772, 735, 81),
      (4773, 4777, 735, 12),
      (4778, 4781, -1, 14),
      (4782, 4785, -1, 15),
      (4786, 4789, -1, 16),
      (4790, 4793, -1, 101),
      (4794, 4798, -1, 117),
      (4799, 4802, -1, 104),
      (4803, 4807, 747, 63),
      (4808, 4812, 747, 64),
      (4813, 4817, 747, 61),
      (4818, 4826, 750, 106),
      (4827, 4835, 750, 107),
      (4836, 4844, 750, 108),
      (4845, 4851, 750, 114),
      (4852, 4856, 747, 62),
      (4857, 4861, 747, 60),
      (4862, 4867, 747, 100),
      (4868, 4873, 747, 105),
      (4874, 4878, 747, 59),
      (4879, 4883, 747, 65),
      (4884, 4889, 760, 97),
      (4890, 4895, 760, 96),
      (4896, 4901, 760, 98),
      (4902, 4907, 760, 76),
      (4908, 4913, 760, 99),
      (4914, 4920, 747, 102),
      (4921, 4924, -1, 66),
      (4925, 4928, -1, 67),
      (4929, 4935, 768, 118),
      (4936, 4942, 768, 101),
      (4943, 4950, 768, 117),
      (4951, 4958, 768, 90),
      (4959, 4962, -1, 91),
      (4963, 4971, 773, 110),
      (4972, 4980, 773, 111),
      (4981, 4989, 773, 112),
      (4990, 4993, -1, 124),
      (4994, 4997, -1, 125),
      (4998, 5001, -1, 126),
      (5002, 5008, -1, 84),
      (5009, 5015, -1, 85),
      (5016, 5022, -1, 122),
      (5023, 5030, -1, 86),
      (5031, 5035, -1, 95),
      (5036, 5041, 784, 1),
      (5042, 5048, 784, 2),
      (5049, 5054, -1, 83),
      (5055, 5059, -1, 13),
      (5060, 5065, -1, 123),
      (5066, 5071, -1, 120),
      (5072, 5079, -1, 92),
      (5080, 5087, -1, 93),
      (5088, 5094, -1, 94),
      (5095, 5100, -1, 77),
      (5101, 5106, -1, 78),
      (5107, 5112, -1, 79),
      (5113, 5118, -1, 80),
      (5119, 5125, -1, 91),
      (5126, 5130, -1, 84),
      (5131, 5135, -1, 85),
      (5136, 5140, -1, 122),
      (5141, 5146, -1, 86),
      (5147, 5149, -1, 95),
      (5150, 5153, -1, 83),
      (5154, 5156, -1, 13),
      (5157, 5160, 805, 10),
      (5161, 5164, 805, 87),
      (5165, 5168, 805, 159),
      (5169, 5173, 805, 88),
      (5174, 5177, -1, 123),
      (5178, 5181, -1, 120),
      (5182, 5185, -1, 77),
      (5186, 5189, -1, 78),
      (5190, 5193, -1, 79),
      (5194, 5197, -1, 80),
      (5198, 5202, -1, 14),
      (5203, 5207, -1, 15),
      (5208, 5212, -1, 16),
      (5213, 5217, -1, 91),
      (5218, 5221, -1, 124),
      (5222, 5225, -1, 125),
      (5226, 5229, -1, 126),
      (5230, 5234, -1, 84),
      (5235, 5239, -1, 85),
      (5240, 5244, -1, 122),
      (5245, 5250, -1, 86),
      (5251, 5253, -1, 95),
      (5254, 5257, 827, 1),
      (5258, 5262, 827, 2),
      (5263, 5266, -1, 83),
      (5267, 5269, -1, 13),
      (5270, 5274, 831, 137),
      (5275, 5280, 831, 89),
      (5281, 5284, -1, 123),
      (5285, 5288, -1, 120),
      (5289, 5294, -1, 92),
      (5295, 5300, -1, 93),
      (5301, 5305, -1, 94),
      (5306, 5309, -1, 77),
      (5310, 5313, -1, 78),
      (5314, 5317, -1, 79),
      (5318, 5321, -1, 80),
      (5322, 5326, -1, 14),
      (5327, 5331, -1, 15),
      (5332, 5336, -1, 16),
      (5337, 5341, -1, 91),
      (5342, 5343, -1, 104),
      (5344, 5347, 847, 128),
      (5348, 5354, 847, 106),
      (5355, 5361, 847, 107),
      (5362, 5368, 847, 108),
      (5369, 5373, 847, 114),
      (5374, 5377, 847, 100),
      (5378, 5381, 847, 105),
      (5382, 5384, 847, 113),
      (5385, 5388, 847, 97),
      (5389, 5392, 847, 96),
      (5393, 5396, 847, 98),
      (5397, 5400, 847, 76),
      (5401, 5404, 847, 99),
      (5405, 5409, 847, 102),
      (5410, 5411, -1, 116),
      (5412, 5415, 862, 124),
      (5416, 5419, 862, 125),
      (5420, 5423, 862, 126),
      (5424, 5428, 865, 121),
      (5429, 5435, 862, 84),
      (5436, 5442, 862, 85),
      (5443, 5449, 862, 122),
      (5450, 5457, 862, 86),
      (5458, 5462, 862, 95),
      (5463, 5468, 871, 1),
      (5469, 5475, 871, 2),
      (5476, 5481, 862, 83),
      (5482, 5486, 862, 13),
      (5487, 5492, 862, 123),
      (5493, 5498, 862, 120),
      (5499, 5506, 862, 92),
      (5507, 5514, 862, 93),
      (5515, 5521, 862, 94),
      (5522, 5527, 862, 77),
      (5528, 5533, 862, 78),
      (5534, 5539, 862, 79),
      (5540, 5545, 862, 80),
      (5546, 5552, 862, 91),
      (5553, 5557, 862, 84),
      (5558, 5562, 862, 85),
      (5563, 5567, 862, 122),
      (5568, 5573, 862, 86),
      (5574, 5576, 862, 95),
      (5577, 5580, 890, 1),
      (5581, 5585, 890, 2),
      (5586, 5589, 862, 83),
      (5590, 5592, 862, 13),
      (5593, 5597, 894, 137),
      (5598, 5603, 894, 89),
      (5604, 5607, 862, 123),
      (5608, 5612, 897, 127),
      (5613, 5616, 862, 120),
      (5617, 5621, 862, 118),
      (5622, 5627, 862, 92),
      (5628, 5633, 862, 93),
      (5634, 5638, 862, 94),
      (5639, 5642, 862, 77),
      (5643, 5646, 862, 78),
      (5647, 5650, 862, 79),
      (5651, 5654, 862, 80),
      (5655, 5659, 862, 14),
      (5660, 5664, 862, 15),
      (5665, 5669, 862, 16),
      (5670, 5674, 862, 101),
      (5675, 5680, 862, 117),
      (5681, 5685, 862, 91),
      (5686, 5691, 913, 90),
      (5692, 5698, -1, 110),
      (5699, 5705, -1, 111),
      (5706, 5712, -1, 112),
      (5713, 5716, -1, 124),
      (5717, 5720, -1, 125),
      (5721, 5724, -1, 126),
      (5725, 5729, -1, 14),
      (5730, 5734, -1, 15),
      (5735, 5739, -1, 16),
      (5740, 5742, -1, 124),
      (5743, 5747, -1, 124),
      (5748, 5751, -1, 162),
      (5752, 5756, -1, 161),
      (5757, 5763, 927, 155),
      (5764, 5770, 927, 156),
      (5771, 5778, 927, 138),
      (5779, 5786, 927, 139),
      (5787, 5794, 927, 140),
      (5795, 5801, 927, 144),
      (5802, 5808, 927, 145),
      (5809, 5815, 927, 146),
      (5816, 5822, 927, 147),
      (5823, 5827, -1, 157),
      (5828, 5835, 937, 121),
      (5836, 5842, 937, 155),
      (5843, 5846, -1, 121),
      (5847, 5850, -1, 164),
      (5851, 5855, -1, 153),
      (5856, 5861, -1, 136),
      (5862, 5863, -1, 20),
      (5864, 5866, 944, 18),
      (5867, 5869, -1, 109),
      (5870, 5873, 946, 26),
      (5874, 5877, 946, 30),
      (5878, 5881, 946, 31),
      (5882, 5886, 946, 28),
      (5887, 5891, 946, 27),
      (5892, 5896, 946, 29),
      (5897, 5900, -1, 32),
      (5901, 5904, -1, 33),
      (5905, 5908, -1, 34),
      (5909, 5912, -1, 40),
      (5913, 5916, -1, 39),
      (5917, 5922, -1, 84),
      (5923, 5928, -1, 85),
      (5929, 5934, -1, 122),
      (5935, 5941, -1, 86),
      (5942, 5945, -1, 95),
      (5946, 5950, 962, 1),
      (5951, 5956, 962, 2),
      (5957, 5960, -1, 35),
      (5961, 5965, 965, 83),
      (5966, 5969, -1, 37),
      (5970, 5973, -1, 13),
      (5974, 5979, 968, 9),
      (5980, 5985, 968, 6),
      (5986, 5991, 968, 7),
      (5992, 5997, 968, 8),
      (5998, 6003, 968, 5),
      (6004, 6007, -1, 41),
      (6008, 6011, -1, 42),
      (6012, 6015, -1, 43),
      (6016, 6020, 976, 123),
      (6021, 6024, -1, 44),
      (6025, 6029, 978, 120),
      (6030, 6036, 978, 92),
      (6037, 6043, 978, 93),
      (6044, 6049, 978, 94),
      (6050, 6054, -1, 77),
      (6055, 6059, -1, 78),
      (6060, 6064, -1, 79),
      (6065, 6069, -1, 80),
      (6070, 6073, -1, 45),
      (6074, 6079, -1, 91),
      (6080, 6084, -1, 38),
      (6085, 6088, -1, 84),
      (6089, 6092, -1, 85),
      (6093, 6096, -1, 122),
      (6097, 6101, -1, 86),
      (6102, 6103, -1, 95),
      (6104, 6106, 994, 1),
      (6107, 6110, 994, 2),
      (6111, 6113, -1, 104),
      (6114, 6118, 997, 128),
      (6119, 6126, 997, 106),
      (6127, 6134, 997, 107),
      (6135, 6142, 997, 108),
      (6143, 6147, 997, 47),
      (6148, 6153, 997, 114),
      (6154, 6157, 997, 46),
      (6158, 6162, 997, 100),
      (6163, 6167, 997, 105),
      (6168, 6171, 997, 113),
      (6172, 6177, 1007, 110),
      (6178, 6183, 1007, 111),
      (6184, 6189, 1007, 112),
      (6190, 6194, 997, 97),
      (6195, 6199, 997, 96),
      (6200, 6204, 997, 98),
      (6205, 6209, 997, 76),
      (6210, 6214, 997, 99),
      (6215, 6220, 997, 102),
      (6221, 6223, -1, 83),
      (6224, 6226, -1, 116),
      (6227, 6231, 1018, 124),
      (6232, 6237, 1018, 121),
      (6238, 6241, 1018, 103),
      (6242, 6247, 1018, 127),
      (6248, 6253, 1018, 118),
      (6254, 6258, 1018, 48),
      (6259, 6264, 1018, 101),
      (6265, 6271, 1018, 117),
      (6272, 6278, 1018, 90),
      (6279, 6281, -1, 50),
      (6282, 6285, -1, 115),
      (6286, 6289, -1, 13),
      (6290, 6293, -1, 52),
      (6294, 6297, -1, 51),
      (6298, 6299, -1, 13),
      (6300, 6302, 1033, 10),
      (6303, 6307, 1034, 128),
      (6308, 6312, 1034, 105),
      (6313, 6316, 1034, 113),
      (6317, 6321, 1034, 97),
      (6322, 6326, 1034, 96),
      (6327, 6331, 1034, 98),
      (6332, 6336, 1034, 99),
      (6337, 6342, 1034, 102),
      (6343, 6347, 1033, 124),
      (6348, 6353, 1033, 121),
      (6354, 6359, 1033, 101),
      (6360, 6366, 1033, 117),
      (6367, 6369, 1033, 11),
      (6370, 6373, 1047, 137),
      (6374, 6378, 1047, 89),
      (6379, 6381, 1033, 12),
      (6382, 6384, -1, 53),
      (6385, 6387, -1, 54),
      (6388, 6390, -1, 55),
      (6391, 6393, -1, 56),
      (6394, 6397, -1, 135),
      (6398, 6401, -1, 131),
      (6402, 6405, -1, 129),
      (6406, 6409, -1, 133),
      (6410, 6413, -1, 132),
      (6414, 6417, -1, 130),
      (6418, 6421, -1, 134),
      (6422, 6424, -1, 152),
      (6425, 6427, -1, 154),
      (6428, 6430, -1, 123),
      (6431, 6434, -1, 161),
      (6435, 6440, 1065, 128),
      (6441, 6446, 1065, 155),
      (6447, 6451, 1065, 160),
      (6452, 6457, 1068, 153),
      (6458, 6464, 1068, 141),
      (6465, 6471, 1068, 142),
      (6472, 6478, 1068, 143),
      (6479, 6482, -1, 162),
      (6483, 6487, 1073, 158),
      (6488, 6494, 1073, 127),
      (6495, 6499, -1, 164),
      (6500, 6502, -1, 104),
      (6503, 6507, 1077, 128),
      (6508, 6515, 1077, 106),
      (6516, 6523, 1077, 107),
      (6524, 6531, 1077, 108),
      (6532, 6537, 1077, 114),
      (6538, 6542, 1077, 68),
      (6543, 6546, 1077, 69),
      (6547, 6551, 1077, 100),
      (6552, 6556, 1077, 105),
      (6557, 6560, 1077, 113),
      (6561, 6566, 1087, 110),
      (6567, 6572, 1087, 111),
      (6573, 6578, 1087, 112),
      (6579, 6583, 1077, 97),
      (6584, 6588, 1077, 96),
      (6589, 6593, 1077, 98),
      (6594, 6598, 1077, 76),
      (6599, 6603, 1077, 99),
      (6604, 6609, 1077, 102),
      (6610, 6612, -1, 70),
      (6613, 6615, -1, 116),
      (6616, 6620, 1098, 124),
      (6621, 6626, 1098, 121),
      (6627, 6630, 1098, 103),
      (6631, 6636, 1098, 127),
      (6637, 6642, 1098, 118),
      (6643, 6647, 1098, 92),
      (6648, 6652, 1098, 93),
      (6653, 6658, 1098, 101),
      (6659, 6665, 1098, 117),
      (6666, 6672, 1098, 90),
      (6673, 6676, -1, 94),
      (6677, 6680, -1, 71),
      (6681, 6684, -1, 72),
      (6685, 6688, -1, 73),
      (6689, 6692, -1, 74),
      (6693, 6696, -1, 13),
      (6697, 6699, -1, 77),
      (6700, 6702, -1, 78),
      (6703, 6707, 1116, 109),
      (6708, 6713, 1117, 26),
      (6714, 6719, 1117, 30),
      (6720, 6725, 1117, 31),
      (6726, 6732, 1117, 28),
      (6733, 6739, 1117, 27),
      (6740, 6746, 1117, 29),
      (6747, 6749, -1, 79),
      (6750, 6752, -1, 80),
      (6753, 6756, 1125, 20),
      (6757, 6761, 1126, 17),
      (6762, 6765, 1125, 82),
      (6766, 6770, 1128, 49),
      (6771, 6774, 1125, 81),
      (6775, 6779, 1125, 12),
      (6780, 6784, -1, 116),
      (6785, 6791, -1, 101),
      (6792, 6797, -1, 104),
      (6798, 6805, 1134, 100),
      (6806, 6813, 1134, 105),
      (6814, 6822, 1134, 106),
      (6823, 6831, 1134, 107),
      (6832, 6840, 1134, 108),
      (6841, 6848, 1134, 97),
      (6849, 6856, 1134, 96),
      (6857, 6864, 1134, 98),
      (6865, 6872, 1134, 99),
      (6873, 6878, -1, 25),
      (6879, 6886, 1144, 100),
      (6887, 6896, 1144, 117),
      (6897, 6901, -1, 13),
      (6902, 6907, -1, 70),
      (6908, 6914, -1, 115),
      (6915, 6918, -1, 101),
      (6919, 6923, -1, 117),
      (6924, 6928, -1, 63),
      (6929, 6933, -1, 64),
      (6934, 6938, -1, 61),
      (6939, 6943, -1, 62),
      (6944, 6948, -1, 60),
      (6949, 6953, -1, 59),
      (6954, 6958, -1, 65),
      (6959, 6962, -1, 66),
      (6963, 6966, -1, 67),
      (6967, 6970, -1, 91),
      (6971, 6975, -1, 104),
      (6976, 6982, 1162, 100),
      (6983, 6988, 1162, 113),
      (6989, 6995, 1164, 70),
      (6996, 7003, 1164, 110),
      (7004, 7011, 1164, 111),
      (7012, 7019, 1164, 112),
      (7020, 7027, 1162, 102),
      (7028, 7032, -1, 116),
      (7033, 7038, 1170, 103),
      (7039, 7047, 1170, 90),
      (7048, 7053, -1, 13),
      (7054, 7055, -1, 104),
      (7056, 7059, 1174, 105),
      (7060, 7062, 1174, 113),
      (7063, 7066, 1174, 97),
      (7067, 7070, 1174, 96),
      (7071, 7074, 1174, 98),
      (7075, 7078, 1174, 99),
      (7079, 7080, -1, 116),
      (7081, 7084, -1, 124),
      (7085, 7088, -1, 125),
      (7089, 7092, -1, 126),
      (7093, 7099, -1, 84),
      (7100, 7106, -1, 85),
      (7107, 7113, -1, 122),
      (7114, 7121, -1, 86),
      (7122, 7126, -1, 95),
      (7127, 7132, 1189, 1),
      (7133, 7139, 1189, 2),
      (7140, 7145, -1, 83),
      (7146, 7150, -1, 13),
      (7151, 7156, -1, 123),
      (7157, 7164, -1, 92),
      (7165, 7172, -1, 93),
      (7173, 7179, -1, 94),
      (7180, 7185, -1, 77),
      (7186, 7191, -1, 78),
      (7192, 7197, -1, 79),
      (7198, 7203, -1, 80),
      (7204, 7210, -1, 91),
      (7211, 7215, -1, 84),
      (7216, 7220, -1, 85),
      (7221, 7225, -1, 122),
      (7226, 7231, -1, 86),
      (7232, 7234, -1, 95),
      (7235, 7238, 1207, 1),
      (7239, 7243, 1207, 2),
      (7244, 7247, -1, 104),
      (7248, 7251, -1, 83),
      (7252, 7254, -1, 13),
      (7255, 7259, 1212, 137),
      (7260, 7265, 1212, 89),
      (7266, 7269, -1, 123),
      (7270, 7273, -1, 120),
      (7274, 7279, -1, 92),
      (7280, 7285, -1, 93),
      (7286, 7290, -1, 94),
      (7291, 7294, -1, 77),
      (7295, 7298, -1, 78),
      (7299, 7302, -1, 79),
      (7303, 7306, -1, 80),
      (7307, 7311, -1, 14),
      (7312, 7316, -1, 15),
      (7317, 7321, -1, 16),
      (7322, 7326, -1, 91),
      (7327, 7331, -1, 121),
      (7332, 7335, -1, 100),
      (7336, 7341, -1, 117),
      (7342, 7343, -1, 104),
      (7344, 7347, 1231, 100),
      (7348, 7351, 1231, 105),
      (7352, 7353, -1, 119),
      (7354, 7355, -1, 116),
      (7356, 7357, -1, 104),
      (7358, 7361, 1236, 128),
      (7362, 7365, 1236, 100),
      (7366, 7369, 1236, 105),
      (7370, 7372, 1236, 113),
      (7373, 7376, 1236, 97),
      (7377, 7380, 1236, 96),
      (7381, 7384, 1236, 98),
      (7385, 7388, 1236, 99),
      (7389, 7393, 1236, 102),
      (7394, 7395, -1, 119),
      (7396, 7399, 1246, 124),
      (7400, 7403, 1246, 125),
      (7404, 7407, 1246, 126),
      (7408, 7414, 1246, 110),
      (7415, 7421, 1246, 111),
      (7422, 7428, 1246, 112),
      (7429, 7432, 1246, 104),
      (7433, 7437, 1253, 26),
      (7438, 7442, 1253, 30),
      (7443, 7447, 1253, 31),
      (7448, 7454, 1253, 106),
      (7455, 7461, 1253, 107),
      (7462, 7468, 1253, 108),
      (7469, 7474, 1253, 28),
      (7475, 7480, 1253, 27),
      (7481, 7486, 1253, 29),
      (7487, 7490, 1246, 116),
      (7491, 7497, 1263, 84),
      (7498, 7504, 1263, 85),
      (7505, 7511, 1263, 123),
      (7512, 7519, 1263, 86),
      (7520, 7524, 1263, 95),
      (7525, 7530, 1268, 1),
      (7531, 7537, 1268, 2),
      (7538, 7542, 1263, 24),
      (7543, 7548, 1271, 83),
      (7549, 7553, 1263, 13),
      (7554, 7560, 1263, 21),
      (7561, 7565, 1263, 23),
      (7566, 7571, 1275, 123),
      (7572, 7577, 1263, 120),
      (7578, 7585, 1263, 92),
      (7586, 7593, 1263, 93),
      (7594, 7599, 1263, 22),
      (7600, 7606, 1263, 94),
      (7607, 7612, 1263, 77),
      (7613, 7618, 1263, 78),
      (7619, 7624, 1263, 79),
      (7625, 7630, 1263, 80),
      (7631, 7637, 1263, 91),
      (7638, 7642, 1246, 84),
      (7643, 7647, 1246, 85),
      (7648, 7652, 1246, 114),
      (7653, 7657, 1246, 122),
      (7658, 7663, 1246, 86),
      (7664, 7667, 1246, 25),
      (7668, 7674, 1292, 121),
      (7675, 7680, 1292, 100),
      (7681, 7688, 1292, 117),
      (7689, 7691, 1246, 95),
      (7692, 7695, 1296, 1),
      (7696, 7700, 1296, 2),
      (7701, 7704, 1246, 83),
      (7705, 7707, 1246, 13),
      (7708, 7711, 1300, 10),
      (7712, 7718, 1301, 110),
      (7719, 7725, 1301, 111),
      (7726, 7732, 1301, 112),
      (7733, 7736, 1300, 87),
      (7737, 7740, 1300, 159),
      (7741, 7745, 1300, 88),
      (7746, 7750, 1246, 135),
      (7751, 7755, 1246, 131),
      (7756, 7760, 1246, 129),
      (7761, 7765, 1246, 133),
      (7766, 7770, 1246, 132),
      (7771, 7775, 1246, 130),
      (7776, 7780, 1246, 134),
      (7781, 7784, 1246, 152),
      (7785, 7788, 1246, 154),
      (7789, 7792, 1246, 123),
      (7793, 7796, 1246, 120),
      (7797, 7800, 1246, 70),
      (7801, 7806, 1246, 92),
      (7807, 7812, 1246, 93),
      (7813, 7817, 1246, 94),
      (7818, 7822, 1246, 151),
      (7823, 7828, 1246, 75),
      (7829, 7832, 1246, 77),
      (7833, 7836, 1246, 78),
      (7837, 7840, 1246, 79),
      (7841, 7845, 1246, 14),
      (7846, 7850, 1246, 15),
      (7851, 7855, 1246, 16),
      (7856, 7861, 1246, 63),
      (7862, 7867, 1246, 64),
      (7868, 7873, 1246, 61),
      (7874, 7879, 1246, 62),
      (7880, 7885, 1246, 60),
      (7886, 7891, 1246, 59),
      (7892, 7897, 1246, 65),
      (7898, 7902, 1246, 66),
      (7903, 7907, 1246, 67),
      (7908, 7912, 1246, 91),
      (7913, 7914, -1, 116),
      (7915, 7918, 1341, 124),
      (7919, 7922, 1341, 125),
      (7923, 7926, 1341, 126),
      (7927, 7931, 1344, 121),
      (7932, 7938, 1341, 84),
      (7939, 7945, 1341, 85),
      (7946, 7952, 1341, 122),
      (7953, 7960, 1341, 86),
      (7961, 7965, 1341, 95),
      (7966, 7971, 1350, 1),
      (7972, 7978, 1350, 2),
      (7979, 7984, 1341, 83),
      (7985, 7989, 1341, 13),
      (7990, 7995, 1341, 123),
      (7996, 8001, 1341, 120),
      (8002, 8009, 1341, 92),
      (8010, 8017, 1341, 93),
      (8018, 8024, 1341, 94),
      (8025, 8030, 1341, 77),
      (8031, 8036, 1341, 78),
      (8037, 8042, 1341, 79),
      (8043, 8048, 1341, 80),
      (8049, 8055, 1341, 91),
      (8056, 8060, 1341, 84),
      (8061, 8065, 1341, 85),
      (8066, 8070, 1341, 122),
      (8071, 8076, 1341, 86),
      (8077, 8079, 1341, 95),
      (8080, 8083, 1369, 1),
      (8084, 8088, 1369, 2),
      (8089, 8092, 1341, 83),
      (8093, 8095, 1341, 13),
      (8096, 8100, 1373, 137),
      (8101, 8106, 1373, 89),
      (8107, 8110, 1341, 123),
      (8111, 8115, 1376, 127),
      (8116, 8119, 1341, 120),
      (8120, 8124, 1341, 118),
      (8125, 8130, 1341, 92),
      (8131, 8136, 1341, 93),
      (8137, 8141, 1341, 94),
      (8142, 8145, 1341, 77),
      (8146, 8149, 1341, 78),
      (8150, 8153, 1341, 79),
      (8154, 8157, 1341, 80),
      (8158, 8162, 1341, 14),
      (8163, 8167, 1341, 15),
      (8168, 8172, 1341, 16),
      (8173, 8177, 1341, 101),
      (8178, 8183, 1341, 117),
      (8184, 8188, 1341, 91),
      (8189, 8194, 1392, 90),
      (8195, 8198, -1, 124),
      (8199, 8202, -1, 125),
      (8203, 8206, -1, 126),
      (8207, 8209, -1, 20),
      (8210, 8214, 1397, 19),
      (8215, 8218, 1397, 18),
      (8219, 8223, -1, 32),
      (8224, 8228, -1, 33),
      (8229, 8233, -1, 34),
      (8234, 8238, -1, 40),
      (8239, 8243, -1, 39),
      (8244, 8248, -1, 35),
      (8249, 8253, -1, 37),
      (8254, 8258, -1, 36),
      (8259, 8265, 1407, 9),
      (8266, 8272, 1407, 6),
      (8273, 8279, 1407, 7),
      (8280, 8286, 1407, 8),
      (8287, 8293, 1407, 5),
      (8294, 8298, -1, 41),
      (8299, 8303, -1, 42),
      (8304, 8308, -1, 43),
      (8309, 8313, -1, 44),
      (8314, 8318, -1, 45),
      (8319, 8324, -1, 38),
      (8325, 8329, -1, 84),
      (8330, 8334, -1, 85),
      (8335, 8339, -1, 122),
      (8340, 8345, -1, 86),
      (8346, 8348, -1, 95),
      (8349, 8352, 1423, 1),
      (8353, 8357, 1423, 2),
      (8358, 8361, -1, 104),
      (8362, 8367, 1426, 47),
      (8368, 8372, 1426, 46),
      (8373, 8376, -1, 83),
      (8377, 8380, -1, 116),
      (8381, 8386, 1430, 48),
      (8387, 8390, -1, 50),
      (8391, 8395, -1, 52),
      (8396, 8400, -1, 51),
      (8401, 8403, -1, 13),
      (8404, 8407, 1435, 10),
      (8408, 8411, 1435, 11),
      (8412, 8416, 1437, 137),
      (8417, 8422, 1437, 10),
      (8423, 8428, 1437, 89),
      (8429, 8432, 1435, 12),
      (8433, 8436, -1, 53),
      (8437, 8440, -1, 54),
      (8441, 8444, -1, 55),
      (8445, 8448, -1, 56),
      (8449, 8453, -1, 135),
      (8454, 8458, -1, 131),
      (8459, 8463, -1, 129),
      (8464, 8468, -1, 133),
      (8469, 8473, -1, 132),
      (8474, 8478, -1, 130),
      (8479, 8483, -1, 134),
      (8484, 8487, -1, 57),
      (8488, 8491, -1, 58),
      (8492, 8495, -1, 123),
      (8496, 8499, -1, 120),
      (8500, 8505, 1456, 68),
      (8506, 8510, 1456, 69),
      (8511, 8514, -1, 70),
      (8515, 8520, -1, 92),
      (8521, 8526, -1, 93),
      (8527, 8531, -1, 94),
      (8532, 8536, -1, 71),
      (8537, 8541, -1, 72),
      (8542, 8546, -1, 73),
      (8547, 8551, -1, 74),
      (8552, 8555, -1, 77),
      (8556, 8559, -1, 78),
      (8560, 8563, -1, 79),
      (8564, 8567, -1, 80),
      (8568, 8572, 1470, 82),
      (8573, 8577, 1470, 81),
      (8578, 8582, -1, 3),
      (8583, 8588, -1, 4),
      (8589, 8593, -1, 14),
      (8594, 8598, -1, 15),
      (8599, 8603, -1, 16),
      (8604, 8609, -1, 63),
      (8610, 8615, -1, 64),
      (8616, 8621, -1, 61),
      (8622, 8627, -1, 62),
      (8628, 8633, -1, 60),
      (8634, 8639, -1, 59),
      (8640, 8645, -1, 65),
      (8646, 8650, -1, 66),
      (8651, 8655, -1, 67),
      (8656, 8660, -1, 91),
      (8661, 8662, -1, 104),
      (8663, 8666, 1488, 128),
      (8667, 8670, 1488, 100),
      (8671, 8674, 1488, 105),
      (8675, 8677, 1488, 113),
      (8678, 8681, 1488, 97),
      (8682, 8685, 1488, 96),
      (8686, 8689, 1488, 98),
      (8690, 8693, 1488, 99),
      (8694, 8698, 1488, 102),
      (8699, 8702, -1, 124),
      (8703, 8707, -1, 121),
      (8708, 8712, -1, 101),
      (8713, 8718, -1, 117),
      (8719, 8722, -1, 10),
      (8723, 8724, -1, 104),
      (8725, 8728, 1503, 128),
      (8729, 8735, 1503, 106),
      (8736, 8742, 1503, 107),
      (8743, 8749, 1503, 108),
      (8750, 8754, 1503, 114),
      (8755, 8758, 1503, 100),
      (8759, 8762, 1503, 105),
      (8763, 8765, 1503, 113),
      (8766, 8770, 1511, 110),
      (8771, 8775, 1511, 111),
      (8776, 8780, 1511, 112),
      (8781, 8784, 1503, 97),
      (8785, 8788, 1503, 96),
      (8789, 8792, 1503, 98),
      (8793, 8796, 1503, 76),
      (8797, 8800, 1503, 99),
      (8801, 8805, 1503, 102),
      (8806, 8807, -1, 20),
      (8808, 8810, 1521, 18),
      (8811, 8812, -1, 116),
      (8813, 8816, 1523, 124),
      (8817, 8821, 1523, 121),
      (8822, 8824, 1523, 24),
      (8825, 8827, 1523, 103),
      (8828, 8832, 1523, 21),
      (8833, 8835, 1523, 23),
      (8836, 8840, 1529, 127),
      (8841, 8845, 1523, 118),
      (8846, 8849, 1523, 22),
      (8850, 8854, 1523, 101),
      (8855, 8860, 1523, 117),
      (8861, 8866, 1523, 90),
      (8867, 8870, -1, 32),
      (8871, 8874, -1, 33),
      (8875, 8878, -1, 34),
      (8879, 8882, -1, 40),
      (8883, 8886, -1, 39),
      (8887, 8890, -1, 35),
      (8891, 8894, -1, 37),
      (8895, 8898, -1, 36),
      (8899, 8902, -1, 41),
      (8903, 8906, -1, 42),
      (8907, 8910, -1, 43),
      (8911, 8914, -1, 44),
      (8915, 8918, -1, 45),
      (8919, 8923, -1, 38),
      (8924, 8927, -1, 84),
      (8928, 8931, -1, 85),
      (8932, 8935, -1, 122),
      (8936, 8940, -1, 86),
      (8941, 8942, -1, 95),
      (8943, 8945, 1554, 1),
      (8946, 8949, 1554, 2),
      (8950, 8952, -1, 104),
      (8953, 8957, 1557, 128),
      (8958, 8965, 1557, 106),
      (8966, 8973, 1557, 107),
      (8974, 8981, 1557, 108),
      (8982, 8986, 1557, 47),
      (8987, 8992, 1557, 114),
      (8993, 8996, 1557, 46),
      (8997, 9001, 1557, 100),
      (9002, 9006, 1557, 105),
      (9007, 9010, 1557, 113),
      (9011, 9016, 1567, 110),
      (9017, 9022, 1567, 111),
      (9023, 9028, 1567, 112),
      (9029, 9033, 1557, 97),
      (9034, 9038, 1557, 96),
      (9039, 9043, 1557, 98),
      (9044, 9048, 1557, 76),
      (9049, 9053, 1557, 99),
      (9054, 9059, 1557, 102),
      (9060, 9062, -1, 83),
      (9063, 9065, -1, 116),
      (9066, 9070, 1578, 124),
      (9071, 9076, 1578, 121),
      (9077, 9080, 1578, 103),
      (9081, 9086, 1578, 127),
      (9087, 9092, 1578, 118),
      (9093, 9098, 1578, 101),
      (9099, 9105, 1578, 117),
      (9106, 9112, 1578, 90),
      (9113, 9116, -1, 115),
      (9117, 9120, -1, 13),
      (9121, 9123, -1, 104),
      (9124, 9128, 1589, 128),
      (9129, 9132, 1589, 52),
      (9133, 9137, 1591, 100),
      (9138, 9142, 1591, 105),
      (9143, 9146, 1589, 113),
      (9147, 9151, 1589, 97),
      (9152, 9156, 1589, 96),
      (9157, 9161, 1589, 98),
      (9162, 9166, 1589, 99),
      (9167, 9172, 1589, 102),
      (9173, 9175, -1, 119),
      (9176, 9183, 1600, 110),
      (9184, 9191, 1600, 111),
      (9192, 9199, 1600, 112),
      (9200, 9207, 1600, 106),
      (9208, 9215, 1600, 107),
      (9216, 9223, 1600, 108),
      (9224, 9228, 1600, 116),
      (9229, 9234, 1600, 114),
      (9235, 9239, 1600, 25),
      (9240, 9247, 1609, 121),
      (9248, 9254, 1609, 100),
      (9255, 9263, 1609, 117),
      (9264, 9267, 1600, 51),
      (9268, 9271, 1600, 13),
      (9272, 9279, 1614, 110),
      (9280, 9287, 1614, 111),
      (9288, 9295, 1614, 112),
      (9296, 9300, 1600, 70),
      (9301, 9306, 1600, 115),
      (9307, 9309, -1, 116),
      (9310, 9314, 1620, 124),
      (9315, 9320, 1620, 121),
      (9321, 9324, 1620, 13),
      (9325, 9332, 1623, 110),
      (9333, 9340, 1623, 111),
      (9341, 9348, 1623, 112),
      (9349, 9354, 1620, 127),
      (9355, 9359, 1620, 70),
      (9360, 9365, 1628, 118),
      (9366, 9371, 1620, 115),
      (9372, 9377, 1620, 101),
      (9378, 9384, 1620, 117),
      (9385, 9391, 1620, 90),
      (9392, 9395, -1, 104),
      (9396, 9401, 1634, 105),
      (9402, 9406, 1634, 113),
      (9407, 9413, 1636, 106),
      (9414, 9420, 1636, 107),
      (9421, 9427, 1636, 108),
      (9428, 9433, 1634, 97),
      (9434, 9439, 1634, 96),
      (9440, 9445, 1634, 98),
      (9446, 9451, 1634, 99),
      (9452, 9455, -1, 116),
      (9456, 9459, -1, 25),
      (9460, 9466, 1645, 121),
      (9467, 9472, 1645, 100),
      (9473, 9480, 1645, 117),
      (9481, 9484, -1, 104),
      (9485, 9490, 1649, 128),
      (9491, 9499, 1649, 106),
      (9500, 9508, 1649, 107),
      (9509, 9517, 1649, 108),
      (9518, 9524, 1649, 114),
      (9525, 9530, 1649, 100),
      (9531, 9536, 1649, 105),
      (9537, 9541, 1649, 113),
      (9542, 9547, 1649, 97),
      (9548, 9553, 1649, 96),
      (9554, 9559, 1649, 98),
      (9560, 9565, 1649, 76),
      (9566, 9571, 1649, 99),
      (9572, 9578, 1649, 102),
      (9579, 9582, -1, 116),
      (9583, 9588, 1664, 124),
      (9589, 9595, 1664, 121),
      (9596, 9600, 1664, 103),
      (9601, 9607, 1664, 127),
      (9608, 9614, 1664, 118),
      (9615, 9621, 1664, 101),
      (9622, 9629, 1664, 117),
      (9630, 9637, 1664, 90),
      (9638, 9646, -1, 110),
      (9647, 9655, -1, 111),
      (9656, 9664, -1, 112),
      (9665, 9669, -1, 13),
      (9670, 9671, -1, 13),
      (9672, 9674, 1677, 104),
      (9675, 9679, 1678, 128),
      (9680, 9684, 1678, 105),
      (9685, 9688, 1678, 113),
      (9689, 9693, 1678, 97),
      (9694, 9698, 1678, 96),
      (9699, 9703, 1678, 98),
      (9704, 9708, 1678, 99),
      (9709, 9714, 1678, 102),
      (9715, 9719, 1677, 124),
      (9720, 9725, 1677, 121),
      (9726, 9731, 1677, 101),
      (9732, 9738, 1677, 117),
      (9739, 9741, 1677, 11),
      (9742, 9745, 1691, 137),
      (9746, 9750, 1691, 89),
      (9751, 9753, -1, 120),
      (9754, 9758, 1694, 68),
      (9759, 9762, 1694, 69),
      (9763, 9765, -1, 70),
      (9766, 9770, -1, 92),
      (9771, 9775, -1, 93),
      (9776, 9779, -1, 94),
      (9780, 9783, -1, 71),
      (9784, 9787, -1, 72),
      (9788, 9791, -1, 73),
      (9792, 9795, -1, 74),
      (9796, 9799, -1, 13),
      (9800, 9802, -1, 13),
      (9803, 9805, -1, 77),
      (9806, 9808, -1, 78),
      (9809, 9811, -1, 79),
      (9812, 9814, -1, 80),
      (9815, 9818, -1, 3),
      (9819, 9823, -1, 4),
      (9824, 9825, -1, 161),
      (9826, 9829, 1713, 128),
      (9830, 9833, 1713, 155),
      (9834, 9837, 1713, 156),
      (9838, 9840, 1713, 160),
      (9841, 9844, 1713, 144),
      (9845, 9848, 1713, 145),
      (9849, 9852, 1713, 146),
      (9853, 9856, 1713, 147),
      (9857, 9858, -1, 163),
      (9859, 9865, 1722, 141),
      (9866, 9872, 1722, 142),
      (9873, 9879, 1722, 143),
      (9880, 9886, 1722, 138),
      (9887, 9893, 1722, 139),
      (9894, 9900, 1722, 140),
      (9901, 9904, 1722, 162),
      (9905, 9909, 1722, 150),
      (9910, 9913, 1722, 157),
      (9914, 9920, 1731, 121),
      (9921, 9926, 1731, 155),
      (9927, 9929, 1722, 164),
      (9930, 9936, 1734, 141),
      (9937, 9943, 1734, 142),
      (9944, 9950, 1734, 143),
      (9951, 9954, 1722, 153),
      (9955, 9959, 1722, 136),
      (9960, 9961, -1, 162),
      (9962, 9965, 1740, 124),
      (9966, 9970, 1740, 121),
      (9971, 9973, 1740, 158),
      (9974, 9978, 1740, 127),
      (9979, 9983, 1740, 149),
      (9984, 9985, -1, 104),
      (9986, 9989, 1746, 128),
      (9990, 9996, 1746, 106),
      (9997, 10003, 1746, 107),
      (10004, 10010, 1746, 108),
      (10011, 10015, 1746, 114),
      (10016, 10019, 1746, 100),
      (10020, 10023, 1746, 105),
      (10024, 10026, 1746, 113),
      (10027, 10031, 1754, 110),
      (10032, 10036, 1754, 111),
      (10037, 10041, 1754, 112),
      (10042, 10045, 1746, 97),
      (10046, 10049, 1746, 96),
      (10050, 10053, 1746, 98),
      (10054, 10059, 1760, 100),
      (10060, 10063, 1746, 76),
      (10064, 10067, 1746, 99),
      (10068, 10072, 1746, 102),
      (10073, 10074, -1, 116),
      (10075, 10078, 1765, 124),
      (10079, 10083, 1765, 121),
      (10084, 10088, 1765, 127),
      (10089, 10093, 1765, 118),
      (10094, 10098, 1765, 101),
      (10099, 10104, 1765, 117),
      (10105, 10110, 1765, 90),
      (10111, 10113, -1, 13),
      (10114, 10119, -1, 110),
      (10120, 10125, -1, 111),
      (10126, 10131, -1, 112),
      (10132, 10133, -1, 20),
      (10134, 10137, 1777, 19),
      (10138, 10140, 1777, 18),
      (10141, 10143, -1, 104),
      (10144, 10148, 1780, 128),
      (10149, 10156, 1780, 106),
      (10157, 10164, 1780, 107),
      (10165, 10172, 1780, 108),
      (10173, 10178, 1780, 114),
      (10179, 10183, 1780, 100),
      (10184, 10188, 1780, 105),
      (10189, 10193, 1780, 97),
      (10194, 10198, 1780, 96),
      (10199, 10203, 1780, 98),
      (10204, 10208, 1780, 76),
      (10209, 10213, 1780, 99),
      (10214, 10219, 1780, 102),
      (10220, 10222, -1, 104),
      (10223, 10226, 1794, 26),
      (10227, 10231, 1795, 128),
      (10232, 10235, 1794, 30),
      (10236, 10239, 1794, 31),
      (10240, 10244, 1798, 100),
      (10245, 10249, 1798, 105),
      (10250, 10253, 1794, 113),
      (10254, 10259, 1801, 106),
      (10260, 10265, 1801, 107),
      (10266, 10271, 1801, 108),
      (10272, 10276, 1794, 97),
      (10277, 10281, 1794, 96),
      (10282, 10286, 1794, 98),
      (10287, 10291, 1794, 99),
      (10292, 10296, 1794, 28),
      (10297, 10301, 1794, 27),
      (10302, 10307, 1810, 102),
      (10308, 10312, 1794, 29),
      (10313, 10315, -1, 116),
      (10316, 10319, 1813, 32),
      (10320, 10323, 1813, 33),
      (10324, 10327, 1813, 34),
      (10328, 10331, 1813, 40),
      (10332, 10335, 1813, 39),
      (10336, 10341, 1813, 84),
      (10342, 10347, 1813, 85),
      (10348, 10353, 1813, 122),
      (10354, 10360, 1813, 86),
      (10361, 10364, 1813, 95),
      (10365, 10368, 1813, 24),
      (10369, 10373, 1824, 83),
      (10374, 10377, 1813, 37),
      (10378, 10381, 1813, 13),
      (10382, 10387, 1827, 9),
      (10388, 10393, 1827, 6),
      (10394, 10399, 1827, 7),
      (10400, 10405, 1827, 8),
      (10406, 10411, 1827, 5),
      (10412, 10415, 1813, 41),
      (10416, 10419, 1813, 42),
      (10420, 10425, 1834, 21),
      (10426, 10429, 1813, 23),
      (10430, 10434, 1836, 123),
      (10435, 10438, 1813, 44),
      (10439, 10443, 1838, 120),
      (10444, 10448, 1838, 22),
      (10449, 10453, 1813, 77),
      (10454, 10458, 1813, 78),
      (10459, 10463, 1813, 79),
      (10464, 10468, 1813, 80),
      (10469, 10472, 1813, 45),
      (10473, 10478, 1813, 91),
      (10479, 10483, 1813, 38),
      (10484, 10487, -1, 84),
      (10488, 10491, -1, 85),
      (10492, 10495, -1, 122),
      (10496, 10500, -1, 86),
      (10501, 10503, -1, 25),
      (10504, 10509, 1852, 121),
      (10510, 10514, 1852, 100),
      (10515, 10521, 1852, 117),
      (10522, 10523, -1, 95),
      (10524, 10526, 1856, 1),
      (10527, 10530, 1856, 2),
      (10531, 10533, -1, 104),
      (10534, 10538, 1859, 47),
      (10539, 10542, 1859, 46),
      (10543, 10545, -1, 83),
      (10546, 10548, -1, 116),
      (10549, 10553, 1863, 48),
      (10554, 10556, -1, 50),
      (10557, 10560, -1, 52),
      (10561, 10565, -1, 124),
      (10566, 10570, -1, 125),
      (10571, 10575, -1, 126),
      (10576, 10583, -1, 84),
      (10584, 10591, -1, 85),
      (10592, 10599, -1, 122),
      (10600, 10608, -1, 86),
      (10609, 10614, -1, 95),
      (10615, 10621, 1874, 1),
      (10622, 10629, 1874, 2),
      (10630, 10636, -1, 83),
      (10637, 10642, -1, 13),
      (10643, 10649, -1, 123),
      (10650, 10656, -1, 120),
      (10657, 10665, -1, 92),
      (10666, 10674, -1, 93),
      (10675, 10682, -1, 94),
      (10683, 10689, -1, 77),
      (10690, 10696, -1, 78),
      (10697, 10703, -1, 79),
      (10704, 10710, -1, 80),
      (10711, 10718, -1, 91),
      (10719, 10724, -1, 84),
      (10725, 10730, -1, 85),
      (10731, 10736, -1, 122),
      (10737, 10743, -1, 86),
      (10744, 10747, -1, 95),
      (10748, 10752, 1893, 1),
      (10753, 10758, 1893, 2),
      (10759, 10762, -1, 51),
      (10763, 10767, 1896, 83),
      (10768, 10771, -1, 13),
      (10772, 10776, 1898, 10),
      (10777, 10781, 1898, 87),
      (10782, 10786, 1898, 159),
      (10787, 10792, 1898, 88),
      (10793, 10797, -1, 123),
      (10798, 10802, -1, 120),
      (10803, 10809, -1, 92),
      (10810, 10816, -1, 93),
      (10817, 10822, -1, 94),
      (10823, 10827, -1, 77),
      (10828, 10832, -1, 78),
      (10833, 10837, -1, 79),
      (10838, 10842, -1, 80),
      (10843, 10848, -1, 14),
      (10849, 10854, -1, 15),
      (10855, 10860, -1, 16),
      (10861, 10866, -1, 91),
      (10867, 10871, -1, 124),
      (10872, 10876, -1, 125),
      (10877, 10881, -1, 126),
      (10882, 10887, -1, 84),
      (10888, 10893, -1, 85),
      (10894, 10899, -1, 122),
      (10900, 10906, -1, 86),
      (10907, 10910, -1, 95),
      (10911, 10915, 1923, 1),
      (10916, 10921, 1923, 2),
      (10922, 10926, -1, 83),
      (10927, 10930, -1, 13),
      (10931, 10936, 1927, 137),
      (10937, 10943, 1927, 89),
      (10944, 10948, -1, 123),
      (10949, 10953, -1, 120),
      (10954, 10960, -1, 92),
      (10961, 10967, -1, 93),
      (10968, 10973, -1, 94),
      (10974, 10978, -1, 77),
      (10979, 10983, -1, 78),
      (10984, 10988, -1, 79),
      (10989, 10993, -1, 80),
      (10994, 10999, -1, 14),
      (11000, 11005, -1, 15),
      (11006, 11011, -1, 16),
      (11012, 11017, -1, 91),
      (11018, 11019, -1, 13),
      (11020, 11022, 1943, 10),
      (11023, 11028, 1944, 110),
      (11029, 11034, 1944, 111),
      (11035, 11040, 1944, 112),
      (11041, 11043, 1943, 11),
      (11044, 11047, 1948, 137),
      (11048, 11052, 1948, 10),
      (11053, 11057, 1948, 89),
      (11058, 11060, 1943, 12),
      (11061, 11063, -1, 53),
      (11064, 11066, -1, 54),
      (11067, 11069, -1, 55),
      (11070, 11072, -1, 56),
      (11073, 11076, -1, 135),
      (11077, 11080, -1, 131),
      (11081, 11084, -1, 129),
      (11085, 11088, -1, 133),
      (11089, 11092, -1, 132),
      (11093, 11096, -1, 130),
      (11097, 11100, -1, 134),
      (11101, 11103, -1, 57),
      (11104, 11106, -1, 58),
      (11107, 11109, -1, 123),
      (11110, 11112, -1, 120),
      (11113, 11117, 1967, 68),
      (11118, 11121, 1967, 69),
      (11122, 11124, -1, 70),
      (11125, 11129, -1, 92),
      (11130, 11134, -1, 93),
      (11135, 11138, -1, 94),
      (11139, 11142, -1, 71),
      (11143, 11146, -1, 72),
      (11147, 11150, -1, 73),
      (11151, 11154, -1, 74),
      (11155, 11159, -1, 75),
      (11160, 11162, -1, 77),
      (11163, 11165, -1, 78),
      (11166, 11168, -1, 79),
      (11169, 11171, -1, 80),
      (11172, 11175, 1982, 82),
      (11176, 11179, 1982, 81),
      (11180, 11183, -1, 3),
      (11184, 11188, -1, 4),
      (11189, 11193, -1, 63),
      (11194, 11198, -1, 64),
      (11199, 11203, -1, 61),
      (11204, 11208, -1, 62),
      (11209, 11213, -1, 60),
      (11214, 11218, -1, 59),
      (11219, 11223, -1, 65),
      (11224, 11227, -1, 66),
      (11228, 11231, -1, 67),
      (11232, 11235, -1, 91),
      (11236, 11239, -1, 97),
      (11240, 11243, -1, 96),
      (11244, 11247, -1, 98),
      (11248, 11251, -1, 99),
      (11252, 11254, -1, 95),
      (11255, 11257, -1, 104),
      (11258, 11262, 2002, 100),
      (11263, 11267, 2002, 105),
      (11268, 11271, 2002, 113),
      (11272, 11276, 2002, 97),
      (11277, 11281, 2002, 96),
      (11282, 11286, 2002, 98),
      (11287, 11291, 2002, 99),
      (11292, 11297, 2002, 102),
      (11298, 11300, -1, 119),
      (11301, 11308, 2011, 110),
      (11309, 11316, 2011, 111),
      (11317, 11324, 2011, 112),
      (11325, 11332, 2011, 106),
      (11333, 11340, 2011, 107),
      (11341, 11348, 2011, 108),
      (11349, 11353, 2011, 116),
      (11354, 11359, 2011, 114),
      (11360, 11364, 2011, 25),
      (11365, 11371, 2020, 100),
      (11372, 11380, 2020, 117),
      (11381, 11384, 2011, 13),
      (11385, 11392, 2023, 110),
      (11393, 11400, 2023, 111),
      (11401, 11408, 2023, 112),
      (11409, 11413, 2011, 70),
      (11414, 11419, 2011, 115),
      (11420, 11422, -1, 116),
      (11423, 11426, 2029, 103),
      (11427, 11432, 2029, 118),
      (11433, 11438, 2029, 101),
      (11439, 11445, 2029, 117),
      (11446, 11452, 2029, 90));

   A_3 : constant Among_Array_Type (0 .. 25) := (
      (11453, 11453, -1, 1),
      (11454, 11456, 0, 1),
      (11457, 11459, 0, 1),
      (11460, 11462, 0, 1),
      (11463, 11465, 0, 1),
      (11466, 11466, -1, 1),
      (11467, 11468, -1, 1),
      (11469, 11472, 6, 1),
      (11473, 11476, 6, 1),
      (11477, 11480, -1, 1),
      (11481, 11484, -1, 1),
      (11485, 11485, -1, 1),
      (11486, 11488, 11, 1),
      (11489, 11491, 11, 1),
      (11492, 11495, -1, 1),
      (11496, 11499, -1, 1),
      (11500, 11503, -1, 1),
      (11504, 11507, -1, 1),
      (11508, 11509, -1, 1),
      (11510, 11513, 18, 1),
      (11514, 11514, -1, 1),
      (11515, 11517, 20, 1),
      (11518, 11520, 20, 1),
      (11521, 11523, -1, 1),
      (11524, 11524, -1, 1),
      (11525, 11527, 24, 1));


   procedure R_Cyr_to_lat (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_1 : Integer;
      v_2 : Integer;
      v_3 : Integer;
   begin
      --  (, line 80
      --  do, line 82
      v_1 := Z.C;
      --  repeat, line 82

      <<lab1>>

      loop
         v_2 := Z.C;
         --  goto, line 82
         loop
            v_3 := Z.C;
            --  (, line 82
            Z.Bra := Z.C;            --  [, line 83

            --  substring, line 83
            Find_Among (Z, A_0, Among_String, A);
            if A = 0 then
               goto lab4;
            end if;
            Z.Ket := Z.C;            --  ], line 83

            --  among, line 83
            case A is
               when 1 =>
                  --  (, line 84
                  --  <-, line 84
                  Slice_From (Z, "a");
               when 2 =>
                  --  (, line 85
                  --  <-, line 85
                  Slice_From (Z, "b");
               when 3 =>
                  --  (, line 86
                  --  <-, line 86
                  Slice_From (Z, "v");
               when 4 =>
                  --  (, line 87
                  --  <-, line 87
                  Slice_From (Z, "g");
               when 5 =>
                  --  (, line 88
                  --  <-, line 88
                  Slice_From (Z, "d");
               when 6 =>
                  --  (, line 89
                  --  <-, line 89
                  Slice_From (Z, "đ");
               when 7 =>
                  --  (, line 90
                  --  <-, line 90
                  Slice_From (Z, "e");
               when 8 =>
                  --  (, line 91
                  --  <-, line 91
                  Slice_From (Z, "ž");
               when 9 =>
                  --  (, line 92
                  --  <-, line 92
                  Slice_From (Z, "z");
               when 10 =>
                  --  (, line 93
                  --  <-, line 93
                  Slice_From (Z, "i");
               when 11 =>
                  --  (, line 94
                  --  <-, line 94
                  Slice_From (Z, "j");
               when 12 =>
                  --  (, line 95
                  --  <-, line 95
                  Slice_From (Z, "k");
               when 13 =>
                  --  (, line 96
                  --  <-, line 96
                  Slice_From (Z, "l");
               when 14 =>
                  --  (, line 97
                  --  <-, line 97
                  Slice_From (Z, "lj");
               when 15 =>
                  --  (, line 98
                  --  <-, line 98
                  Slice_From (Z, "m");
               when 16 =>
                  --  (, line 99
                  --  <-, line 99
                  Slice_From (Z, "n");
               when 17 =>
                  --  (, line 100
                  --  <-, line 100
                  Slice_From (Z, "nj");
               when 18 =>
                  --  (, line 101
                  --  <-, line 101
                  Slice_From (Z, "o");
               when 19 =>
                  --  (, line 102
                  --  <-, line 102
                  Slice_From (Z, "p");
               when 20 =>
                  --  (, line 103
                  --  <-, line 103
                  Slice_From (Z, "r");
               when 21 =>
                  --  (, line 104
                  --  <-, line 104
                  Slice_From (Z, "s");
               when 22 =>
                  --  (, line 105
                  --  <-, line 105
                  Slice_From (Z, "t");
               when 23 =>
                  --  (, line 106
                  --  <-, line 106
                  Slice_From (Z, "ć");
               when 24 =>
                  --  (, line 107
                  --  <-, line 107
                  Slice_From (Z, "u");
               when 25 =>
                  --  (, line 108
                  --  <-, line 108
                  Slice_From (Z, "f");
               when 26 =>
                  --  (, line 109
                  --  <-, line 109
                  Slice_From (Z, "h");
               when 27 =>
                  --  (, line 110
                  --  <-, line 110
                  Slice_From (Z, "c");
               when 28 =>
                  --  (, line 111
                  --  <-, line 111
                  Slice_From (Z, "č");
               when 29 =>
                  --  (, line 112
                  --  <-, line 112
                  Slice_From (Z, "dž");
               when 30 =>
                  --  (, line 113
                  --  <-, line 113
                  Slice_From (Z, "š");
               when others =>
                  null;
            end case;
            Z.C := v_3;
            exit;

            <<lab4>>
            Z.C := v_3;
            if Z.C >= Z.L then
               goto lab2;
            end if;
            Z.C := Z.C + 1;
         end loop;
         goto lab1;

         <<lab2>>
         Z.C := v_2;

         exit;
      end loop;

      <<lab0>>
      Z.C := v_1;

      Result := True;
   end R_Cyr_to_lat;

   procedure R_Prelude (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_1 : Integer;
      v_2 : Integer;
      v_3 : Integer;
      v_4 : Integer;
      v_5 : Integer;
      v_6 : Integer;
      v_7 : Integer;
      v_8 : Integer;
      v_9 : Integer;
   begin
      --  (, line 119
      --  do, line 121
      v_1 := Z.C;
      --  repeat, line 121

      <<lab1>>

      loop
         v_2 := Z.C;
         --  goto, line 121
         loop
            v_3 := Z.C;
            --  (, line 121
            In_Grouping (Z, G_Ca, 98, 382, False, C);
            if C /= 0 then
               goto lab4;
            end if;
            Z.Bra := Z.C;            --  [, line 122

            --  literal, line 122
            C := Eq_S (Z, "ije");
            if C = 0 then
               goto lab4;
            end if;
            Z.C := Z.C + C;
            Z.Ket := Z.C;            --  ], line 122

            In_Grouping (Z, G_Ca, 98, 382, False, C);
            if C /= 0 then
               goto lab4;
            end if;
            --  <-, line 122
            Slice_From (Z, "e");
            Z.C := v_3;
            exit;

            <<lab4>>
            Z.C := v_3;
            if Z.C >= Z.L then
               goto lab2;
            end if;
            Z.C := Z.C + 1;
         end loop;
         goto lab1;

         <<lab2>>
         Z.C := v_2;

         exit;
      end loop;

      <<lab0>>
      Z.C := v_1;
      --  do, line 125
      v_4 := Z.C;
      --  repeat, line 125

      <<lab6>>

      loop
         v_5 := Z.C;
         --  goto, line 125
         loop
            v_6 := Z.C;
            --  (, line 125
            In_Grouping (Z, G_Ca, 98, 382, False, C);
            if C /= 0 then
               goto lab9;
            end if;
            Z.Bra := Z.C;            --  [, line 126

            --  literal, line 126
            C := Eq_S (Z, "je");
            if C = 0 then
               goto lab9;
            end if;
            Z.C := Z.C + C;
            Z.Ket := Z.C;            --  ], line 126

            In_Grouping (Z, G_Ca, 98, 382, False, C);
            if C /= 0 then
               goto lab9;
            end if;
            --  <-, line 126
            Slice_From (Z, "e");
            Z.C := v_6;
            exit;

            <<lab9>>
            Z.C := v_6;
            if Z.C >= Z.L then
               goto lab7;
            end if;
            Z.C := Z.C + 1;
         end loop;
         goto lab6;

         <<lab7>>
         Z.C := v_5;

         exit;
      end loop;

      <<lab5>>
      Z.C := v_4;
      --  do, line 129
      v_7 := Z.C;
      --  repeat, line 129

      <<lab11>>

      loop
         v_8 := Z.C;
         --  goto, line 129
         loop
            v_9 := Z.C;
            --  (, line 129
            Z.Bra := Z.C;            --  [, line 130

            --  literal, line 130
            C := Eq_S (Z, "dj");
            if C = 0 then
               goto lab14;
            end if;
            Z.C := Z.C + C;
            Z.Ket := Z.C;            --  ], line 130

            --  <-, line 130
            Slice_From (Z, "đ");
            Z.C := v_9;
            exit;

            <<lab14>>
            Z.C := v_9;
            if Z.C >= Z.L then
               goto lab12;
            end if;
            Z.C := Z.C + 1;
         end loop;
         goto lab11;

         <<lab12>>
         Z.C := v_8;

         exit;
      end loop;

      <<lab10>>
      Z.C := v_7;

      Result := True;
   end R_Prelude;

   procedure R_Mark_regions (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_1 : Integer;
      v_2 : Integer;
      v_3 : Integer;
      v_4 : Integer;
   begin
      --  (, line 135
      --  set no_diacritics, line 137
      Z.B_No_diacritics := True;
      --  do, line 139
      v_1 := Z.C;
      --  (, line 139
            --  gopast, line 140
      --  grouping sa, line 140
      Out_Grouping (Z, G_Sa, 263, 382, True, C);
      if C < 0 then
         goto lab0;
      end if;
      Z.C := Z.C + C;
      --  unset no_diacritics, line 140
      Z.B_No_diacritics := False;

      <<lab0>>
      Z.C := v_1;
      Z.I_P1 := Z.L;
      --  do, line 145
      v_2 := Z.C;
      --  (, line 145
            --  gopast, line 146
      --  grouping v, line 146
      Out_Grouping (Z, G_V, 97, 117, True, C);
      if C < 0 then
         goto lab2;
      end if;
      Z.C := Z.C + C;
      --  setmark p1, line 146
      Z.I_P1 := Z.C;
      --  (, line 147
      if not (Z.I_P1 < 2) then
      goto lab2;
      end if;
      --  (, line 147
            --  gopast, line 148
      --  non v, line 148
      In_Grouping (Z, G_V, 97, 117, True, C);
      if C < 0 then
         goto lab2;
      end if;
      Z.C := Z.C + C;
      --  setmark p1, line 149
      Z.I_P1 := Z.C;

      <<lab2>>
      Z.C := v_2;
      --  do, line 152
      v_3 := Z.C;
      --  (, line 152
      --  gopast, line 153
      loop
         --  literal, line 153
         C := Eq_S (Z, "r");
         if C = 0 then
            goto lab7;
         end if;
         Z.C := Z.C + C;
         exit;

         <<lab7>>
         if Z.C >= Z.L then
            goto lab5;
         end if;
         Z.C := Z.C + 1;
      end loop;
      --  or, line 154
      v_4 := Z.C;
      if not (Z.C >= 2) then
      goto lab9;
      end if;
      goto lab8;

      <<lab9>>
      Z.C := v_4;
      --  (, line 154
            --  gopast, line 154
      --  non rg, line 154
      In_Grouping (Z, G_Rg, 114, 114, True, C);
      if C < 0 then
         goto lab5;
      end if;
      Z.C := Z.C + C;

      <<lab8>>
      if not ((Z.I_P1 - Z.C) > 1) then
      goto lab5;
      end if;
      --  setmark p1, line 155
      Z.I_P1 := Z.C;

      <<lab5>>
      Z.C := v_3;

      Result := True;
   end R_Mark_regions;

   procedure R_R1 (Z : in out Context_Type; Result : out Boolean) is
   begin
      Result := (Z.I_P1 <= Z.C);
   end R_R1;

   procedure R_Step_1 (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
   begin
      --  (, line 164
      Z.Ket := Z.C;      --  [, line 165

      --  substring, line 165
      if Z.C - 2 <= Z.Lb or else Check_Among (Z, Z.C - 1, 3, 16#346a2a#) then
         Result := False;
         return;
         --  substring, line 165
      end if;
      Find_Among_Backward (Z, A_1, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 165

      --  among, line 165
      case A is
         when 1 =>
            --  (, line 167
            --  <-, line 167
            Slice_From (Z, "loga");
         when 2 =>
            --  (, line 169
            --  <-, line 169
            Slice_From (Z, "peh");
         when 3 =>
            --  (, line 170
            --  <-, line 170
            Slice_From (Z, "vojka");
         when 4 =>
            --  (, line 171
            --  <-, line 171
            Slice_From (Z, "bojka");
         when 5 =>
            --  (, line 173
            --  <-, line 173
            Slice_From (Z, "jak");
         when 6 =>
            --  (, line 174
            --  <-, line 174
            Slice_From (Z, "čajni");
         when 7 =>
            --  (, line 175
            --  Boolean test no_diacritics, line 175
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 175
            Slice_From (Z, "cajni");
         when 8 =>
            --  (, line 176
            --  <-, line 176
            Slice_From (Z, "erni");
         when 9 =>
            --  (, line 177
            --  <-, line 177
            Slice_From (Z, "larni");
         when 10 =>
            --  (, line 178
            --  <-, line 178
            Slice_From (Z, "esni");
         when 11 =>
            --  (, line 179
            --  <-, line 179
            Slice_From (Z, "anjca");
         when 12 =>
            --  (, line 181
            --  <-, line 181
            Slice_From (Z, "ajca");
         when 13 =>
            --  (, line 183
            --  <-, line 183
            Slice_From (Z, "ljca");
         when 14 =>
            --  (, line 185
            --  <-, line 185
            Slice_From (Z, "ejca");
         when 15 =>
            --  (, line 187
            --  <-, line 187
            Slice_From (Z, "ojca");
         when 16 =>
            --  (, line 188
            --  <-, line 188
            Slice_From (Z, "ajka");
         when 17 =>
            --  (, line 189
            --  <-, line 189
            Slice_From (Z, "ojka");
         when 18 =>
            --  (, line 191
            --  <-, line 191
            Slice_From (Z, "šca");
         when 19 =>
            --  (, line 193
            --  <-, line 193
            Slice_From (Z, "ing");
         when 20 =>
            --  (, line 194
            --  <-, line 194
            Slice_From (Z, "tvenik");
         when 21 =>
            --  (, line 196
            --  <-, line 196
            Slice_From (Z, "tetika");
         when 22 =>
            --  (, line 197
            --  <-, line 197
            Slice_From (Z, "nstva");
         when 23 =>
            --  (, line 198
            --  <-, line 198
            Slice_From (Z, "nik");
         when 24 =>
            --  (, line 199
            --  <-, line 199
            Slice_From (Z, "tik");
         when 25 =>
            --  (, line 200
            --  <-, line 200
            Slice_From (Z, "zik");
         when 26 =>
            --  (, line 201
            --  <-, line 201
            Slice_From (Z, "snik");
         when 27 =>
            --  (, line 202
            --  <-, line 202
            Slice_From (Z, "kusi");
         when 28 =>
            --  (, line 203
            --  <-, line 203
            Slice_From (Z, "kusni");
         when 29 =>
            --  (, line 204
            --  <-, line 204
            Slice_From (Z, "kustva");
         when 30 =>
            --  (, line 205
            --  <-, line 205
            Slice_From (Z, "dušni");
         when 31 =>
            --  (, line 206
            --  Boolean test no_diacritics, line 206
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 206
            Slice_From (Z, "dusni");
         when 32 =>
            --  (, line 207
            --  <-, line 207
            Slice_From (Z, "antni");
         when 33 =>
            --  (, line 208
            --  <-, line 208
            Slice_From (Z, "bilni");
         when 34 =>
            --  (, line 209
            --  <-, line 209
            Slice_From (Z, "tilni");
         when 35 =>
            --  (, line 210
            --  <-, line 210
            Slice_From (Z, "avilni");
         when 36 =>
            --  (, line 211
            --  <-, line 211
            Slice_From (Z, "silni");
         when 37 =>
            --  (, line 212
            --  <-, line 212
            Slice_From (Z, "gilni");
         when 38 =>
            --  (, line 213
            --  <-, line 213
            Slice_From (Z, "rilni");
         when 39 =>
            --  (, line 214
            --  <-, line 214
            Slice_From (Z, "nilni");
         when 40 =>
            --  (, line 215
            --  <-, line 215
            Slice_From (Z, "alni");
         when 41 =>
            --  (, line 216
            --  <-, line 216
            Slice_From (Z, "ozni");
         when 42 =>
            --  (, line 217
            --  <-, line 217
            Slice_From (Z, "ravi");
         when 43 =>
            --  (, line 218
            --  <-, line 218
            Slice_From (Z, "stavni");
         when 44 =>
            --  (, line 219
            --  <-, line 219
            Slice_From (Z, "pravni");
         when 45 =>
            --  (, line 220
            --  <-, line 220
            Slice_From (Z, "tivni");
         when 46 =>
            --  (, line 221
            --  <-, line 221
            Slice_From (Z, "sivni");
         when 47 =>
            --  (, line 222
            --  <-, line 222
            Slice_From (Z, "atni");
         when 48 =>
            --  (, line 223
            --  <-, line 223
            Slice_From (Z, "enta");
         when 49 =>
            --  (, line 224
            --  <-, line 224
            Slice_From (Z, "tetni");
         when 50 =>
            --  (, line 225
            --  <-, line 225
            Slice_From (Z, "pletni");
         when 51 =>
            --  (, line 226
            --  <-, line 226
            Slice_From (Z, "šavi");
         when 52 =>
            --  (, line 227
            --  Boolean test no_diacritics, line 227
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 227
            Slice_From (Z, "savi");
         when 53 =>
            --  (, line 228
            --  <-, line 228
            Slice_From (Z, "anta");
         when 54 =>
            --  (, line 230
            --  <-, line 230
            Slice_From (Z, "ačka");
         when 55 =>
            --  (, line 232
            --  Boolean test no_diacritics, line 232
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 232
            Slice_From (Z, "acka");
         when 56 =>
            --  (, line 233
            --  <-, line 233
            Slice_From (Z, "uška");
         when 57 =>
            --  (, line 234
            --  Boolean test no_diacritics, line 234
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 234
            Slice_From (Z, "uska");
         when 58 =>
            --  (, line 238
            --  <-, line 238
            Slice_From (Z, "atka");
         when 59 =>
            --  (, line 240
            --  <-, line 240
            Slice_From (Z, "etka");
         when 60 =>
            --  (, line 243
            --  <-, line 243
            Slice_From (Z, "itka");
         when 61 =>
            --  (, line 245
            --  <-, line 245
            Slice_From (Z, "otka");
         when 62 =>
            --  (, line 249
            --  <-, line 249
            Slice_From (Z, "utka");
         when 63 =>
            --  (, line 250
            --  <-, line 250
            Slice_From (Z, "eskna");
         when 64 =>
            --  (, line 251
            --  <-, line 251
            Slice_From (Z, "tični");
         when 65 =>
            --  (, line 252
            --  Boolean test no_diacritics, line 252
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 252
            Slice_From (Z, "ticni");
         when 66 =>
            --  (, line 253
            --  <-, line 253
            Slice_From (Z, "ojska");
         when 67 =>
            --  (, line 254
            --  <-, line 254
            Slice_From (Z, "esma");
         when 68 =>
            --  (, line 256
            --  <-, line 256
            Slice_From (Z, "metra");
         when 69 =>
            --  (, line 258
            --  <-, line 258
            Slice_From (Z, "centra");
         when 70 =>
            --  (, line 260
            --  <-, line 260
            Slice_From (Z, "istra");
         when 71 =>
            --  (, line 261
            --  <-, line 261
            Slice_From (Z, "osti");
         when 72 =>
            --  (, line 262
            --  Boolean test no_diacritics, line 262
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 262
            Slice_From (Z, "osti");
         when 73 =>
            --  (, line 263
            --  <-, line 263
            Slice_From (Z, "dba");
         when 74 =>
            --  (, line 265
            --  <-, line 265
            Slice_From (Z, "čka");
         when 75 =>
            --  (, line 267
            --  <-, line 267
            Slice_From (Z, "mca");
         when 76 =>
            --  (, line 269
            --  <-, line 269
            Slice_From (Z, "nca");
         when 77 =>
            --  (, line 270
            --  <-, line 270
            Slice_From (Z, "voljni");
         when 78 =>
            --  (, line 271
            --  <-, line 271
            Slice_From (Z, "anki");
         when 79 =>
            --  (, line 273
            --  <-, line 273
            Slice_From (Z, "vca");
         when 80 =>
            --  (, line 275
            --  <-, line 275
            Slice_From (Z, "sca");
         when 81 =>
            --  (, line 277
            --  <-, line 277
            Slice_From (Z, "rca");
         when 82 =>
            --  (, line 280
            --  <-, line 280
            Slice_From (Z, "alca");
         when 83 =>
            --  (, line 282
            --  <-, line 282
            Slice_From (Z, "elca");
         when 84 =>
            --  (, line 285
            --  <-, line 285
            Slice_From (Z, "olca");
         when 85 =>
            --  (, line 287
            --  <-, line 287
            Slice_From (Z, "njca");
         when 86 =>
            --  (, line 289
            --  <-, line 289
            Slice_From (Z, "ekta");
         when 87 =>
            --  (, line 291
            --  <-, line 291
            Slice_From (Z, "izma");
         when 88 =>
            --  (, line 292
            --  <-, line 292
            Slice_From (Z, "jebi");
         when 89 =>
            --  (, line 293
            --  <-, line 293
            Slice_From (Z, "baci");
         when 90 =>
            --  (, line 294
            --  <-, line 294
            Slice_From (Z, "ašni");
         when 91 =>
            --  (, line 295
            --  Boolean test no_diacritics, line 295
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 295
            Slice_From (Z, "asni");
         when others =>
            null;
      end case;

      Result := True;
   end R_Step_1;

   procedure R_Step_2 (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
   begin
      --  (, line 299
      Z.Ket := Z.C;      --  [, line 300

      --  substring, line 300
      Find_Among_Backward (Z, A_2, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 300

      --  call R1, line 300
      R_R1 (Z, Result);
      if not Result then
         Result := False;
         return;
      end if;
      --  among, line 300
      case A is
         when 1 =>
            --  (, line 328
            --  <-, line 328
            Slice_From (Z, "sk");
         when 2 =>
            --  (, line 356
            --  <-, line 356
            Slice_From (Z, "šk");
         when 3 =>
            --  (, line 361
            --  <-, line 361
            Slice_From (Z, "stv");
         when 4 =>
            --  (, line 366
            --  <-, line 366
            Slice_From (Z, "štv");
         when 5 =>
            --  (, line 373
            --  <-, line 373
            Slice_From (Z, "tanij");
         when 6 =>
            --  (, line 380
            --  <-, line 380
            Slice_From (Z, "manij");
         when 7 =>
            --  (, line 387
            --  <-, line 387
            Slice_From (Z, "panij");
         when 8 =>
            --  (, line 394
            --  <-, line 394
            Slice_From (Z, "ranij");
         when 9 =>
            --  (, line 401
            --  <-, line 401
            Slice_From (Z, "ganij");
         when 10 =>
            --  (, line 412
            --  <-, line 412
            Slice_From (Z, "an");
         when 11 =>
            --  (, line 420
            --  <-, line 420
            Slice_From (Z, "in");
         when 12 =>
            --  (, line 430
            --  <-, line 430
            Slice_From (Z, "on");
         when 13 =>
            --  (, line 460
            --  <-, line 460
            Slice_From (Z, "n");
         when 14 =>
            --  (, line 476
            --  <-, line 476
            Slice_From (Z, "ać");
         when 15 =>
            --  (, line 492
            --  <-, line 492
            Slice_From (Z, "eć");
         when 16 =>
            --  (, line 508
            --  <-, line 508
            Slice_From (Z, "uć");
         when 17 =>
            --  (, line 512
            --  <-, line 512
            Slice_From (Z, "ugov");
         when 18 =>
            --  (, line 519
            --  <-, line 519
            Slice_From (Z, "ug");
         when 19 =>
            --  (, line 524
            --  <-, line 524
            Slice_From (Z, "log");
         when 20 =>
            --  (, line 535
            --  <-, line 535
            Slice_From (Z, "g");
         when 21 =>
            --  (, line 539
            --  <-, line 539
            Slice_From (Z, "rari");
         when 22 =>
            --  (, line 543
            --  <-, line 543
            Slice_From (Z, "oti");
         when 23 =>
            --  (, line 547
            --  <-, line 547
            Slice_From (Z, "si");
         when 24 =>
            --  (, line 551
            --  <-, line 551
            Slice_From (Z, "li");
         when 25 =>
            --  (, line 559
            --  <-, line 559
            Slice_From (Z, "uj");
         when 26 =>
            --  (, line 570
            --  <-, line 570
            Slice_From (Z, "caj");
         when 27 =>
            --  (, line 581
            --  <-, line 581
            Slice_From (Z, "čaj");
         when 28 =>
            --  (, line 592
            --  <-, line 592
            Slice_From (Z, "ćaj");
         when 29 =>
            --  (, line 603
            --  <-, line 603
            Slice_From (Z, "đaj");
         when 30 =>
            --  (, line 614
            --  <-, line 614
            Slice_From (Z, "laj");
         when 31 =>
            --  (, line 625
            --  <-, line 625
            Slice_From (Z, "raj");
         when 32 =>
            --  (, line 633
            --  <-, line 633
            Slice_From (Z, "bij");
         when 33 =>
            --  (, line 641
            --  <-, line 641
            Slice_From (Z, "cij");
         when 34 =>
            --  (, line 649
            --  <-, line 649
            Slice_From (Z, "dij");
         when 35 =>
            --  (, line 655
            --  <-, line 655
            Slice_From (Z, "lij");
         when 36 =>
            --  (, line 658
            --  <-, line 658
            Slice_From (Z, "nij");
         when 37 =>
            --  (, line 666
            --  <-, line 666
            Slice_From (Z, "mij");
         when 38 =>
            --  (, line 674
            --  <-, line 674
            Slice_From (Z, "žij");
         when 39 =>
            --  (, line 682
            --  <-, line 682
            Slice_From (Z, "gij");
         when 40 =>
            --  (, line 690
            --  <-, line 690
            Slice_From (Z, "fij");
         when 41 =>
            --  (, line 698
            --  <-, line 698
            Slice_From (Z, "pij");
         when 42 =>
            --  (, line 706
            --  <-, line 706
            Slice_From (Z, "rij");
         when 43 =>
            --  (, line 712
            --  <-, line 712
            Slice_From (Z, "sij");
         when 44 =>
            --  (, line 720
            --  <-, line 720
            Slice_From (Z, "tij");
         when 45 =>
            --  (, line 728
            --  <-, line 728
            Slice_From (Z, "zij");
         when 46 =>
            --  (, line 736
            --  <-, line 736
            Slice_From (Z, "nal");
         when 47 =>
            --  (, line 744
            --  <-, line 744
            Slice_From (Z, "ijal");
         when 48 =>
            --  (, line 750
            --  <-, line 750
            Slice_From (Z, "ozil");
         when 49 =>
            --  (, line 754
            --  <-, line 754
            Slice_From (Z, "olov");
         when 50 =>
            --  (, line 760
            --  <-, line 760
            Slice_From (Z, "ol");
         when 51 =>
            --  (, line 768
            --  <-, line 768
            Slice_From (Z, "lem");
         when 52 =>
            --  (, line 775
            --  <-, line 775
            Slice_From (Z, "ram");
         when 53 =>
            --  (, line 782
            --  <-, line 782
            Slice_From (Z, "ar");
         when 54 =>
            --  (, line 789
            --  <-, line 789
            Slice_From (Z, "dr");
         when 55 =>
            --  (, line 796
            --  <-, line 796
            Slice_From (Z, "er");
         when 56 =>
            --  (, line 803
            --  <-, line 803
            Slice_From (Z, "or");
         when 57 =>
            --  (, line 808
            --  <-, line 808
            Slice_From (Z, "es");
         when 58 =>
            --  (, line 813
            --  <-, line 813
            Slice_From (Z, "is");
         when 59 =>
            --  (, line 821
            --  <-, line 821
            Slice_From (Z, "taš");
         when 60 =>
            --  (, line 829
            --  <-, line 829
            Slice_From (Z, "naš");
         when 61 =>
            --  (, line 837
            --  <-, line 837
            Slice_From (Z, "jaš");
         when 62 =>
            --  (, line 845
            --  <-, line 845
            Slice_From (Z, "kaš");
         when 63 =>
            --  (, line 853
            --  <-, line 853
            Slice_From (Z, "baš");
         when 64 =>
            --  (, line 861
            --  <-, line 861
            Slice_From (Z, "gaš");
         when 65 =>
            --  (, line 869
            --  <-, line 869
            Slice_From (Z, "vaš");
         when 66 =>
            --  (, line 877
            --  <-, line 877
            Slice_From (Z, "eš");
         when 67 =>
            --  (, line 885
            --  <-, line 885
            Slice_From (Z, "iš");
         when 68 =>
            --  (, line 892
            --  <-, line 892
            Slice_From (Z, "ikat");
         when 69 =>
            --  (, line 899
            --  <-, line 899
            Slice_From (Z, "lat");
         when 70 =>
            --  (, line 907
            --  <-, line 907
            Slice_From (Z, "et");
         when 71 =>
            --  (, line 915
            --  <-, line 915
            Slice_From (Z, "est");
         when 72 =>
            --  (, line 923
            --  <-, line 923
            Slice_From (Z, "ist");
         when 73 =>
            --  (, line 931
            --  <-, line 931
            Slice_From (Z, "kst");
         when 74 =>
            --  (, line 939
            --  <-, line 939
            Slice_From (Z, "ost");
         when 75 =>
            --  (, line 944
            --  <-, line 944
            Slice_From (Z, "išt");
         when 76 =>
            --  (, line 956
            --  <-, line 956
            Slice_From (Z, "ova");
         when 77 =>
            --  (, line 987
            --  <-, line 987
            Slice_From (Z, "av");
         when 78 =>
            --  (, line 1018
            --  <-, line 1018
            Slice_From (Z, "ev");
         when 79 =>
            --  (, line 1049
            --  <-, line 1049
            Slice_From (Z, "iv");
         when 80 =>
            --  (, line 1078
            --  <-, line 1078
            Slice_From (Z, "ov");
         when 81 =>
            --  (, line 1084
            --  <-, line 1084
            Slice_From (Z, "mov");
         when 82 =>
            --  (, line 1090
            --  <-, line 1090
            Slice_From (Z, "lov");
         when 83 =>
            --  (, line 1120
            --  <-, line 1120
            Slice_From (Z, "el");
         when 84 =>
            --  (, line 1150
            --  <-, line 1150
            Slice_From (Z, "anj");
         when 85 =>
            --  (, line 1180
            --  <-, line 1180
            Slice_From (Z, "enj");
         when 86 =>
            --  (, line 1210
            --  <-, line 1210
            Slice_From (Z, "šnj");
         when 87 =>
            --  (, line 1218
            --  <-, line 1218
            Slice_From (Z, "en");
         when 88 =>
            --  (, line 1222
            --  <-, line 1222
            Slice_From (Z, "šn");
         when 89 =>
            --  (, line 1237
            --  <-, line 1237
            Slice_From (Z, "čin");
         when 90 =>
            --  (, line 1253
            --  <-, line 1253
            Slice_From (Z, "roši");
         when 91 =>
            --  (, line 1282
            --  <-, line 1282
            Slice_From (Z, "oš");
         when 92 =>
            --  (, line 1310
            --  <-, line 1310
            Slice_From (Z, "evit");
         when 93 =>
            --  (, line 1338
            --  <-, line 1338
            Slice_From (Z, "ovit");
         when 94 =>
            --  (, line 1366
            --  <-, line 1366
            Slice_From (Z, "ast");
         when 95 =>
            --  (, line 1397
            --  <-, line 1397
            Slice_From (Z, "k");
         when 96 =>
            --  (, line 1424
            --  <-, line 1424
            Slice_From (Z, "eva");
         when 97 =>
            --  (, line 1451
            --  <-, line 1451
            Slice_From (Z, "ava");
         when 98 =>
            --  (, line 1478
            --  <-, line 1478
            Slice_From (Z, "iva");
         when 99 =>
            --  (, line 1505
            --  <-, line 1505
            Slice_From (Z, "uva");
         when 100 =>
            --  (, line 1537
            --  <-, line 1537
            Slice_From (Z, "ir");
         when 101 =>
            --  (, line 1560
            --  <-, line 1560
            Slice_From (Z, "ač");
         when 102 =>
            --  (, line 1583
            --  <-, line 1583
            Slice_From (Z, "ača");
         when 103 =>
            --  (, line 1611
            --  <-, line 1611
            Slice_From (Z, "ni");
         when 104 =>
            --  (, line 1637
            --  <-, line 1637
            Slice_From (Z, "a");
         when 105 =>
            --  (, line 1664
            --  <-, line 1664
            Slice_From (Z, "ur");
         when 106 =>
            --  (, line 1685
            --  <-, line 1685
            Slice_From (Z, "astaj");
         when 107 =>
            --  (, line 1706
            --  <-, line 1706
            Slice_From (Z, "istaj");
         when 108 =>
            --  (, line 1727
            --  <-, line 1727
            Slice_From (Z, "ostaj");
         when 109 =>
            --  (, line 1740
            --  <-, line 1740
            Slice_From (Z, "aj");
         when 110 =>
            --  (, line 1767
            --  <-, line 1767
            Slice_From (Z, "asta");
         when 111 =>
            --  (, line 1794
            --  <-, line 1794
            Slice_From (Z, "ista");
         when 112 =>
            --  (, line 1821
            --  <-, line 1821
            Slice_From (Z, "osta");
         when 113 =>
            --  (, line 1845
            --  <-, line 1845
            Slice_From (Z, "ta");
         when 114 =>
            --  (, line 1861
            --  <-, line 1861
            Slice_From (Z, "inj");
         when 115 =>
            --  (, line 1871
            --  <-, line 1871
            Slice_From (Z, "as");
         when 116 =>
            --  (, line 1886
            --  <-, line 1886
            Slice_From (Z, "i");
         when 117 =>
            --  (, line 1928
            --  <-, line 1928
            Slice_From (Z, "luč");
         when 118 =>
            --  (, line 1943
            --  <-, line 1943
            Slice_From (Z, "jeti");
         when 119 =>
            --  (, line 1948
            --  <-, line 1948
            Slice_From (Z, "e");
         when 120 =>
            --  (, line 1979
            --  <-, line 1979
            Slice_From (Z, "at");
         when 121 =>
            --  (, line 2017
            --  Boolean test no_diacritics, line 2017
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2017
            Slice_From (Z, "luc");
         when 122 =>
            --  (, line 2046
            --  Boolean test no_diacritics, line 2046
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2046
            Slice_From (Z, "snj");
         when 123 =>
            --  (, line 2076
            --  Boolean test no_diacritics, line 2076
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2076
            Slice_From (Z, "os");
         when 124 =>
            --  (, line 2112
            --  Boolean test no_diacritics, line 2112
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2112
            Slice_From (Z, "ac");
         when 125 =>
            --  (, line 2128
            --  Boolean test no_diacritics, line 2128
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2128
            Slice_From (Z, "ec");
         when 126 =>
            --  (, line 2144
            --  Boolean test no_diacritics, line 2144
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2144
            Slice_From (Z, "uc");
         when 127 =>
            --  (, line 2160
            --  Boolean test no_diacritics, line 2160
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2160
            Slice_From (Z, "rosi");
         when 128 =>
            --  (, line 2183
            --  Boolean test no_diacritics, line 2183
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2183
            Slice_From (Z, "aca");
         when 129 =>
            --  (, line 2191
            --  Boolean test no_diacritics, line 2191
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2191
            Slice_From (Z, "jas");
         when 130 =>
            --  (, line 2199
            --  Boolean test no_diacritics, line 2199
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2199
            Slice_From (Z, "tas");
         when 131 =>
            --  (, line 2207
            --  Boolean test no_diacritics, line 2207
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2207
            Slice_From (Z, "gas");
         when 132 =>
            --  (, line 2215
            --  Boolean test no_diacritics, line 2215
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2215
            Slice_From (Z, "nas");
         when 133 =>
            --  (, line 2223
            --  Boolean test no_diacritics, line 2223
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2223
            Slice_From (Z, "kas");
         when 134 =>
            --  (, line 2231
            --  Boolean test no_diacritics, line 2231
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2231
            Slice_From (Z, "vas");
         when 135 =>
            --  (, line 2239
            --  Boolean test no_diacritics, line 2239
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2239
            Slice_From (Z, "bas");
         when 136 =>
            --  (, line 2241
            --  Boolean test no_diacritics, line 2241
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2241
            Slice_From (Z, "as");
         when 137 =>
            --  (, line 2256
            --  Boolean test no_diacritics, line 2256
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2256
            Slice_From (Z, "cin");
         when 138 =>
            --  (, line 2259
            --  Boolean test no_diacritics, line 2259
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2259
            Slice_From (Z, "astaj");
         when 139 =>
            --  (, line 2262
            --  Boolean test no_diacritics, line 2262
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2262
            Slice_From (Z, "istaj");
         when 140 =>
            --  (, line 2265
            --  Boolean test no_diacritics, line 2265
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2265
            Slice_From (Z, "ostaj");
         when 141 =>
            --  (, line 2269
            --  Boolean test no_diacritics, line 2269
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2269
            Slice_From (Z, "asta");
         when 142 =>
            --  (, line 2273
            --  Boolean test no_diacritics, line 2273
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2273
            Slice_From (Z, "ista");
         when 143 =>
            --  (, line 2277
            --  Boolean test no_diacritics, line 2277
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2277
            Slice_From (Z, "osta");
         when 144 =>
            --  (, line 2280
            --  Boolean test no_diacritics, line 2280
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2280
            Slice_From (Z, "ava");
         when 145 =>
            --  (, line 2283
            --  Boolean test no_diacritics, line 2283
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2283
            Slice_From (Z, "eva");
         when 146 =>
            --  (, line 2286
            --  Boolean test no_diacritics, line 2286
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2286
            Slice_From (Z, "iva");
         when 147 =>
            --  (, line 2289
            --  Boolean test no_diacritics, line 2289
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2289
            Slice_From (Z, "uva");
         when 148 =>
            --  (, line 2290
            --  Boolean test no_diacritics, line 2290
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2290
            Slice_From (Z, "ova");
         when 149 =>
            --  (, line 2292
            --  Boolean test no_diacritics, line 2292
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2292
            Slice_From (Z, "jeti");
         when 150 =>
            --  (, line 2294
            --  Boolean test no_diacritics, line 2294
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2294
            Slice_From (Z, "inj");
         when 151 =>
            --  (, line 2295
            --  Boolean test no_diacritics, line 2295
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2295
            Slice_From (Z, "ist");
         when 152 =>
            --  (, line 2298
            --  Boolean test no_diacritics, line 2298
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2298
            Slice_From (Z, "es");
         when 153 =>
            --  (, line 2301
            --  Boolean test no_diacritics, line 2301
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2301
            Slice_From (Z, "et");
         when 154 =>
            --  (, line 2304
            --  Boolean test no_diacritics, line 2304
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2304
            Slice_From (Z, "is");
         when 155 =>
            --  (, line 2310
            --  Boolean test no_diacritics, line 2310
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2310
            Slice_From (Z, "ir");
         when 156 =>
            --  (, line 2313
            --  Boolean test no_diacritics, line 2313
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2313
            Slice_From (Z, "ur");
         when 157 =>
            --  (, line 2315
            --  Boolean test no_diacritics, line 2315
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2315
            Slice_From (Z, "uj");
         when 158 =>
            --  (, line 2317
            --  Boolean test no_diacritics, line 2317
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2317
            Slice_From (Z, "ni");
         when 159 =>
            --  (, line 2321
            --  Boolean test no_diacritics, line 2321
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2321
            Slice_From (Z, "sn");
         when 160 =>
            --  (, line 2323
            --  Boolean test no_diacritics, line 2323
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2323
            Slice_From (Z, "ta");
         when 161 =>
            --  (, line 2327
            --  Boolean test no_diacritics, line 2327
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2327
            Slice_From (Z, "a");
         when 162 =>
            --  (, line 2331
            --  Boolean test no_diacritics, line 2331
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2331
            Slice_From (Z, "i");
         when 163 =>
            --  (, line 2332
            --  Boolean test no_diacritics, line 2332
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2332
            Slice_From (Z, "e");
         when 164 =>
            --  (, line 2335
            --  Boolean test no_diacritics, line 2335
            if not Z.B_No_diacritics then
               Result := False;
               return;
            end if;
            --  <-, line 2335
            Slice_From (Z, "n");
         when others =>
            null;
      end case;

      Result := True;
   end R_Step_2;

   procedure R_Step_3 (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
   begin
      --  (, line 2339
      Z.Ket := Z.C;      --  [, line 2340

      --  substring, line 2340
      if Z.C <= Z.Lb or else Check_Among (Z, Z.C - 1, 3, 16#30a7a2#) then
         Result := False;
         return;
         --  substring, line 2340
      end if;
      Find_Among_Backward (Z, A_3, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 2340

      --  call R1, line 2340
      R_R1 (Z, Result);
      if not Result then
         Result := False;
         return;
      end if;
      --  (, line 2366
      --  <-, line 2366
      Slice_From (Z, "");

      Result := True;
   end R_Step_3;

   procedure Stem (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_4 : Integer;
      v_5 : Integer;
      v_6 : Integer;
   begin
      --  (, line 2371
      --  do, line 2372
      --  call cyr_to_lat, line 2372
      R_Cyr_to_lat (Z, Result);
      --  do, line 2373
      --  call prelude, line 2373
      R_Prelude (Z, Result);
      --  do, line 2374
      --  call mark_regions, line 2374
      R_Mark_regions (Z, Result);
      Z.Lb := Z.C; Z.C := Z.L;      --  backwards, line 2375

      --  (, line 2375
      --  do, line 2376
      v_4 := Z.L - Z.C;
      --  call Step_1, line 2376
      R_Step_1 (Z, Result);
      Z.C := Z.L - v_4;
      --  do, line 2377
      v_5 := Z.L - Z.C;
      --  (, line 2377
      --  or, line 2377
      v_6 := Z.L - Z.C;
      --  call Step_2, line 2377
      R_Step_2 (Z, Result);
      if not Result then
         goto lab2;
      end if;
      goto lab1;

      <<lab2>>
      Z.C := Z.L - v_6;
      --  call Step_3, line 2377
      R_Step_3 (Z, Result);
      if not Result then
         goto lab0;
      end if;

      <<lab1>>

      <<lab0>>
      Z.C := Z.L - v_5;
      Z.C := Z.Lb;

      Result := True;
   end Stem;
end Stemmer.Serbian;

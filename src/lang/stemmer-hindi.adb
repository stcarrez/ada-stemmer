--  Generated by Snowball 2.0.0 - https://snowballstem.org/

package body Stemmer.Hindi is

   pragma Style_Checks ("-mr");
   pragma Warnings (Off, "*variable*is never read and never assigned*");
   pragma Warnings (Off, "*mode could be*instead of*");
   pragma Warnings (Off, "*formal parameter.*is not modified*");
   pragma Warnings (Off, "*this line is too long*");
   pragma Warnings (Off, "*is not referenced*");

   procedure R_CONSONANT (Z : in out Context_Type; Result : out Boolean);

   procedure Among_Handler (Context : in out Stemmer.Context_Type'Class; Operation : in Operation_Index; Result : out Boolean);

   G_Consonant : constant Grouping_Array (0 .. 79) := (
      True, True, True, True, True, True, True, True,
      True, True, True, True, True, True, True, True,
      True, True, True, True, True, True, True, True,
      True, True, True, True, True, True, True, True,
      True, True, True, True, True, False, False, True,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, True, True, True, True, True,
      True, True, True, False, False, False, False, False
   );
   Among_String : constant String := "ी" & "ूंगी" & "ेंगी"
      & "ऊंगी" & "आऊंगी" & "ाऊंगी" & "एंगी"
      & "आएंगी" & "ाएंगी" & "ेगी" & "ोगी" & "एगी"
      & "आएगी" & "ाएगी" & "ओगी" & "आओगी" & "ाओगी"
      & "ती" & "अती" & "आती" & "ाती" & "नी" & "अनी"
      & "आँ" & "ाँ" & "इयाँ" & "आइयाँ" & "ाइयाँ"
      & "ियाँ" & "ु" & "ीं" & "तीं" & "अतीं"
      & "आतीं" & "ातीं" & "आं" & "ुआं" & "उआं"
      & "ें" & "ईं" & "आईं" & "ाईं" & "ों" & "इयों"
      & "आइयों" & "ाइयों" & "ियों" & "एं" & "ुएं"
      & "आएं" & "उएं" & "ाएं" & "ताएं" & "अताएं"
      & "नाएं" & "अनाएं" & "ओं" & "ुओं" & "आओं"
      & "उओं" & "ाओं" & "ताओं" & "अताओं" & "नाओं"
      & "अनाओं" & "ां" & "इयां" & "आइयां"
      & "ाइयां" & "ियां" & "ू" & "अ" & "आ" & "इ" & "े"
      & "ेंगे" & "एंगे" & "आएंगे" & "ाएंगे"
      & "ोगे" & "ओगे" & "आओगे" & "ाओगे" & "ते"
      & "अते" & "आते" & "ाते" & "ने" & "अने" & "आने"
      & "ाने" & "ई" & "आई" & "ाई" & "उ" & "ऊ" & "ो" & "्"
      & "ए" & "आए" & "इए" & "आइए" & "ाइए" & "ाए" & "िए"
      & "ओ" & "आओ" & "ाओ" & "कर" & "अकर" & "आकर"
      & "ाकर" & "ा" & "ूंगा" & "ऊंगा" & "आऊंगा"
      & "ाऊंगा" & "ेगा" & "एगा" & "आएगा" & "ाएगा"
      & "ता" & "अता" & "आता" & "ाता" & "ना" & "अना"
      & "आना" & "ाना" & "आया" & "ाया" & "ि";

   A_0 : constant Among_Array_Type (0 .. 131) := (
      (1, 3, -1, -1, 0),
      (4, 15, 0, -1, 0),
      (16, 27, 0, -1, 0),
      (28, 39, 0, -1, 0),
      (40, 54, 3, -1, 0),
      (55, 69, 3, -1, 0),
      (70, 81, 0, -1, 0),
      (82, 96, 6, -1, 0),
      (97, 111, 6, -1, 0),
      (112, 120, 0, -1, 0),
      (121, 129, 0, -1, 0),
      (130, 138, 0, -1, 0),
      (139, 150, 11, -1, 0),
      (151, 162, 11, -1, 0),
      (163, 171, 0, -1, 0),
      (172, 183, 14, -1, 0),
      (184, 195, 14, -1, 0),
      (196, 201, 0, -1, 1),
      (202, 210, 17, -1, 0),
      (211, 219, 17, -1, 0),
      (220, 228, 17, -1, 0),
      (229, 234, 0, -1, 2),
      (235, 243, 21, -1, 0),
      (244, 249, -1, -1, 0),
      (250, 255, -1, -1, 0),
      (256, 267, 24, -1, 0),
      (268, 282, 25, -1, 0),
      (283, 297, 25, -1, 0),
      (298, 309, 24, -1, 0),
      (310, 312, -1, -1, 0),
      (313, 318, -1, -1, 0),
      (319, 327, 30, -1, 3),
      (328, 339, 31, -1, 0),
      (340, 351, 31, -1, 0),
      (352, 363, 31, -1, 0),
      (364, 369, -1, -1, 0),
      (370, 378, 35, -1, 0),
      (379, 387, 35, -1, 0),
      (388, 393, -1, -1, 0),
      (394, 399, -1, -1, 0),
      (400, 408, 39, -1, 0),
      (409, 417, 39, -1, 0),
      (418, 423, -1, -1, 0),
      (424, 435, 42, -1, 0),
      (436, 450, 43, -1, 0),
      (451, 465, 43, -1, 0),
      (466, 477, 42, -1, 0),
      (478, 483, -1, -1, 0),
      (484, 492, 47, -1, 0),
      (493, 501, 47, -1, 0),
      (502, 510, 47, -1, 0),
      (511, 519, 47, -1, 0),
      (520, 531, 51, -1, 4),
      (532, 546, 52, -1, 0),
      (547, 558, 51, -1, 5),
      (559, 573, 54, -1, 0),
      (574, 579, -1, -1, 0),
      (580, 588, 56, -1, 0),
      (589, 597, 56, -1, 0),
      (598, 606, 56, -1, 0),
      (607, 615, 56, -1, 0),
      (616, 627, 60, -1, 6),
      (628, 642, 61, -1, 0),
      (643, 654, 60, -1, 7),
      (655, 669, 63, -1, 0),
      (670, 675, -1, -1, 0),
      (676, 687, 65, -1, 0),
      (688, 702, 66, -1, 0),
      (703, 717, 66, -1, 0),
      (718, 729, 65, -1, 0),
      (730, 732, -1, -1, 0),
      (733, 735, -1, -1, 0),
      (736, 738, -1, -1, 0),
      (739, 741, -1, -1, 0),
      (742, 744, -1, -1, 0),
      (745, 756, 74, -1, 0),
      (757, 768, 74, -1, 0),
      (769, 783, 76, -1, 0),
      (784, 798, 76, -1, 0),
      (799, 807, 74, -1, 0),
      (808, 816, 74, -1, 0),
      (817, 828, 80, -1, 0),
      (829, 840, 80, -1, 0),
      (841, 846, 74, -1, 8),
      (847, 855, 83, -1, 0),
      (856, 864, 83, -1, 0),
      (865, 873, 83, -1, 0),
      (874, 879, 74, -1, 9),
      (880, 888, 87, -1, 0),
      (889, 897, 87, -1, 0),
      (898, 906, 87, -1, 0),
      (907, 909, -1, -1, 0),
      (910, 915, 91, -1, 0),
      (916, 921, 91, -1, 0),
      (922, 924, -1, -1, 0),
      (925, 927, -1, -1, 0),
      (928, 930, -1, -1, 0),
      (931, 933, -1, -1, 0),
      (934, 936, -1, -1, 0),
      (937, 942, 98, -1, 0),
      (943, 948, 98, -1, 0),
      (949, 957, 100, -1, 0),
      (958, 966, 100, -1, 0),
      (967, 972, 98, -1, 0),
      (973, 978, 98, -1, 0),
      (979, 981, -1, -1, 0),
      (982, 987, 105, -1, 0),
      (988, 993, 105, -1, 0),
      (994, 999, -1, -1, 10),
      (1000, 1008, 108, -1, 0),
      (1009, 1017, 108, -1, 0),
      (1018, 1026, 108, -1, 0),
      (1027, 1029, -1, -1, 0),
      (1030, 1041, 112, -1, 0),
      (1042, 1053, 112, -1, 0),
      (1054, 1068, 114, -1, 0),
      (1069, 1083, 114, -1, 0),
      (1084, 1092, 112, -1, 0),
      (1093, 1101, 112, -1, 0),
      (1102, 1113, 118, -1, 0),
      (1114, 1125, 118, -1, 0),
      (1126, 1131, 112, -1, 11),
      (1132, 1140, 121, -1, 0),
      (1141, 1149, 121, -1, 0),
      (1150, 1158, 121, -1, 0),
      (1159, 1164, 112, -1, 12),
      (1165, 1173, 125, -1, 0),
      (1174, 1182, 125, -1, 0),
      (1183, 1191, 125, -1, 0),
      (1192, 1200, 112, -1, 0),
      (1201, 1209, 112, -1, 0),
      (1210, 1212, -1, -1, 0));


   procedure R_CONSONANT (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
   begin
      --  (, line 129
      In_Grouping_Backward (Z, G_Consonant, 2325, 2399, False, C);
      if C /= 0 then
         Result := False;
         return;
      end if;

      Result := True;
   end R_CONSONANT;

   procedure Stem (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_1 : Integer;
      v_3 : Integer;
   begin
      --  (, line 131
      --  test, line 132
      v_1 := Z.C;
      --  (, line 132
      --  next, line 132
      C := Skip_Utf8 (Z, 1);
      if C < 0 then
         Result := False;
         return;
      end if;
      Z.C := C;
      --  setmark p, line 132
      Z.I_P := Z.C;
      Z.C := v_1;
      Z.Lb := Z.C; Z.C := Z.L;      --  backwards, line 133

      --  (, line 133
      if Z.C < Z.I_P then
         Result := False;
         return;
      end if;
      v_3 := Z.Lb; Z.Lb := Z.I_P;
      --  (, line 139
      Z.Ket := Z.C;      --  [, line 139

      --  substring, line 139
      Find_Among_Backward (Z, A_0, Among_String, Among_Handler'Access, A);
      if A = 0 then
         Z.Lb := v_3;
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 139

      Z.Lb := v_3;
      --  delete, line 321
      Slice_Del (Z);
      Z.C := Z.Lb;

      Result := True;
   end Stem;

   procedure Among_Handler (Context : in out Stemmer.Context_Type'Class; Operation : in Operation_Index; Result : out Boolean) is
   begin
      case Operation is
         when 1 =>
            R_CONSONANT (Context_Type (Context), Result);
         when 2 =>
            R_CONSONANT (Context_Type (Context), Result);
         when 3 =>
            R_CONSONANT (Context_Type (Context), Result);
         when 4 =>
            R_CONSONANT (Context_Type (Context), Result);
         when 5 =>
            R_CONSONANT (Context_Type (Context), Result);
         when 6 =>
            R_CONSONANT (Context_Type (Context), Result);
         when 7 =>
            R_CONSONANT (Context_Type (Context), Result);
         when 8 =>
            R_CONSONANT (Context_Type (Context), Result);
         when 9 =>
            R_CONSONANT (Context_Type (Context), Result);
         when 10 =>
            R_CONSONANT (Context_Type (Context), Result);
         when 11 =>
            R_CONSONANT (Context_Type (Context), Result);
         when 12 =>
            R_CONSONANT (Context_Type (Context), Result);
         when others =>
            Result := False;
      end case;
   end Among_Handler;
end Stemmer.Hindi;

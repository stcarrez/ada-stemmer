--  Generated by Snowball 2.0.0 - https://snowballstem.org/

package body Stemmer.Greek is
   procedure R_Step7 (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step6 (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step5m (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step5l (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step5k (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step5j (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step5i (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step5h (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step5g (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step5f (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step5e (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step5d (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step5c (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step5b (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step5a (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step4 (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step3 (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step2d (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step2c (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step2b (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step2a (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step1 (Z : in out Context_Type; Result : out Boolean);
   procedure R_Steps10 (Z : in out Context_Type; Result : out Boolean);
   procedure R_Steps9 (Z : in out Context_Type; Result : out Boolean);
   procedure R_Steps8 (Z : in out Context_Type; Result : out Boolean);
   procedure R_Steps7 (Z : in out Context_Type; Result : out Boolean);
   procedure R_Steps6 (Z : in out Context_Type; Result : out Boolean);
   procedure R_Steps5 (Z : in out Context_Type; Result : out Boolean);
   procedure R_Steps4 (Z : in out Context_Type; Result : out Boolean);
   procedure R_Steps3 (Z : in out Context_Type; Result : out Boolean);
   procedure R_Steps2 (Z : in out Context_Type; Result : out Boolean);
   procedure R_Steps1 (Z : in out Context_Type; Result : out Boolean);
   procedure R_Has_min_length (Z : in out Context_Type; Result : out Boolean);
   procedure R_Tolower (Z : in out Context_Type; Result : out Boolean);

   G_V : constant Grouping_Array (0 .. 31) := (
      True, False, False, False, True, False, True, False,
      True, False, False, False, False, False, True, False,
      False, False, False, False, True, False, False, False,
      True, False, False, False, False, False, False, False
   );

   G_V2 : constant Grouping_Array (0 .. 31) := (
      True, False, False, False, True, False, True, False,
      True, False, False, False, False, False, True, False,
      False, False, False, False, False, False, False, False,
      True, False, False, False, False, False, False, False
   );
   Among_String : constant String := "" & "ς" & "Ά" & "Έ" & "Ή" & "Ί"
      & "ϊ" & "ϋ" & "Ό" & "ό" & "ύ" & "Ύ" & "ώ" & "Ώ" & "ΐ" & "Α" & "Β"
      & "Γ" & "Δ" & "Ε" & "Ζ" & "Η" & "Θ" & "Ι" & "Κ" & "Λ" & "Μ" & "Ν"
      & "Ξ" & "Ο" & "Π" & "Ρ" & "Σ" & "Τ" & "Υ" & "Φ" & "Χ" & "Ψ" & "Ω"
      & "Ϊ" & "Ϋ" & "ά" & "έ" & "ή" & "ί" & "ΰ" & "καθεστωσ" & "φωσ"
      & "περασ" & "τερασ" & "κρεασ" & "καθεστωτοσ"
      & "φωτοσ" & "περατοσ" & "τερατοσ" & "κρεατοσ"
      & "γεγονοτοσ" & "γεγονοσ" & "φαγιου" & "σκαγιου"
      & "σογιου" & "τατογιου" & "ολογιου" & "καθεστωτα"
      & "φωτα" & "περατα" & "τερατα" & "κρεατα"
      & "γεγονοτα" & "φαγια" & "σκαγια" & "σογια"
      & "τατογια" & "ολογια" & "περατη" & "καθεστωτων"
      & "φωτων" & "περατων" & "τερατων" & "κρεατων"
      & "γεγονοτων" & "φαγιων" & "σκαγιων" & "σογιων"
      & "τατογιων" & "ολογιων" & "πα" & "ξαναπα" & "επα"
      & "περιπα" & "αναμπα" & "εμπα" & "δανε" & "αθρο"
      & "συναθρο" & "π" & "ιμπ" & "ρ" & "πρ" & "μπρ" & "αρρ"
      & "γλυκυρ" & "πολυρ" & "αμπαρ" & "μαρ" & "γκρ"
      & "πιπερορ" & "βολβορ" & "γλυκορ" & "λου" & "β"
      & "βαθυρι" & "βαρκ" & "μαρκ" & "λ" & "μ" & "κορν"
      & "ιζεσ" & "ιζεισ" & "ιζω" & "ιζα" & "ιζατε" & "ιζετε"
      & "ιζε" & "ιζουμε" & "ιζαμε" & "ιζουνε" & "ιζανε"
      & "ιζει" & "ιζουν" & "ιζαν" & "σ" & "χ" & "υψ" & "ζω" & "βι"
      & "λι" & "αλ" & "εν" & "ωθηκεσ" & "ωθηκα" & "ωθηκατε"
      & "ωθηκε" & "ωθηκαμε" & "ωθηκανε" & "ωθηκαν"
      & "ξαναπα" & "επα" & "περιπα" & "αναμπα" & "εμπα"
      & "χαρτοπα" & "εξαρχα" & "πε" & "επε" & "μετεπε"
      & "εσε" & "κλε" & "εσωκλε" & "εκλε" & "απεκλε"
      & "αποκλε" & "δανε" & "αθρο" & "συναθρο" & "π" & "λαρ"
      & "δημοκρατ" & "αφ" & "γιγαντοαφ" & "γε" & "γκε" & "γκ"
      & "μ" & "πουκαμ" & "κομ" & "αν" & "ολο" & "ισεσ" & "ισα"
      & "ισε" & "ισατε" & "ισαμε" & "ισανε" & "ισαν"
      & "ξαναπα" & "επα" & "περιπα" & "αναμπα" & "εμπα"
      & "χαρτοπα" & "εξαρχα" & "πε" & "επε" & "μετεπε"
      & "εσε" & "κλε" & "εσωκλε" & "εκλε" & "απεκλε"
      & "αποκλε" & "δανε" & "αθρο" & "συναθρο" & "ισεισ"
      & "ισω" & "ισετε" & "ισουμε" & "ισουνε" & "ισει"
      & "ισουν" & "σε" & "ασε" & "πλε" & "κλε" & "εσωκλε"
      & "δανε" & "συναθρο" & "π" & "ευπ" & "απ" & "εμπ" & "γυρ"
      & "χρ" & "χωρ" & "αρ" & "αορ" & "χτ" & "αχτ" & "κτ" & "ακτ"
      & "σχ" & "ασχ" & "ταχ" & "υψ" & "ατα" & "φα" & "ηφα" & "λυγ"
      & "μεγ" & "ηδ" & "εχθ" & "καθ" & "σκ" & "κακ" & "μακ"
      & "κυλ" & "φιλ" & "μ" & "γεμ" & "αχν" & "ιστουσ"
      & "ιστεσ" & "ιστησ" & "ιστοσ" & "ιστου" & "ιστα"
      & "ιστε" & "ιστη" & "ιστοι" & "ιστων" & "ιστο" & "σε"
      & "μετασε" & "μικροσε" & "εγκλε" & "αποκλε" & "δανε"
      & "αντιδανε" & "τοπικ" & "σκεπτικ" & "γνωστικ"
      & "αγνωστικ" & "εκλεκτικ" & "ατομικ" & "εθνικ"
      & "θεατριν" & "αλεξανδριν" & "βυζαντιν" & "ισμουσ"
      & "ισμοσ" & "ισμου" & "ισμοι" & "ισμων" & "ισμο" & "σ"
      & "χ" & "αρακια" & "ουδακια" & "αρακι" & "ουδακι"
      & "κατραπ" & "ρ" & "βρ" & "λαβρ" & "αμβρ" & "μερ"
      & "ανθρ" & "κορ" & "σ" & "ναγκασ" & "μουστ" & "ρυ" & "φ"
      & "σφ" & "αλισφ" & "χ" & "βαμβ" & "σλοβ" & "τσεχοσλοβ"
      & "τζ" & "κ" & "σκ" & "καπακ" & "σοκ" & "πλ" & "φυλ"
      & "λουλ" & "μαλ" & "φαρμ" & "καιμ" & "κλιμ" & "σπαν"
      & "κον" & "π" & "πατερ" & "τοσ" & "νυφ" & "β" & "καρδ" & "ζ"
      & "σκ" & "βαλ" & "γλ" & "τριπολ" & "μακρυν" & "γιαν"
      & "ηγουμεν" & "κον" & "ιτσασ" & "ιτσεσ" & "ιτσα"
      & "ακια" & "αρακια" & "ακι" & "αρακι" & "ιτσων" & "ιρ"
      & "ψαλ" & "αιφν" & "ολο" & "ε" & "παιχν" & "ιδια"
      & "ιδιων" & "ιδιο" & "ρ" & "ιβ" & "δ" & "λυκ" & "φραγκ"
      & "οβελ" & "μην" & "ισκοσ" & "ισκου" & "ισκε" & "ισκο"
      & "αδεσ" & "αδων" & "μπαμπ" & "κυρ" & "πατερ" & "πεθερ"
      & "νταντ" & "γιαγι" & "θει" & "οκ" & "μαμ" & "μαν"
      & "εδεσ" & "εδων" & "κρασπ" & "υπ" & "δαπ" & "γηπ" & "ιπ"
      & "εμπ" & "οπ" & "μιλ" & "ουδεσ" & "ουδων" & "σπ" & "φρ"
      & "σ" & "λιχ" & "τραγ" & "φε" & "αρκ" & "σκ" & "καλιακ"
      & "λουλ" & "φλ" & "πεταλ" & "βελ" & "χν" & "πλεξ" & "εωσ"
      & "εων" & "π" & "παρ" & "δ" & "ιδ" & "θ" & "γαλ" & "ελ" & "ν"
      & "ιου" & "ια" & "ιων" & "ικου" & "ικα" & "ικων" & "ικο"
      & "καλπ" & "γερ" & "πλιατσ" & "πετσ" & "πιτσ" & "φυσ"
      & "χασ" & "μποσ" & "σερτ" & "μπαγιατ" & "νιτ"
      & "πικαντ" & "εξωδ" & "αδ" & "καταδ" & "συναδ"
      & "αντιδ" & "ενδ" & "υποδ" & "πρωτοδ" & "φυλοδ" & "ηθ"
      & "ανηθ" & "ξικ" & "μουλ" & "αλ" & "αμμοχαλ"
      & "συνομηλ" & "μπολ" & "βρωμ" & "τσαμ" & "μπαν"
      & "αμαν" & "καλλιν" & "ποστελν" & "φιλον" & "ουσαμε"
      & "ησαμε" & "αγαμε" & "ηκαμε" & "ηθηκαμε" & "αναπ"
      & "πικρ" & "αποστ" & "ποτ" & "χ" & "σιχ" & "βουβ" & "πεθ"
      & "ξεθ" & "αποθ" & "αποκ" & "ουλ" & "τρ" & "τσ"
      & "ουσανε" & "ησανε" & "ουντανε" & "ιουντανε"
      & "οντανε" & "ιοντανε" & "οτανε" & "ιοτανε"
      & "αγανε" & "ηκανε" & "ηθηκανε" & "π" & "σπ"
      & "πολυδαπ" & "αδαπ" & "χαμηλοδαπ" & "τσοπ" & "κοπ"
      & "υποκοπ" & "περιτρ" & "ουρ" & "ερ" & "βετερ" & "γερ"
      & "λουθηρ" & "κορμορ" & "σ" & "σαρακατσ" & "θυσ"
      & "βασ" & "πολισ" & "καστ" & "διατ" & "πλατ"
      & "τσαρλατ" & "τετ" & "πουριτ" & "σουλτ" & "ζωντ"
      & "μαιντ" & "φ" & "πενταρφ" & "κοιλαρφ" & "ορφ"
      & "διαφ" & "στεφ" & "φωτοστεφ" & "περηφ" & "υπερηφ"
      & "χ" & "πολυμηχ" & "αμηχ" & "βιομηχ"
      & "μικροβιομηχ" & "μεγλοβιομηχ" & "καπνοβιομηχ"
      & "λιχ" & "ταβ" & "νταβ" & "ψηλοταβ" & "λιβ" & "κλιβ"
      & "ξηροκλιβ" & "γ" & "ανοργ" & "ενοργ" & "αγ" & "τραγ"
      & "τσαγ" & "τσιγγ" & "ατσιγγ" & "αθιγγ" & "στεγ"
      & "απηγ" & "σιγ" & "καλπουζ" & "θ" & "μωαμεθ" & "πιθ"
      & "απιθ" & "βασκ" & "βραχυκ" & "δεκ" & "πελεκ" & "ικ"
      & "ανικ" & "βουλκ" & "πλ" & "διπλ" & "ψυχοπλ" & "λαοπλ"
      & "ουλ" & "γαλ" & "βαθυγαλ" & "καταγαλ" & "ολογαλ"
      & "καστελ" & "μελ" & "πορτολ" & "μ" & "δραδουμ"
      & "βραχμ" & "ολιγοδαμ" & "μουσουλμ" & "ν"
      & "αμερικαν" & "ησετε" & "πυρ" & "ευρ" & "χωρ" & "βαρ"
      & "βρ" & "αιρ" & "φορ" & "νετ" & "σχ" & "συνδ" & "ενδ"
      & "οδ" & "υπερθ" & "σθ" & "ευθ" & "ραθ" & "ταθ" & "διαθ"
      & "καθ" & "τιθ" & "εκθ" & "συνθ" & "ενθ" & "ροθ" & "αρκ"
      & "ωφελ" & "βολ" & "συν" & "αιν" & "πον" & "ρον" & "σερπ"
      & "κοπ" & "θαρρ" & "ντρ" & "αβαρ" & "εναρ" & "αβρ"
      & "μπορ" & "υ" & "συρφ" & "νιφ" & "παγ" & "δ" & "αδ" & "θ"
      & "αθ" & "σκ" & "τοκ" & "απλ" & "παρακαλ" & "σκελ" & "εμ"
      & "αν" & "βεν" & "βαρον" & "ωντασ" & "οντασ" & "ομαστε"
      & "ιομαστε" & "π" & "απ" & "ακαταπ" & "συμπ" & "ασυμπ"
      & "αμεταμφ" & "αρ" & "νισ" & "ζ" & "αλ" & "παρακαλ"
      & "εκτελ" & "μ" & "ξ" & "προ" & "ηθηκεσ" & "ηθηκα"
      & "ηθηκε" & "σφ" & "ναρθ" & "πιθ" & "οθ" & "σκουλ"
      & "σκωλ" & "θ" & "προσθ" & "παρακαταθ" & "διαθ"
      & "συνθ" & "ηκεσ" & "ηκα" & "ηκε" & "βλεπ" & "ποδαρ"
      & "πρωτ" & "κυματ" & "πανταχ" & "λαχ" & "φαγ" & "ληγ"
      & "φρυδ" & "μαντιλ" & "μαλλ" & "ομ" & "εκλιπ" & "ρ"
      & "αναρρ" & "ενδιαφερ" & "πατ" & "καθαρευ"
      & "δευτερευ" & "λεχ" & "τσα" & "χαδ" & "μεδ" & "λαμπιδ"
      & "δε" & "πλε" & "μεσαζ" & "δεσποζ" & "αιθ" & "φαρμακ"
      & "αγκ" & "ανηκ" & "λ" & "μ" & "αμ" & "βρομ" & "υποτειν"
      & "ουσεσ" & "ουσα" & "ουσε" & "ψοφ" & "ναυλοχ" & "ρπ"
      & "πρ" & "φρ" & "χορτ" & "σφ" & "οφ" & "λοχ" & "πελ" & "λλ"
      & "σμην" & "π" & "ασπ" & "ανυπ" & "αρτιπ" & "αειπ"
      & "συμπ" & "προσωποπ" & "σιδηροπ" & "δροσοπ"
      & "νεοπ" & "κροκαλοπ" & "ολοπ" & "ρ" & "τρ" & "ουρ"
      & "ασπαρ" & "χαρ" & "αχαρ" & "απερ" & "τ" & "ανυστ"
      & "αβαστ" & "προστ" & "αιμοστ" & "διατ" & "επιτ"
      & "συντ" & "υποτ" & "αποτ" & "ομοτ" & "νομοτ" & "ναυ"
      & "πολυφ" & "αφ" & "ξεφ" & "αδηφ" & "παμφ" & "αμαλλι"
      & "λ" & "αμαλ" & "μ" & "ουλαμ" & "εν" & "δερβεν" & "αγεσ"
      & "αγα" & "αγε" & "ησου" & "ησα" & "ησε" & "ν" & "επταν"
      & "δωδεκαν" & "χερσον" & "μεγαλον" & "ερημον"
      & "ηστε" & "χρ" & "δυσχρ" & "ευχρ" & "αχρ" & "κοινοχρ"
      & "παλιμψ" & "σβ" & "ασβ" & "απλ" & "αειμν" & "ουνε"
      & "ησουνε" & "ηθουνε" & "ρ" & "στραβομουτσ"
      & "κακομουτσ" & "σπι" & "ν" & "εξων" & "ουμε"
      & "ησουμε" & "ηθουμε" & "ασουσ" & "παρασουσ"
      & "αλλοσουσ" & "φ" & "χ" & "αζ" & "ωριοπλ" & "ματοσ"
      & "ματα" & "ματων" & "υσ" & "ουσ" & "ασ" & "εσ" & "ησεσ"
      & "ηδεσ" & "ησ" & "εισ" & "ηθεισ" & "οσ" & "υ" & "ου" & "ω"
      & "ησω" & "αω" & "ηθω" & "α" & "ιουμα" & "οσουνα"
      & "ιοσουνα" & "ομουνα" & "ιομουνα" & "ε" & "ιεσαστε"
      & "οσαστε" & "ιοσαστε" & "ουμαστε" & "ιουμαστε"
      & "ιεμαστε" & "ουσατε" & "ησατε" & "αγατε" & "ηκατε"
      & "ηθηκατε" & "ειτε" & "ηθειτε" & "η" & "ι" & "ασαι"
      & "εσαι" & "ιεσαι" & "αται" & "εται" & "ιεται"
      & "ουνται" & "ιουνται" & "ονται" & "ουμαι" & "αμαι"
      & "ιεμαι" & "ομαι" & "ει" & "ησει" & "αει" & "ηθει"
      & "οι" & "ουν" & "ησουν" & "οσουν" & "ιοσουν" & "ηθουν"
      & "ομουν" & "ιομουν" & "ων" & "ηδων" & "αν" & "ουσαν"
      & "οντουσαν" & "ιοντουσαν" & "ησαν" & "οσασταν"
      & "ιοσασταν" & "ομασταν" & "ιομασταν" & "ουνταν"
      & "ιουνταν" & "ονταν" & "ιονταν" & "οταν" & "ιοταν"
      & "αγαν" & "ηκαν" & "ηθηκαν" & "ο" & "εστερ" & "υτερ"
      & "ωτερ" & "οτερ" & "εστατ" & "υτατ" & "ωτατ" & "οτατ";

   A_0 : constant Among_Array_Type (0 .. 45) := (
      (1, 0, -1, 25),
      (1, 2, 0, 18),
      (3, 4, 0, 1),
      (5, 6, 0, 5),
      (7, 8, 0, 7),
      (9, 10, 0, 9),
      (11, 12, 0, 7),
      (13, 14, 0, 20),
      (15, 16, 0, 15),
      (17, 18, 0, 15),
      (19, 20, 0, 20),
      (21, 22, 0, 20),
      (23, 24, 0, 24),
      (25, 26, 0, 24),
      (27, 28, 0, 7),
      (29, 30, 0, 1),
      (31, 32, 0, 2),
      (33, 34, 0, 3),
      (35, 36, 0, 4),
      (37, 38, 0, 5),
      (39, 40, 0, 6),
      (41, 42, 0, 7),
      (43, 44, 0, 8),
      (45, 46, 0, 9),
      (47, 48, 0, 10),
      (49, 50, 0, 11),
      (51, 52, 0, 12),
      (53, 54, 0, 13),
      (55, 56, 0, 14),
      (57, 58, 0, 15),
      (59, 60, 0, 16),
      (61, 62, 0, 17),
      (63, 64, 0, 18),
      (65, 66, 0, 19),
      (67, 68, 0, 20),
      (69, 70, 0, 21),
      (71, 72, 0, 22),
      (73, 74, 0, 23),
      (75, 76, 0, 24),
      (77, 78, 0, 9),
      (79, 80, 0, 20),
      (81, 82, 0, 1),
      (83, 84, 0, 5),
      (85, 86, 0, 7),
      (87, 88, 0, 9),
      (89, 90, 0, 20));

   A_1 : constant Among_Array_Type (0 .. 39) := (
      (91, 106, -1, 10),
      (107, 112, -1, 9),
      (113, 122, -1, 7),
      (123, 132, -1, 8),
      (133, 142, -1, 6),
      (143, 162, -1, 10),
      (163, 172, -1, 9),
      (173, 186, -1, 7),
      (187, 200, -1, 8),
      (201, 214, -1, 6),
      (215, 232, -1, 11),
      (233, 246, -1, 11),
      (247, 258, -1, 1),
      (259, 272, -1, 2),
      (273, 284, -1, 4),
      (285, 300, -1, 5),
      (301, 314, -1, 3),
      (315, 332, -1, 10),
      (333, 340, -1, 9),
      (341, 352, -1, 7),
      (353, 364, -1, 8),
      (365, 376, -1, 6),
      (377, 392, -1, 11),
      (393, 402, -1, 1),
      (403, 414, -1, 2),
      (415, 424, -1, 4),
      (425, 438, -1, 5),
      (439, 450, -1, 3),
      (451, 462, -1, 7),
      (463, 482, -1, 10),
      (483, 492, -1, 9),
      (493, 506, -1, 7),
      (507, 520, -1, 8),
      (521, 534, -1, 6),
      (535, 552, -1, 11),
      (553, 564, -1, 1),
      (565, 578, -1, 2),
      (579, 590, -1, 4),
      (591, 606, -1, 5),
      (607, 620, -1, 3));

   A_2 : constant Among_Array_Type (0 .. 8) := (
      (621, 624, -1, 1),
      (625, 636, 0, 1),
      (637, 642, 0, 1),
      (643, 654, 0, 1),
      (655, 666, 0, 1),
      (667, 674, 0, 1),
      (675, 682, -1, 1),
      (683, 690, -1, 1),
      (691, 704, 7, 1));

   A_3 : constant Among_Array_Type (0 .. 21) := (
      (705, 706, -1, 1),
      (707, 712, 0, 1),
      (713, 714, -1, 1),
      (715, 718, 2, 1),
      (719, 724, 3, 1),
      (725, 730, 2, 1),
      (731, 742, 2, 1),
      (743, 752, 2, 1),
      (753, 762, 2, 1),
      (763, 768, 2, 1),
      (769, 774, 2, 1),
      (775, 788, 2, 1),
      (789, 800, 2, 1),
      (801, 812, 2, 1),
      (813, 818, -1, 1),
      (819, 820, -1, 1),
      (821, 832, -1, 1),
      (833, 840, -1, 1),
      (841, 848, -1, 1),
      (849, 850, -1, 1),
      (851, 852, -1, 1),
      (853, 860, -1, 1));

   A_4 : constant Among_Array_Type (0 .. 13) := (
      (861, 868, -1, 1),
      (869, 878, -1, 1),
      (879, 884, -1, 1),
      (885, 890, -1, 1),
      (891, 900, -1, 1),
      (901, 910, -1, 1),
      (911, 916, -1, 1),
      (917, 928, -1, 1),
      (929, 938, -1, 1),
      (939, 950, -1, 1),
      (951, 960, -1, 1),
      (961, 968, -1, 1),
      (969, 978, -1, 1),
      (979, 986, -1, 1));

   A_5 : constant Among_Array_Type (0 .. 7) := (
      (987, 988, -1, 1),
      (989, 990, -1, 1),
      (991, 994, -1, 1),
      (995, 998, -1, 1),
      (999, 1002, -1, 1),
      (1003, 1006, -1, 1),
      (1007, 1010, -1, 1),
      (1011, 1014, -1, 1));

   A_6 : constant Among_Array_Type (0 .. 6) := (
      (1015, 1026, -1, 1),
      (1027, 1036, -1, 1),
      (1037, 1050, -1, 1),
      (1051, 1060, -1, 1),
      (1061, 1074, -1, 1),
      (1075, 1088, -1, 1),
      (1089, 1100, -1, 1));

   A_7 : constant Among_Array_Type (0 .. 18) := (
      (1101, 1112, -1, 1),
      (1113, 1118, -1, 1),
      (1119, 1130, -1, 1),
      (1131, 1142, -1, 1),
      (1143, 1150, -1, 1),
      (1151, 1164, -1, 1),
      (1165, 1176, -1, 1),
      (1177, 1180, -1, 1),
      (1181, 1186, 7, 1),
      (1187, 1198, 8, 1),
      (1199, 1204, -1, 1),
      (1205, 1210, -1, 1),
      (1211, 1222, 11, 1),
      (1223, 1230, 11, 1),
      (1231, 1242, 13, 1),
      (1243, 1254, 11, 1),
      (1255, 1262, -1, 1),
      (1263, 1270, -1, 1),
      (1271, 1284, 17, 1));

   A_8 : constant Among_Array_Type (0 .. 12) := (
      (1285, 1286, -1, 1),
      (1287, 1292, -1, 1),
      (1293, 1308, -1, 1),
      (1309, 1312, -1, 1),
      (1313, 1330, 3, 1),
      (1331, 1334, -1, 1),
      (1335, 1340, -1, 1),
      (1341, 1344, -1, 1),
      (1345, 1346, -1, 1),
      (1347, 1358, 8, 1),
      (1359, 1364, 8, 1),
      (1365, 1368, -1, 1),
      (1369, 1374, -1, 1));

   A_9 : constant Among_Array_Type (0 .. 6) := (
      (1375, 1382, -1, 1),
      (1383, 1388, -1, 1),
      (1389, 1394, -1, 1),
      (1395, 1404, -1, 1),
      (1405, 1414, -1, 1),
      (1415, 1424, -1, 1),
      (1425, 1432, -1, 1));

   A_10 : constant Among_Array_Type (0 .. 18) := (
      (1433, 1444, -1, 1),
      (1445, 1450, -1, 1),
      (1451, 1462, -1, 1),
      (1463, 1474, -1, 1),
      (1475, 1482, -1, 1),
      (1483, 1496, -1, 1),
      (1497, 1508, -1, 1),
      (1509, 1512, -1, 1),
      (1513, 1518, 7, 1),
      (1519, 1530, 8, 1),
      (1531, 1536, -1, 1),
      (1537, 1542, -1, 1),
      (1543, 1554, 11, 1),
      (1555, 1562, 11, 1),
      (1563, 1574, 13, 1),
      (1575, 1586, 11, 1),
      (1587, 1594, -1, 1),
      (1595, 1602, -1, 1),
      (1603, 1616, 17, 1));

   A_11 : constant Among_Array_Type (0 .. 6) := (
      (1617, 1626, -1, 1),
      (1627, 1632, -1, 1),
      (1633, 1642, -1, 1),
      (1643, 1654, -1, 1),
      (1655, 1666, -1, 1),
      (1667, 1674, -1, 1),
      (1675, 1684, -1, 1));

   A_12 : constant Among_Array_Type (0 .. 6) := (
      (1685, 1688, -1, 1),
      (1689, 1694, 0, 1),
      (1695, 1700, -1, 1),
      (1701, 1706, -1, 1),
      (1707, 1718, 3, 1),
      (1719, 1726, -1, 1),
      (1727, 1740, -1, 1));

   A_13 : constant Among_Array_Type (0 .. 32) := (
      (1741, 1742, -1, 1),
      (1743, 1748, 0, 1),
      (1749, 1752, 0, 1),
      (1753, 1758, 0, 1),
      (1759, 1764, -1, 1),
      (1765, 1768, -1, 1),
      (1769, 1774, -1, 1),
      (1775, 1778, -1, 1),
      (1779, 1784, -1, 1),
      (1785, 1788, -1, 1),
      (1789, 1794, 9, 1),
      (1795, 1798, -1, 1),
      (1799, 1804, 11, 1),
      (1805, 1808, -1, 1),
      (1809, 1814, 13, 1),
      (1815, 1820, -1, 1),
      (1821, 1824, -1, 1),
      (1825, 1830, -1, 1),
      (1831, 1834, -1, 1),
      (1835, 1840, 18, 1),
      (1841, 1846, -1, 1),
      (1847, 1852, -1, 1),
      (1853, 1856, -1, 1),
      (1857, 1862, -1, 1),
      (1863, 1868, -1, 1),
      (1869, 1872, -1, 1),
      (1873, 1878, -1, 1),
      (1879, 1884, -1, 1),
      (1885, 1890, -1, 1),
      (1891, 1896, -1, 1),
      (1897, 1898, -1, 1),
      (1899, 1904, 30, 1),
      (1905, 1910, -1, 1));

   A_14 : constant Among_Array_Type (0 .. 10) := (
      (1911, 1922, -1, 1),
      (1923, 1932, -1, 1),
      (1933, 1942, -1, 1),
      (1943, 1952, -1, 1),
      (1953, 1962, -1, 1),
      (1963, 1970, -1, 1),
      (1971, 1978, -1, 1),
      (1979, 1986, -1, 1),
      (1987, 1996, -1, 1),
      (1997, 2006, -1, 1),
      (2007, 2014, -1, 1));

   A_15 : constant Among_Array_Type (0 .. 4) := (
      (2015, 2018, -1, 1),
      (2019, 2030, 0, 1),
      (2031, 2044, 0, 1),
      (2045, 2054, -1, 1),
      (2055, 2066, -1, 1));

   A_16 : constant Among_Array_Type (0 .. 1) := (
      (2067, 2074, -1, 1),
      (2075, 2090, 0, 1));

   A_17 : constant Among_Array_Type (0 .. 9) := (
      (2091, 2100, -1, 7),
      (2101, 2114, -1, 6),
      (2115, 2128, -1, 3),
      (2129, 2144, 2, 1),
      (2145, 2160, -1, 5),
      (2161, 2172, -1, 2),
      (2173, 2182, -1, 4),
      (2183, 2196, -1, 10),
      (2197, 2216, -1, 8),
      (2217, 2232, -1, 9));

   A_18 : constant Among_Array_Type (0 .. 5) := (
      (2233, 2244, -1, 1),
      (2245, 2254, -1, 1),
      (2255, 2264, -1, 1),
      (2265, 2274, -1, 1),
      (2275, 2284, -1, 1),
      (2285, 2292, -1, 1));

   A_19 : constant Among_Array_Type (0 .. 1) := (
      (2293, 2294, -1, 1),
      (2295, 2296, -1, 1));

   A_20 : constant Among_Array_Type (0 .. 3) := (
      (2297, 2308, -1, 1),
      (2309, 2322, -1, 1),
      (2323, 2332, -1, 1),
      (2333, 2344, -1, 1));

   A_21 : constant Among_Array_Type (0 .. 32) := (
      (2345, 2356, -1, 1),
      (2357, 2358, -1, 1),
      (2359, 2362, 1, 1),
      (2363, 2370, 2, 1),
      (2371, 2378, 2, 1),
      (2379, 2384, 1, 1),
      (2385, 2392, 1, 1),
      (2393, 2398, 1, 1),
      (2399, 2400, -1, 1),
      (2401, 2412, 8, 1),
      (2413, 2422, -1, 1),
      (2423, 2426, -1, 1),
      (2427, 2428, -1, 1),
      (2429, 2432, 12, 1),
      (2433, 2442, 13, 1),
      (2443, 2444, -1, 1),
      (2445, 2452, -1, 1),
      (2453, 2460, -1, 1),
      (2461, 2478, 17, 1),
      (2479, 2482, -1, 1),
      (2483, 2484, -1, 1),
      (2485, 2488, 20, 1),
      (2489, 2498, 20, 1),
      (2499, 2504, 20, 1),
      (2505, 2508, -1, 1),
      (2509, 2514, -1, 1),
      (2515, 2522, -1, 1),
      (2523, 2528, -1, 1),
      (2529, 2536, -1, 1),
      (2537, 2544, -1, 1),
      (2545, 2552, -1, 1),
      (2553, 2560, -1, 1),
      (2561, 2566, -1, 1));

   A_22 : constant Among_Array_Type (0 .. 14) := (
      (2567, 2568, -1, 1),
      (2569, 2578, -1, 1),
      (2579, 2584, -1, 1),
      (2585, 2590, -1, 1),
      (2591, 2592, -1, 1),
      (2593, 2600, -1, 1),
      (2601, 2602, -1, 1),
      (2603, 2606, -1, 1),
      (2607, 2612, -1, 1),
      (2613, 2616, -1, 1),
      (2617, 2628, -1, 1),
      (2629, 2640, -1, 1),
      (2641, 2648, -1, 1),
      (2649, 2662, -1, 1),
      (2663, 2668, -1, 1));

   A_23 : constant Among_Array_Type (0 .. 7) := (
      (2669, 2678, -1, 1),
      (2679, 2688, -1, 1),
      (2689, 2696, -1, 1),
      (2697, 2704, -1, 1),
      (2705, 2716, 3, 1),
      (2717, 2722, -1, 1),
      (2723, 2732, 5, 1),
      (2733, 2742, -1, 1));

   A_24 : constant Among_Array_Type (0 .. 3) := (
      (2743, 2746, -1, 1),
      (2747, 2752, -1, 1),
      (2753, 2760, -1, 1),
      (2761, 2766, -1, 1));

   A_25 : constant Among_Array_Type (0 .. 1) := (
      (2767, 2768, -1, 1),
      (2769, 2778, -1, 1));

   A_26 : constant Among_Array_Type (0 .. 2) := (
      (2779, 2786, -1, 1),
      (2787, 2796, -1, 1),
      (2797, 2804, -1, 1));

   A_27 : constant Among_Array_Type (0 .. 6) := (
      (2805, 2806, -1, 1),
      (2807, 2810, -1, 1),
      (2811, 2812, -1, 1),
      (2813, 2818, -1, 1),
      (2819, 2828, -1, 1),
      (2829, 2836, -1, 1),
      (2837, 2842, -1, 1));

   A_28 : constant Among_Array_Type (0 .. 3) := (
      (2843, 2852, -1, 1),
      (2853, 2862, -1, 1),
      (2863, 2870, -1, 1),
      (2871, 2878, -1, 1));

   A_29 : constant Among_Array_Type (0 .. 1) := (
      (2879, 2886, -1, 1),
      (2887, 2894, -1, 1));

   A_30 : constant Among_Array_Type (0 .. 9) := (
      (2895, 2904, -1, -1),
      (2905, 2910, -1, -1),
      (2911, 2920, -1, -1),
      (2921, 2930, -1, -1),
      (2931, 2940, -1, -1),
      (2941, 2950, -1, -1),
      (2951, 2956, -1, -1),
      (2957, 2960, -1, -1),
      (2961, 2966, -1, -1),
      (2967, 2972, -1, -1));

   A_31 : constant Among_Array_Type (0 .. 1) := (
      (2973, 2980, -1, 1),
      (2981, 2988, -1, 1));

   A_32 : constant Among_Array_Type (0 .. 7) := (
      (2989, 2998, -1, 1),
      (2999, 3002, -1, 1),
      (3003, 3008, -1, 1),
      (3009, 3014, -1, 1),
      (3015, 3018, -1, 1),
      (3019, 3024, -1, 1),
      (3025, 3028, -1, 1),
      (3029, 3034, -1, 1));

   A_33 : constant Among_Array_Type (0 .. 1) := (
      (3035, 3044, -1, 1),
      (3045, 3054, -1, 1));

   A_34 : constant Among_Array_Type (0 .. 14) := (
      (3055, 3058, -1, 1),
      (3059, 3062, -1, 1),
      (3063, 3064, -1, 1),
      (3065, 3070, -1, 1),
      (3071, 3078, -1, 1),
      (3079, 3082, -1, 1),
      (3083, 3088, -1, 1),
      (3089, 3092, -1, 1),
      (3093, 3104, -1, 1),
      (3105, 3112, -1, 1),
      (3113, 3116, -1, 1),
      (3117, 3126, -1, 1),
      (3127, 3132, -1, 1),
      (3133, 3136, -1, 1),
      (3137, 3144, -1, 1));

   A_35 : constant Among_Array_Type (0 .. 1) := (
      (3145, 3150, -1, 1),
      (3151, 3156, -1, 1));

   A_36 : constant Among_Array_Type (0 .. 7) := (
      (3157, 3158, -1, 1),
      (3159, 3164, -1, 1),
      (3165, 3166, -1, 1),
      (3167, 3170, 2, 1),
      (3171, 3172, -1, 1),
      (3173, 3178, -1, 1),
      (3179, 3182, -1, 1),
      (3183, 3184, -1, 1));

   A_37 : constant Among_Array_Type (0 .. 2) := (
      (3185, 3190, -1, 1),
      (3191, 3194, -1, 1),
      (3195, 3200, -1, 1));

   A_38 : constant Among_Array_Type (0 .. 3) := (
      (3201, 3208, -1, 1),
      (3209, 3214, -1, 1),
      (3215, 3222, -1, 1),
      (3223, 3228, -1, 1));

   A_39 : constant Among_Array_Type (0 .. 35) := (
      (3229, 3236, -1, 1),
      (3237, 3242, -1, 1),
      (3243, 3254, -1, 1),
      (3255, 3262, -1, 1),
      (3263, 3270, -1, 1),
      (3271, 3276, -1, 1),
      (3277, 3282, -1, 1),
      (3283, 3290, -1, 1),
      (3291, 3298, -1, 1),
      (3299, 3312, -1, 1),
      (3313, 3318, -1, 1),
      (3319, 3330, -1, 1),
      (3331, 3338, -1, 1),
      (3339, 3342, -1, 1),
      (3343, 3352, 13, 1),
      (3353, 3362, 13, 1),
      (3363, 3372, -1, 1),
      (3373, 3378, -1, 1),
      (3379, 3386, -1, 1),
      (3387, 3398, -1, 1),
      (3399, 3408, -1, 1),
      (3409, 3412, -1, 1),
      (3413, 3420, 21, 1),
      (3421, 3426, -1, 1),
      (3427, 3434, -1, 1),
      (3435, 3438, -1, 1),
      (3439, 3452, 25, 1),
      (3453, 3466, -1, 1),
      (3467, 3474, -1, 1),
      (3475, 3482, -1, 1),
      (3483, 3490, -1, 1),
      (3491, 3498, -1, 1),
      (3499, 3506, -1, 1),
      (3507, 3518, -1, 1),
      (3519, 3532, -1, 1),
      (3533, 3542, -1, 1));

   A_40 : constant Among_Array_Type (0 .. 4) := (
      (3543, 3554, -1, 1),
      (3555, 3564, -1, 1),
      (3565, 3574, -1, 1),
      (3575, 3584, -1, 1),
      (3585, 3598, 3, 1));

   A_41 : constant Among_Array_Type (0 .. 11) := (
      (3599, 3606, -1, 1),
      (3607, 3614, -1, 1),
      (3615, 3624, -1, 1),
      (3625, 3630, -1, 1),
      (3631, 3632, -1, 1),
      (3633, 3638, 4, 1),
      (3639, 3646, -1, 1),
      (3647, 3652, -1, 1),
      (3653, 3658, -1, 1),
      (3659, 3666, -1, 1),
      (3667, 3674, -1, 1),
      (3675, 3680, -1, 1));

   A_42 : constant Among_Array_Type (0 .. 1) := (
      (3681, 3684, -1, 1),
      (3685, 3688, -1, 1));

   A_43 : constant Among_Array_Type (0 .. 10) := (
      (3689, 3700, -1, 1),
      (3701, 3710, -1, 1),
      (3711, 3724, -1, 1),
      (3725, 3740, 2, 1),
      (3741, 3752, -1, 1),
      (3753, 3766, 4, 1),
      (3767, 3776, -1, 1),
      (3777, 3788, 6, 1),
      (3789, 3798, -1, 1),
      (3799, 3808, -1, 1),
      (3809, 3822, 9, 1));

   A_44 : constant Among_Array_Type (0 .. 94) := (
      (3823, 3824, -1, 1),
      (3825, 3828, 0, 1),
      (3829, 3842, 0, 1),
      (3843, 3850, 0, 1),
      (3851, 3868, 0, 1),
      (3869, 3876, 0, 1),
      (3877, 3882, 0, 1),
      (3883, 3894, 6, 1),
      (3895, 3906, -1, 1),
      (3907, 3912, -1, 1),
      (3913, 3916, -1, 1),
      (3917, 3926, 10, 1),
      (3927, 3932, 10, 1),
      (3933, 3944, -1, 1),
      (3945, 3956, -1, 1),
      (3957, 3958, -1, 1),
      (3959, 3974, 15, 1),
      (3975, 3980, 15, 1),
      (3981, 3986, 15, 1),
      (3987, 3996, 15, 1),
      (3997, 4004, -1, 1),
      (4005, 4012, -1, 1),
      (4013, 4020, -1, 1),
      (4021, 4034, -1, 1),
      (4035, 4040, -1, 1),
      (4041, 4052, -1, 1),
      (4053, 4062, -1, 1),
      (4063, 4070, -1, 1),
      (4071, 4080, -1, 1),
      (4081, 4082, -1, 1),
      (4083, 4096, 29, 1),
      (4097, 4110, 29, 1),
      (4111, 4116, 29, 1),
      (4117, 4124, 29, 1),
      (4125, 4132, 29, 1),
      (4133, 4148, 34, 1),
      (4149, 4158, 29, 1),
      (4159, 4170, 36, 1),
      (4171, 4172, -1, 1),
      (4173, 4186, 38, 1),
      (4187, 4194, 38, 1),
      (4195, 4206, 38, 1),
      (4207, 4228, 41, 1),
      (4229, 4250, 41, 1),
      (4251, 4272, 41, 1),
      (4273, 4278, 38, 1),
      (4279, 4284, -1, 1),
      (4285, 4292, 46, 1),
      (4293, 4306, 46, 1),
      (4307, 4312, -1, 1),
      (4313, 4320, 49, 1),
      (4321, 4336, 50, 1),
      (4337, 4338, -1, 1),
      (4339, 4348, 52, 1),
      (4349, 4358, 52, 1),
      (4359, 4362, 52, 1),
      (4363, 4370, 55, 1),
      (4371, 4378, 55, 1),
      (4379, 4388, 52, 1),
      (4389, 4400, 58, 1),
      (4401, 4410, 52, 1),
      (4411, 4418, 52, 1),
      (4419, 4426, 52, 1),
      (4427, 4432, 52, 1),
      (4433, 4446, -1, 1),
      (4447, 4448, -1, 1),
      (4449, 4460, 65, 1),
      (4461, 4466, 65, 1),
      (4467, 4474, 67, 1),
      (4475, 4482, -1, 1),
      (4483, 4494, -1, 1),
      (4495, 4500, -1, 1),
      (4501, 4510, -1, 1),
      (4511, 4514, -1, 1),
      (4515, 4522, 73, 1),
      (4523, 4532, -1, 1),
      (4533, 4536, -1, 1),
      (4537, 4544, 76, 1),
      (4545, 4556, 76, 1),
      (4557, 4566, 76, 1),
      (4567, 4572, -1, 1),
      (4573, 4578, -1, 1),
      (4579, 4592, 81, 1),
      (4593, 4606, 81, 1),
      (4607, 4618, 81, 1),
      (4619, 4630, -1, 1),
      (4631, 4636, -1, 1),
      (4637, 4648, -1, 1),
      (4649, 4650, -1, 1),
      (4651, 4664, 88, 1),
      (4665, 4674, 88, 1),
      (4675, 4690, 88, 1),
      (4691, 4706, 88, 1),
      (4707, 4708, -1, 1),
      (4709, 4724, 93, 1));

   A_45 : constant Among_Array_Type (0 .. 0) := (
      others => (4725, 4734, -1, 1));

   A_46 : constant Among_Array_Type (0 .. 30) := (
      (4735, 4740, -1, 1),
      (4741, 4746, -1, 1),
      (4747, 4752, -1, 1),
      (4753, 4758, -1, 1),
      (4759, 4762, -1, 1),
      (4763, 4768, -1, 1),
      (4769, 4774, -1, 1),
      (4775, 4780, -1, 1),
      (4781, 4784, -1, 1),
      (4785, 4792, -1, 1),
      (4793, 4798, -1, 1),
      (4799, 4802, -1, 1),
      (4803, 4812, -1, 1),
      (4813, 4816, -1, 1),
      (4817, 4822, -1, 1),
      (4823, 4828, -1, 1),
      (4829, 4834, -1, 1),
      (4835, 4842, -1, 1),
      (4843, 4848, -1, 1),
      (4849, 4854, -1, 1),
      (4855, 4860, -1, 1),
      (4861, 4868, -1, 1),
      (4869, 4874, -1, 1),
      (4875, 4880, -1, 1),
      (4881, 4886, -1, 1),
      (4887, 4894, -1, 1),
      (4895, 4900, -1, 1),
      (4901, 4906, -1, 1),
      (4907, 4912, -1, 1),
      (4913, 4918, -1, 1),
      (4919, 4924, -1, 1));

   A_47 : constant Among_Array_Type (0 .. 24) := (
      (4925, 4932, -1, 1),
      (4933, 4938, -1, 1),
      (4939, 4946, -1, 1),
      (4947, 4952, -1, 1),
      (4953, 4960, -1, 1),
      (4961, 4968, -1, 1),
      (4969, 4974, -1, 1),
      (4975, 4982, -1, 1),
      (4983, 4984, -1, 1),
      (4985, 4992, -1, 1),
      (4993, 4998, -1, 1),
      (4999, 5004, -1, 1),
      (5005, 5006, -1, 1),
      (5007, 5010, 12, 1),
      (5011, 5012, -1, 1),
      (5013, 5016, 14, 1),
      (5017, 5020, -1, 1),
      (5021, 5026, -1, 1),
      (5027, 5032, -1, 1),
      (5033, 5046, -1, 1),
      (5047, 5054, -1, 1),
      (5055, 5058, -1, 1),
      (5059, 5062, -1, 1),
      (5063, 5068, -1, 1),
      (5069, 5078, -1, 1));

   A_48 : constant Among_Array_Type (0 .. 1) := (
      (5079, 5088, -1, 1),
      (5089, 5098, -1, 1));

   A_49 : constant Among_Array_Type (0 .. 1) := (
      (5099, 5110, -1, 1),
      (5111, 5124, 0, 1));

   A_50 : constant Among_Array_Type (0 .. 5) := (
      (5125, 5126, -1, 1),
      (5127, 5130, 0, 1),
      (5131, 5142, 1, 1),
      (5143, 5150, 0, 1),
      (5151, 5160, 3, 1),
      (5161, 5174, -1, 1));

   A_51 : constant Among_Array_Type (0 .. 8) := (
      (5175, 5178, -1, 1),
      (5179, 5184, -1, 1),
      (5185, 5186, -1, 1),
      (5187, 5190, -1, 1),
      (5191, 5204, 3, 1),
      (5205, 5214, -1, 1),
      (5215, 5216, -1, 1),
      (5217, 5218, -1, 1),
      (5219, 5224, -1, 1));

   A_52 : constant Among_Array_Type (0 .. 2) := (
      (5225, 5236, -1, 1),
      (5237, 5246, -1, 1),
      (5247, 5256, -1, 1));

   A_53 : constant Among_Array_Type (0 .. 5) := (
      (5257, 5260, -1, 1),
      (5261, 5268, -1, 1),
      (5269, 5274, -1, 1),
      (5275, 5278, -1, 1),
      (5279, 5288, -1, 1),
      (5289, 5296, -1, 1));

   A_54 : constant Among_Array_Type (0 .. 4) := (
      (5297, 5298, -1, 1),
      (5299, 5308, 0, 1),
      (5309, 5326, 0, 1),
      (5327, 5334, 0, 1),
      (5335, 5342, 0, 1));

   A_55 : constant Among_Array_Type (0 .. 2) := (
      (5343, 5350, -1, 1),
      (5351, 5356, -1, 1),
      (5357, 5362, -1, 1));

   A_56 : constant Among_Array_Type (0 .. 11) := (
      (5363, 5370, -1, 1),
      (5371, 5380, -1, 1),
      (5381, 5388, -1, 1),
      (5389, 5398, -1, 1),
      (5399, 5410, -1, 1),
      (5411, 5416, -1, 1),
      (5417, 5422, -1, 1),
      (5423, 5428, -1, 1),
      (5429, 5436, -1, 1),
      (5437, 5448, -1, 1),
      (5449, 5456, -1, 1),
      (5457, 5460, -1, 1));

   A_57 : constant Among_Array_Type (0 .. 24) := (
      (5461, 5470, -1, 1),
      (5471, 5472, -1, 1),
      (5473, 5482, 1, 1),
      (5483, 5498, 1, 1),
      (5499, 5504, -1, 1),
      (5505, 5518, -1, 1),
      (5519, 5534, -1, 1),
      (5535, 5540, -1, 1),
      (5541, 5546, -1, 1),
      (5547, 5552, -1, 1),
      (5553, 5558, -1, 1),
      (5559, 5570, -1, 1),
      (5571, 5574, -1, 1),
      (5575, 5580, -1, 1),
      (5581, 5590, -1, 1),
      (5591, 5602, -1, 1),
      (5603, 5608, -1, 1),
      (5609, 5620, -1, 1),
      (5621, 5626, -1, 1),
      (5627, 5634, -1, 1),
      (5635, 5636, -1, 1),
      (5637, 5638, -1, 1),
      (5639, 5642, 21, 1),
      (5643, 5650, 21, 1),
      (5651, 5664, -1, 1));

   A_58 : constant Among_Array_Type (0 .. 2) := (
      (5665, 5674, -1, 1),
      (5675, 5682, -1, 1),
      (5683, 5690, -1, 1));

   A_59 : constant Among_Array_Type (0 .. 1) := (
      (5691, 5696, -1, -1),
      (5697, 5708, -1, -1));

   A_60 : constant Among_Array_Type (0 .. 9) := (
      (5709, 5712, -1, 1),
      (5713, 5716, -1, 1),
      (5717, 5720, -1, 1),
      (5721, 5728, -1, 1),
      (5729, 5732, -1, 1),
      (5733, 5736, -1, 1),
      (5737, 5742, -1, 1),
      (5743, 5748, -1, 1),
      (5749, 5752, -1, 1),
      (5753, 5760, -1, 1));

   A_61 : constant Among_Array_Type (0 .. 43) := (
      (5761, 5762, -1, 1),
      (5763, 5768, 0, 1),
      (5769, 5776, 0, 1),
      (5777, 5786, 0, 1),
      (5787, 5794, 0, 1),
      (5795, 5802, 0, 1),
      (5803, 5818, 0, 1),
      (5819, 5832, 0, 1),
      (5833, 5844, 0, 1),
      (5845, 5852, 0, 1),
      (5853, 5868, 0, 1),
      (5869, 5876, 0, 1),
      (5877, 5878, -1, 1),
      (5879, 5882, 12, 1),
      (5883, 5888, 12, 1),
      (5889, 5898, 12, 1),
      (5899, 5904, 12, 1),
      (5905, 5912, 16, 1),
      (5913, 5920, 12, 1),
      (5921, 5922, -1, 1),
      (5923, 5932, 19, 1),
      (5933, 5942, 19, 1),
      (5943, 5952, 19, 1),
      (5953, 5964, 19, 1),
      (5965, 5972, 19, 1),
      (5973, 5980, 19, 1),
      (5981, 5988, 19, 1),
      (5989, 5996, 19, 1),
      (5997, 6004, 19, 1),
      (6005, 6012, 19, 1),
      (6013, 6022, 29, 1),
      (6023, 6028, -1, 1),
      (6029, 6038, -1, 1),
      (6039, 6042, -1, 1),
      (6043, 6048, -1, 1),
      (6049, 6056, -1, 1),
      (6057, 6064, -1, 1),
      (6065, 6076, -1, 1),
      (6077, 6078, -1, 1),
      (6079, 6086, 38, 1),
      (6087, 6088, -1, 1),
      (6089, 6098, 40, 1),
      (6099, 6102, -1, 1),
      (6103, 6114, 42, 1));

   A_62 : constant Among_Array_Type (0 .. 2) := (
      (6115, 6122, -1, 1),
      (6123, 6128, -1, 1),
      (6129, 6134, -1, 1));

   A_63 : constant Among_Array_Type (0 .. 2) := (
      (6135, 6142, -1, 1),
      (6143, 6148, -1, 1),
      (6149, 6154, -1, 1));

   A_64 : constant Among_Array_Type (0 .. 5) := (
      (6155, 6156, -1, 1),
      (6157, 6166, 0, 1),
      (6167, 6180, 0, 1),
      (6181, 6192, 0, 1),
      (6193, 6206, 0, 1),
      (6207, 6218, 0, 1));

   A_65 : constant Among_Array_Type (0 .. 0) := (
      others => (6219, 6226, -1, 1));

   A_66 : constant Among_Array_Type (0 .. 9) := (
      (6227, 6230, -1, 1),
      (6231, 6240, 0, 1),
      (6241, 6248, 0, 1),
      (6249, 6254, 0, 1),
      (6255, 6268, 0, 1),
      (6269, 6280, -1, 1),
      (6281, 6284, -1, 1),
      (6285, 6290, 6, 1),
      (6291, 6296, -1, 1),
      (6297, 6306, -1, 1));

   A_67 : constant Among_Array_Type (0 .. 2) := (
      (6307, 6314, -1, 1),
      (6315, 6326, 0, 1),
      (6327, 6338, 0, 1));

   A_68 : constant Among_Array_Type (0 .. 5) := (
      (6339, 6340, -1, 1),
      (6341, 6362, -1, 1),
      (6363, 6380, -1, 1),
      (6381, 6386, -1, 1),
      (6387, 6388, -1, 1),
      (6389, 6396, 4, 1));

   A_69 : constant Among_Array_Type (0 .. 2) := (
      (6397, 6404, -1, 1),
      (6405, 6416, 0, 1),
      (6417, 6428, 0, 1));

   A_70 : constant Among_Array_Type (0 .. 6) := (
      (6429, 6438, -1, 1),
      (6439, 6454, 0, 1),
      (6455, 6470, -1, 1),
      (6471, 6472, -1, 1),
      (6473, 6474, -1, 1),
      (6475, 6478, -1, 1),
      (6479, 6490, -1, 1));

   A_71 : constant Among_Array_Type (0 .. 2) := (
      (6491, 6500, -1, 1),
      (6501, 6508, -1, 1),
      (6509, 6518, -1, 1));

   A_72 : constant Among_Array_Type (0 .. 83) := (
      (6519, 6522, -1, 1),
      (6523, 6528, 0, 1),
      (6529, 6532, -1, 1),
      (6533, 6536, -1, 1),
      (6537, 6544, 3, 1),
      (6545, 6552, 3, 1),
      (6553, 6556, -1, 1),
      (6557, 6562, -1, 1),
      (6563, 6572, 7, 1),
      (6573, 6576, -1, 1),
      (6577, 6578, -1, 1),
      (6579, 6582, 10, 1),
      (6583, 6584, -1, 1),
      (6585, 6590, 12, 1),
      (6591, 6594, 12, 1),
      (6595, 6600, 12, 1),
      (6601, 6602, -1, 1),
      (6603, 6612, 16, 1),
      (6613, 6624, 16, 1),
      (6625, 6638, 18, 1),
      (6639, 6650, 16, 1),
      (6651, 6664, 20, 1),
      (6665, 6666, -1, 1),
      (6667, 6680, 22, 1),
      (6681, 6692, 22, 1),
      (6693, 6706, 24, 1),
      (6707, 6720, 22, 1),
      (6721, 6736, 26, 1),
      (6737, 6750, 22, 1),
      (6751, 6762, 22, 1),
      (6763, 6772, 22, 1),
      (6773, 6782, 22, 1),
      (6783, 6792, 22, 1),
      (6793, 6806, 32, 1),
      (6807, 6814, 22, 1),
      (6815, 6826, 34, 1),
      (6827, 6828, -1, 1),
      (6829, 6830, -1, 1),
      (6831, 6838, 37, 1),
      (6839, 6846, 37, 1),
      (6847, 6856, 39, 1),
      (6857, 6864, 37, 1),
      (6865, 6872, 37, 1),
      (6873, 6882, 42, 1),
      (6883, 6894, 37, 1),
      (6895, 6908, 44, 1),
      (6909, 6918, 37, 1),
      (6919, 6928, 37, 1),
      (6929, 6936, 37, 1),
      (6937, 6946, 37, 1),
      (6947, 6954, 37, 1),
      (6955, 6958, 37, 1),
      (6959, 6966, 51, 1),
      (6967, 6972, 51, 1),
      (6973, 6980, 51, 1),
      (6981, 6984, 37, 1),
      (6985, 6990, -1, 1),
      (6991, 7000, 56, 1),
      (7001, 7010, 56, 1),
      (7011, 7022, 58, 1),
      (7023, 7032, 56, 1),
      (7033, 7042, 56, 1),
      (7043, 7054, 61, 1),
      (7055, 7058, -1, 1),
      (7059, 7066, 63, 1),
      (7067, 7070, -1, 1),
      (7071, 7080, 65, 1),
      (7081, 7096, 66, 1),
      (7097, 7114, 67, 1),
      (7115, 7122, 65, 1),
      (7123, 7136, 65, 1),
      (7137, 7152, 70, 1),
      (7153, 7166, 65, 1),
      (7167, 7182, 72, 1),
      (7183, 7194, 65, 1),
      (7195, 7208, 74, 1),
      (7209, 7218, 65, 1),
      (7219, 7230, 76, 1),
      (7231, 7238, 65, 1),
      (7239, 7248, 78, 1),
      (7249, 7256, 65, 1),
      (7257, 7264, 65, 1),
      (7265, 7276, 81, 1),
      (7277, 7278, -1, 1));

   A_73 : constant Among_Array_Type (0 .. 7) := (
      (7279, 7288, -1, 1),
      (7289, 7296, -1, 1),
      (7297, 7304, -1, 1),
      (7305, 7312, -1, 1),
      (7313, 7322, -1, 1),
      (7323, 7330, -1, 1),
      (7331, 7338, -1, 1),
      (7339, 7346, -1, 1));


   procedure R_Has_min_length (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
   begin
      --  (, line 108
      if not (Length (Z) >= 3) then
      Result := False;
      return;
      end if;

      Result := True;
   end R_Has_min_length;

   procedure R_Tolower (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_1 : Integer;
   begin
      --  (, line 112
      --  repeat, line 113

      <<lab0>>

      loop
         v_1 := Z.L - Z.C;
         --  (, line 113
         Z.Ket := Z.C;         --  [, line 114

         --  substring, line 114
         Find_Among_Backward (Z, A_0, Among_String, A);
         if A = 0 then
            goto lab1;
         end if;
         Z.Bra := Z.C;         --  ], line 114

         --  among, line 114
         case A is
            when 1 =>
               --  (, line 115
               --  <-, line 115
               Slice_From (Z, "α");
            when 2 =>
               --  (, line 116
               --  <-, line 116
               Slice_From (Z, "β");
            when 3 =>
               --  (, line 117
               --  <-, line 117
               Slice_From (Z, "γ");
            when 4 =>
               --  (, line 118
               --  <-, line 118
               Slice_From (Z, "δ");
            when 5 =>
               --  (, line 119
               --  <-, line 119
               Slice_From (Z, "ε");
            when 6 =>
               --  (, line 120
               --  <-, line 120
               Slice_From (Z, "ζ");
            when 7 =>
               --  (, line 121
               --  <-, line 121
               Slice_From (Z, "η");
            when 8 =>
               --  (, line 122
               --  <-, line 122
               Slice_From (Z, "θ");
            when 9 =>
               --  (, line 123
               --  <-, line 123
               Slice_From (Z, "ι");
            when 10 =>
               --  (, line 124
               --  <-, line 124
               Slice_From (Z, "κ");
            when 11 =>
               --  (, line 125
               --  <-, line 125
               Slice_From (Z, "λ");
            when 12 =>
               --  (, line 126
               --  <-, line 126
               Slice_From (Z, "μ");
            when 13 =>
               --  (, line 127
               --  <-, line 127
               Slice_From (Z, "ν");
            when 14 =>
               --  (, line 128
               --  <-, line 128
               Slice_From (Z, "ξ");
            when 15 =>
               --  (, line 129
               --  <-, line 129
               Slice_From (Z, "ο");
            when 16 =>
               --  (, line 130
               --  <-, line 130
               Slice_From (Z, "π");
            when 17 =>
               --  (, line 131
               --  <-, line 131
               Slice_From (Z, "ρ");
            when 18 =>
               --  (, line 132
               --  <-, line 132
               Slice_From (Z, "σ");
            when 19 =>
               --  (, line 133
               --  <-, line 133
               Slice_From (Z, "τ");
            when 20 =>
               --  (, line 134
               --  <-, line 134
               Slice_From (Z, "υ");
            when 21 =>
               --  (, line 135
               --  <-, line 135
               Slice_From (Z, "φ");
            when 22 =>
               --  (, line 136
               --  <-, line 136
               Slice_From (Z, "χ");
            when 23 =>
               --  (, line 137
               --  <-, line 137
               Slice_From (Z, "ψ");
            when 24 =>
               --  (, line 138
               --  <-, line 138
               Slice_From (Z, "ω");
            when 25 =>
               --  (, line 160
               --  next, line 160
               C := Skip_Utf8_Backward (Z, 1);               if C < 0 then
                  goto lab1;
               end if;
               Z.C := C;
            when others =>
               null;
         end case;
         goto lab0;

         <<lab1>>
         Z.C := Z.L - v_1;

         exit;
      end loop;

      Result := True;
   end R_Tolower;

   procedure R_Step1 (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
   begin
      --  (, line 165
      Z.Ket := Z.C;      --  [, line 166

      --  substring, line 166
      Find_Among_Backward (Z, A_1, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 166

      --  among, line 166
      case A is
         when 1 =>
            --  (, line 167
            --  <-, line 167
            Slice_From (Z, "φα");
         when 2 =>
            --  (, line 168
            --  <-, line 168
            Slice_From (Z, "σκα");
         when 3 =>
            --  (, line 169
            --  <-, line 169
            Slice_From (Z, "ολο");
         when 4 =>
            --  (, line 170
            --  <-, line 170
            Slice_From (Z, "σο");
         when 5 =>
            --  (, line 171
            --  <-, line 171
            Slice_From (Z, "τατο");
         when 6 =>
            --  (, line 172
            --  <-, line 172
            Slice_From (Z, "κρε");
         when 7 =>
            --  (, line 173
            --  <-, line 173
            Slice_From (Z, "περ");
         when 8 =>
            --  (, line 174
            --  <-, line 174
            Slice_From (Z, "τερ");
         when 9 =>
            --  (, line 175
            --  <-, line 175
            Slice_From (Z, "φω");
         when 10 =>
            --  (, line 176
            --  <-, line 176
            Slice_From (Z, "καθεστ");
         when 11 =>
            --  (, line 177
            --  <-, line 177
            Slice_From (Z, "γεγον");
         when others =>
            null;
      end case;
      --  unset test1, line 179
      Z.B_Test1 := False;

      Result := True;
   end R_Step1;

   procedure R_Steps1 (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_1 : Integer;
   begin
      --  (, line 182
      Z.Ket := Z.C;      --  [, line 183

      --  substring, line 183
      Find_Among_Backward (Z, A_4, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 183

      --  (, line 185
      --  delete, line 186
      Slice_Del (Z);
      --  unset test1, line 187
      Z.B_Test1 := False;
      --  or, line 191
      v_1 := Z.L - Z.C;
      --  (, line 188
      Z.Ket := Z.C;      --  [, line 188

      Z.Bra := Z.C;      --  ], line 188

      --  substring, line 188
      if Z.C - 3 <= Z.Lb or else Check_Among (Z, Z.C - 1, 5, 16#80220000#) then
         goto lab1;
         --  substring, line 188
      end if;
      Find_Among_Backward (Z, A_2, Among_String, A);
      if A = 0 then
         goto lab1;
      end if;
      --  atlimit, line 188
      if Z.C > Z.Lb then
         goto lab1;
      end if;
      --  (, line 190
      --  <-, line 190
      Slice_From (Z, "ι");
      goto lab0;

      <<lab1>>
      Z.C := Z.L - v_1;
      --  (, line 192
      Z.Ket := Z.C;      --  [, line 192

      Z.Bra := Z.C;      --  ], line 192

      --  substring, line 192
      Find_Among_Backward (Z, A_3, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 192
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  (, line 196
      --  <-, line 196
      Slice_From (Z, "ιζ");

      <<lab0>>

      Result := True;
   end R_Steps1;

   procedure R_Steps2 (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
   begin
      --  (, line 202
      Z.Ket := Z.C;      --  [, line 203

      --  substring, line 203
      Find_Among_Backward (Z, A_6, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 203

      --  (, line 204
      --  delete, line 205
      Slice_Del (Z);
      --  unset test1, line 206
      Z.B_Test1 := False;
      Z.Ket := Z.C;      --  [, line 207

      Z.Bra := Z.C;      --  ], line 207

      --  substring, line 207
      Find_Among_Backward (Z, A_5, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 207
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  (, line 208
      --  <-, line 208
      Slice_From (Z, "ων");

      Result := True;
   end R_Steps2;

   procedure R_Steps3 (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_1 : Integer;
   begin
      --  (, line 214
      Z.Ket := Z.C;      --  [, line 215

      --  substring, line 215
      Find_Among_Backward (Z, A_9, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 215

      --  (, line 216
      --  delete, line 217
      Slice_Del (Z);
      --  unset test1, line 218
      Z.B_Test1 := False;
      --  or, line 219
      v_1 := Z.L - Z.C;
      --  (, line 219
      --  literal, line 219
      C := Eq_S_Backward (Z, "ισα");
      if C = 0 then
         goto lab1;
      end if;
      Z.C := Z.C - C;
      --  atlimit, line 219
      if Z.C > Z.Lb then
         goto lab1;
      end if;
      --  <-, line 219
      Slice_From (Z, "ισ");
      goto lab0;

      <<lab1>>
      Z.C := Z.L - v_1;
      --  (, line 220
      Z.Ket := Z.C;      --  [, line 220

      Z.Bra := Z.C;      --  ], line 220

      --  substring, line 220
      if Z.C - 3 <= Z.Lb or else Check_Among (Z, Z.C - 1, 5, 16#80220000#) then
         goto lab2;
         --  substring, line 220
      end if;
      Find_Among_Backward (Z, A_7, Among_String, A);
      if A = 0 then
         goto lab2;
      end if;
      --  atlimit, line 220
      if Z.C > Z.Lb then
         goto lab2;
      end if;
      --  (, line 224
      --  <-, line 224
      Slice_From (Z, "ι");
      goto lab0;

      <<lab2>>
      Z.C := Z.L - v_1;
      --  (, line 226
      Z.Ket := Z.C;      --  [, line 226

      Z.Bra := Z.C;      --  ], line 226

      --  substring, line 226
      Find_Among_Backward (Z, A_8, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 226
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  (, line 229
      --  <-, line 229
      Slice_From (Z, "ισ");

      <<lab0>>

      Result := True;
   end R_Steps3;

   procedure R_Steps4 (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
   begin
      --  (, line 235
      Z.Ket := Z.C;      --  [, line 236

      --  substring, line 236
      Find_Among_Backward (Z, A_11, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 236

      --  (, line 237
      --  delete, line 238
      Slice_Del (Z);
      --  unset test1, line 239
      Z.B_Test1 := False;
      Z.Ket := Z.C;      --  [, line 240

      Z.Bra := Z.C;      --  ], line 240

      --  substring, line 240
      if Z.C - 3 <= Z.Lb or else Check_Among (Z, Z.C - 1, 5, 16#80220000#) then
         Result := False;
         return;
         --  substring, line 240
      end if;
      Find_Among_Backward (Z, A_10, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 240
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  (, line 244
      --  <-, line 244
      Slice_From (Z, "ι");

      Result := True;
   end R_Steps4;

   procedure R_Steps5 (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_1 : Integer;
   begin
      --  (, line 250
      Z.Ket := Z.C;      --  [, line 251

      --  substring, line 251
      Find_Among_Backward (Z, A_14, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 251

      --  (, line 253
      --  delete, line 254
      Slice_Del (Z);
      --  unset test1, line 255
      Z.B_Test1 := False;
      --  or, line 259
      v_1 := Z.L - Z.C;
      --  (, line 256
      Z.Ket := Z.C;      --  [, line 256

      Z.Bra := Z.C;      --  ], line 256

      --  substring, line 256
      if Z.C - 3 <= Z.Lb or else (Character'Pos (Z.P (Z.C - 1)) /= 181 and then Character'Pos (Z.P (Z.C - 1)) /= 191) then
         goto lab1;
         --  substring, line 256
      end if;
      Find_Among_Backward (Z, A_12, Among_String, A);
      if A = 0 then
         goto lab1;
      end if;
      --  atlimit, line 256
      if Z.C > Z.Lb then
         goto lab1;
      end if;
      --  (, line 258
      --  <-, line 258
      Slice_From (Z, "ι");
      goto lab0;

      <<lab1>>
      Z.C := Z.L - v_1;
      --  (, line 260
      Z.Ket := Z.C;      --  [, line 260

      Z.Bra := Z.C;      --  ], line 260

      --  substring, line 260
      Find_Among_Backward (Z, A_13, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 260
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  (, line 264
      --  <-, line 264
      Slice_From (Z, "ιστ");

      <<lab0>>

      Result := True;
   end R_Steps5;

   procedure R_Steps6 (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_1 : Integer;
   begin
      --  (, line 270
      Z.Ket := Z.C;      --  [, line 271

      --  substring, line 271
      Find_Among_Backward (Z, A_18, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 271

      --  (, line 272
      --  delete, line 273
      Slice_Del (Z);
      --  unset test1, line 274
      Z.B_Test1 := False;
      --  or, line 278
      v_1 := Z.L - Z.C;
      --  (, line 275
      Z.Ket := Z.C;      --  [, line 275

      Z.Bra := Z.C;      --  ], line 275

      --  substring, line 275
      if Z.C - 3 <= Z.Lb or else Character'Pos (Z.P (Z.C - 1)) /= 181 then
         goto lab1;
         --  substring, line 275
      end if;
      Find_Among_Backward (Z, A_15, Among_String, A);
      if A = 0 then
         goto lab1;
      end if;
      --  atlimit, line 275
      if Z.C > Z.Lb then
         goto lab1;
      end if;
      --  (, line 277
      --  <-, line 277
      Slice_From (Z, "ισμ");
      goto lab0;

      <<lab1>>
      Z.C := Z.L - v_1;
      --  (, line 279
      Z.Ket := Z.C;      --  [, line 279

      Z.Bra := Z.C;      --  ], line 279

      --  substring, line 279
      if Z.C - 7 <= Z.Lb or else Character'Pos (Z.P (Z.C - 1)) /= 181 then
         goto lab2;
         --  substring, line 279
      end if;
      Find_Among_Backward (Z, A_16, Among_String, A);
      if A = 0 then
         goto lab2;
      end if;
      --  atlimit, line 279
      if Z.C > Z.Lb then
         goto lab2;
      end if;
      --  (, line 281
      --  <-, line 281
      Slice_From (Z, "ι");
      goto lab0;

      <<lab2>>
      Z.C := Z.L - v_1;
      --  (, line 283
      Z.Ket := Z.C;      --  [, line 283

      --  substring, line 283
      if Z.C - 9 <= Z.Lb or else (Character'Pos (Z.P (Z.C - 1)) /= 186 and then Character'Pos (Z.P (Z.C - 1)) /= 189) then
         Result := False;
         return;
         --  substring, line 283
      end if;
      Find_Among_Backward (Z, A_17, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 283

      --  among, line 283
      case A is
         when 1 =>
            --  (, line 284
            --  <-, line 284
            Slice_From (Z, "αγνωστ");
         when 2 =>
            --  (, line 285
            --  <-, line 285
            Slice_From (Z, "ατομ");
         when 3 =>
            --  (, line 286
            --  <-, line 286
            Slice_From (Z, "γνωστ");
         when 4 =>
            --  (, line 287
            --  <-, line 287
            Slice_From (Z, "εθν");
         when 5 =>
            --  (, line 288
            --  <-, line 288
            Slice_From (Z, "εκλεκτ");
         when 6 =>
            --  (, line 289
            --  <-, line 289
            Slice_From (Z, "σκεπτ");
         when 7 =>
            --  (, line 290
            --  <-, line 290
            Slice_From (Z, "τοπ");
         when 8 =>
            --  (, line 291
            --  <-, line 291
            Slice_From (Z, "αλεξανδρ");
         when 9 =>
            --  (, line 292
            --  <-, line 292
            Slice_From (Z, "βυζαντ");
         when 10 =>
            --  (, line 293
            --  <-, line 293
            Slice_From (Z, "θεατρ");
         when others =>
            null;
      end case;

      <<lab0>>

      Result := True;
   end R_Steps6;

   procedure R_Steps7 (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
   begin
      --  (, line 299
      Z.Ket := Z.C;      --  [, line 300

      --  substring, line 300
      if Z.C - 9 <= Z.Lb or else (Character'Pos (Z.P (Z.C - 1)) /= 177 and then Character'Pos (Z.P (Z.C - 1)) /= 185) then
         Result := False;
         return;
         --  substring, line 300
      end if;
      Find_Among_Backward (Z, A_20, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 300

      --  (, line 301
      --  delete, line 302
      Slice_Del (Z);
      --  unset test1, line 303
      Z.B_Test1 := False;
      Z.Ket := Z.C;      --  [, line 304

      Z.Bra := Z.C;      --  ], line 304

      --  substring, line 304
      if Z.C - 1 <= Z.Lb or else (Character'Pos (Z.P (Z.C - 1)) /= 131 and then Character'Pos (Z.P (Z.C - 1)) /= 135) then
         Result := False;
         return;
         --  substring, line 304
      end if;
      Find_Among_Backward (Z, A_19, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 304
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  (, line 306
      --  <-, line 306
      Slice_From (Z, "αρακ");

      Result := True;
   end R_Steps7;

   procedure R_Steps8 (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_1 : Integer;
   begin
      --  (, line 312
      Z.Ket := Z.C;      --  [, line 313

      --  substring, line 313
      Find_Among_Backward (Z, A_23, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 313

      --  (, line 314
      --  delete, line 315
      Slice_Del (Z);
      --  unset test1, line 316
      Z.B_Test1 := False;
      --  or, line 323
      v_1 := Z.L - Z.C;
      --  (, line 317
      Z.Ket := Z.C;      --  [, line 317

      Z.Bra := Z.C;      --  ], line 317

      --  substring, line 317
      Find_Among_Backward (Z, A_21, Among_String, A);
      if A = 0 then
         goto lab1;
      end if;
      --  atlimit, line 317
      if Z.C > Z.Lb then
         goto lab1;
      end if;
      --  (, line 322
      --  <-, line 322
      Slice_From (Z, "ακ");
      goto lab0;

      <<lab1>>
      Z.C := Z.L - v_1;
      --  (, line 324
      Z.Ket := Z.C;      --  [, line 324

      Z.Bra := Z.C;      --  ], line 324

      --  substring, line 324
      Find_Among_Backward (Z, A_22, Among_String, A);
      if A = 0 then
         goto lab2;
      end if;
      --  atlimit, line 324
      if Z.C > Z.Lb then
         goto lab2;
      end if;
      --  (, line 327
      --  <-, line 327
      Slice_From (Z, "ιτσ");
      goto lab0;

      <<lab2>>
      Z.C := Z.L - v_1;
      --  (, line 329
      Z.Ket := Z.C;      --  [, line 329

      Z.Bra := Z.C;      --  ], line 329

      --  literal, line 329
      C := Eq_S_Backward (Z, "κορ");
      if C = 0 then
         Result := False;
         return;
      end if;
      Z.C := Z.C - C;
      --  <-, line 329
      Slice_From (Z, "ιτσ");

      <<lab0>>

      Result := True;
   end R_Steps8;

   procedure R_Steps9 (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_1 : Integer;
   begin
      --  (, line 334
      Z.Ket := Z.C;      --  [, line 335

      --  substring, line 335
      if Z.C - 7 <= Z.Lb or else Check_Among (Z, Z.C - 1, 5, 16#a0020000#) then
         Result := False;
         return;
         --  substring, line 335
      end if;
      Find_Among_Backward (Z, A_26, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 335

      --  (, line 336
      --  delete, line 337
      Slice_Del (Z);
      --  unset test1, line 338
      Z.B_Test1 := False;
      --  or, line 341
      v_1 := Z.L - Z.C;
      --  (, line 339
      Z.Ket := Z.C;      --  [, line 339

      Z.Bra := Z.C;      --  ], line 339

      --  substring, line 339
      Find_Among_Backward (Z, A_24, Among_String, A);
      if A = 0 then
         goto lab1;
      end if;
      --  atlimit, line 339
      if Z.C > Z.Lb then
         goto lab1;
      end if;
      --  (, line 340
      --  <-, line 340
      Slice_From (Z, "ιδ");
      goto lab0;

      <<lab1>>
      Z.C := Z.L - v_1;
      --  (, line 342
      Z.Ket := Z.C;      --  [, line 342

      Z.Bra := Z.C;      --  ], line 342

      --  substring, line 342
      if Z.C - 1 <= Z.Lb or else (Character'Pos (Z.P (Z.C - 1)) /= 181 and then Character'Pos (Z.P (Z.C - 1)) /= 189) then
         Result := False;
         return;
         --  substring, line 342
      end if;
      Find_Among_Backward (Z, A_25, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  (, line 343
      --  <-, line 343
      Slice_From (Z, "ιδ");

      <<lab0>>

      Result := True;
   end R_Steps9;

   procedure R_Steps10 (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
   begin
      --  (, line 349
      Z.Ket := Z.C;      --  [, line 350

      --  substring, line 350
      Find_Among_Backward (Z, A_28, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 350

      --  (, line 351
      --  delete, line 352
      Slice_Del (Z);
      --  unset test1, line 353
      Z.B_Test1 := False;
      Z.Ket := Z.C;      --  [, line 354

      Z.Bra := Z.C;      --  ], line 354

      --  substring, line 354
      Find_Among_Backward (Z, A_27, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 354
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  (, line 356
      --  <-, line 356
      Slice_From (Z, "ισκ");

      Result := True;
   end R_Steps10;

   procedure R_Step2a (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_1 : Integer;
   begin
      --  (, line 362
      Z.Ket := Z.C;      --  [, line 363

      --  substring, line 363
      if Z.C - 7 <= Z.Lb or else (Character'Pos (Z.P (Z.C - 1)) /= 131 and then Character'Pos (Z.P (Z.C - 1)) /= 189) then
         Result := False;
         return;
         --  substring, line 363
      end if;
      Find_Among_Backward (Z, A_29, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 363

      --  (, line 364
      --  delete, line 364
      Slice_Del (Z);
      --  not, line 366
      v_1 := Z.L - Z.C;
      --  (, line 366
      Z.Ket := Z.C;      --  [, line 366

      --  substring, line 366
      Find_Among_Backward (Z, A_30, Among_String, A);
      if A = 0 then
         goto lab0;
      end if;
      Z.Bra := Z.C;      --  ], line 366

      Result := False;
      return;

      <<lab0>>
      Z.C := Z.L - v_1;
      --  <+, line 369
      C := Z.C;
      Insert (Z, Z.C, Z.C, "αδ");
      Z.C := C;

      Result := True;
   end R_Step2a;

   procedure R_Step2b (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
   begin
      --  (, line 372
      Z.Ket := Z.C;      --  [, line 373

      --  substring, line 373
      if Z.C - 7 <= Z.Lb or else (Character'Pos (Z.P (Z.C - 1)) /= 131 and then Character'Pos (Z.P (Z.C - 1)) /= 189) then
         Result := False;
         return;
         --  substring, line 373
      end if;
      Find_Among_Backward (Z, A_31, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 373

      --  (, line 374
      --  delete, line 374
      Slice_Del (Z);
      Z.Ket := Z.C;      --  [, line 376

      Z.Bra := Z.C;      --  ], line 376

      --  substring, line 376
      if Z.C - 3 <= Z.Lb or else (Character'Pos (Z.P (Z.C - 1)) /= 128 and then Character'Pos (Z.P (Z.C - 1)) /= 187) then
         Result := False;
         return;
         --  substring, line 376
      end if;
      Find_Among_Backward (Z, A_32, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  (, line 377
      --  <-, line 377
      Slice_From (Z, "εδ");

      Result := True;
   end R_Step2b;

   procedure R_Step2c (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
   begin
      --  (, line 381
      Z.Ket := Z.C;      --  [, line 382

      --  substring, line 382
      if Z.C - 9 <= Z.Lb or else (Character'Pos (Z.P (Z.C - 1)) /= 131 and then Character'Pos (Z.P (Z.C - 1)) /= 189) then
         Result := False;
         return;
         --  substring, line 382
      end if;
      Find_Among_Backward (Z, A_33, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 382

      --  (, line 383
      --  delete, line 383
      Slice_Del (Z);
      Z.Ket := Z.C;      --  [, line 385

      Z.Bra := Z.C;      --  ], line 385

      --  substring, line 385
      Find_Among_Backward (Z, A_34, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  (, line 387
      --  <-, line 387
      Slice_From (Z, "ουδ");

      Result := True;
   end R_Step2c;

   procedure R_Step2d (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
   begin
      --  (, line 391
      Z.Ket := Z.C;      --  [, line 392

      --  substring, line 392
      if Z.C - 5 <= Z.Lb or else (Character'Pos (Z.P (Z.C - 1)) /= 131 and then Character'Pos (Z.P (Z.C - 1)) /= 189) then
         Result := False;
         return;
         --  substring, line 392
      end if;
      Find_Among_Backward (Z, A_35, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 392

      --  (, line 393
      --  delete, line 393
      Slice_Del (Z);
      --  unset test1, line 393
      Z.B_Test1 := False;
      Z.Ket := Z.C;      --  [, line 395

      Z.Bra := Z.C;      --  ], line 395

      --  substring, line 395
      Find_Among_Backward (Z, A_36, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 395
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  (, line 396
      --  <-, line 396
      Slice_From (Z, "ε");

      Result := True;
   end R_Step2d;

   procedure R_Step3 (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
   begin
      --  (, line 400
      Z.Ket := Z.C;      --  [, line 401

      --  substring, line 401
      Find_Among_Backward (Z, A_37, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 401

      --  (, line 402
      --  delete, line 402
      Slice_Del (Z);
      --  unset test1, line 402
      Z.B_Test1 := False;
      --  (, line 404
      Z.Ket := Z.C;      --  [, line 404

      Z.Bra := Z.C;      --  ], line 404

      In_Grouping_Backward (Z, G_V, 945, 969, False, C);
      if C /= 0 then
         Result := False;
         return;
      end if;
      --  <-, line 404
      Slice_From (Z, "ι");

      Result := True;
   end R_Step3;

   procedure R_Step4 (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_1 : Integer;
   begin
      --  (, line 407
      Z.Ket := Z.C;      --  [, line 408

      --  substring, line 408
      Find_Among_Backward (Z, A_38, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 408

      --  (, line 409
      --  delete, line 409
      Slice_Del (Z);
      --  unset test1, line 409
      Z.B_Test1 := False;
      --  or, line 411
      v_1 := Z.L - Z.C;
      --  (, line 411
      Z.Ket := Z.C;      --  [, line 411

      Z.Bra := Z.C;      --  ], line 411

      In_Grouping_Backward (Z, G_V, 945, 969, False, C);
      if C /= 0 then
         goto lab1;
      end if;
      --  <-, line 411
      Slice_From (Z, "ικ");
      goto lab0;

      <<lab1>>
      Z.C := Z.L - v_1;
      Z.Ket := Z.C;      --  [, line 412


      <<lab0>>
      Z.Bra := Z.C;      --  ], line 412

      --  substring, line 412
      Find_Among_Backward (Z, A_39, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 412
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  (, line 417
      --  <-, line 417
      Slice_From (Z, "ικ");

      Result := True;
   end R_Step4;

   procedure R_Step5a (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_1 : Integer;
      v_2 : Integer;
   begin
      --  (, line 421
      --  do, line 422
      v_1 := Z.L - Z.C;
      --  (, line 422
      --  literal, line 422
      C := Eq_S_Backward (Z, "αγαμε");
      if C = 0 then
         goto lab0;
      end if;
      Z.C := Z.C - C;
      --  atlimit, line 422
      if Z.C > Z.Lb then
         goto lab0;
      end if;
      --  <-, line 422
      Slice_From (Z, "αγαμ");

      <<lab0>>
      Z.C := Z.L - v_1;
      --  do, line 423
      v_2 := Z.L - Z.C;
      --  (, line 423
      Z.Ket := Z.C;      --  [, line 424

      --  substring, line 424
      if Z.C - 9 <= Z.Lb or else Character'Pos (Z.P (Z.C - 1)) /= 181 then
         goto lab1;
         --  substring, line 424
      end if;
      Find_Among_Backward (Z, A_40, Among_String, A);
      if A = 0 then
         goto lab1;
      end if;
      Z.Bra := Z.C;      --  ], line 424

      --  (, line 425
      --  delete, line 425
      Slice_Del (Z);
      --  unset test1, line 425
      Z.B_Test1 := False;

      <<lab1>>
      Z.C := Z.L - v_2;
      Z.Ket := Z.C;      --  [, line 428

      --  literal, line 428
      C := Eq_S_Backward (Z, "αμε");
      if C = 0 then
         Result := False;
         return;
      end if;
      Z.C := Z.C - C;
      Z.Bra := Z.C;      --  ], line 428

      --  delete, line 429
      Slice_Del (Z);
      --  unset test1, line 430
      Z.B_Test1 := False;
      Z.Ket := Z.C;      --  [, line 431

      Z.Bra := Z.C;      --  ], line 431

      --  substring, line 431
      Find_Among_Backward (Z, A_41, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 431
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  (, line 433
      --  <-, line 433
      Slice_From (Z, "αμ");

      Result := True;
   end R_Step5a;

   procedure R_Step5b (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_1 : Integer;
      v_2 : Integer;
   begin
      --  (, line 437
      --  do, line 438
      v_1 := Z.L - Z.C;
      --  (, line 438
      Z.Ket := Z.C;      --  [, line 439

      --  substring, line 439
      if Z.C - 9 <= Z.Lb or else Character'Pos (Z.P (Z.C - 1)) /= 181 then
         goto lab0;
         --  substring, line 439
      end if;
      Find_Among_Backward (Z, A_43, Among_String, A);
      if A = 0 then
         goto lab0;
      end if;
      Z.Bra := Z.C;      --  ], line 439

      --  (, line 441
      --  delete, line 442
      Slice_Del (Z);
      --  unset test1, line 443
      Z.B_Test1 := False;
      Z.Ket := Z.C;      --  [, line 444

      Z.Bra := Z.C;      --  ], line 444

      --  substring, line 444
      if Z.C - 3 <= Z.Lb or else (Character'Pos (Z.P (Z.C - 1)) /= 129 and then Character'Pos (Z.P (Z.C - 1)) /= 131) then
         goto lab0;
         --  substring, line 444
      end if;
      Find_Among_Backward (Z, A_42, Among_String, A);
      if A = 0 then
         goto lab0;
      end if;
      --  atlimit, line 444
      if Z.C > Z.Lb then
         goto lab0;
      end if;
      --  (, line 445
      --  <-, line 445
      Slice_From (Z, "αγαν");

      <<lab0>>
      Z.C := Z.L - v_1;
      Z.Ket := Z.C;      --  [, line 450

      --  literal, line 450
      C := Eq_S_Backward (Z, "ανε");
      if C = 0 then
         Result := False;
         return;
      end if;
      Z.C := Z.C - C;
      Z.Bra := Z.C;      --  ], line 450

      --  delete, line 451
      Slice_Del (Z);
      --  unset test1, line 452
      Z.B_Test1 := False;
      --  or, line 453
      v_2 := Z.L - Z.C;
      --  (, line 453
      Z.Ket := Z.C;      --  [, line 453

      Z.Bra := Z.C;      --  ], line 453

      In_Grouping_Backward (Z, G_V2, 945, 969, False, C);
      if C /= 0 then
         goto lab2;
      end if;
      --  <-, line 453
      Slice_From (Z, "αν");
      goto lab1;

      <<lab2>>
      Z.C := Z.L - v_2;
      Z.Ket := Z.C;      --  [, line 454


      <<lab1>>
      Z.Bra := Z.C;      --  ], line 454

      --  substring, line 454
      Find_Among_Backward (Z, A_44, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 454
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  (, line 471
      --  <-, line 471
      Slice_From (Z, "αν");

      Result := True;
   end R_Step5b;

   procedure R_Step5c (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_1 : Integer;
      v_2 : Integer;
   begin
      --  (, line 475
      --  do, line 476
      v_1 := Z.L - Z.C;
      --  (, line 476
      Z.Ket := Z.C;      --  [, line 477

      --  substring, line 477
      if Z.C - 9 <= Z.Lb or else Character'Pos (Z.P (Z.C - 1)) /= 181 then
         goto lab0;
         --  substring, line 477
      end if;
      Find_Among_Backward (Z, A_45, Among_String, A);
      if A = 0 then
         goto lab0;
      end if;
      Z.Bra := Z.C;      --  ], line 477

      --  (, line 478
      --  delete, line 478
      Slice_Del (Z);
      --  unset test1, line 478
      Z.B_Test1 := False;

      <<lab0>>
      Z.C := Z.L - v_1;
      Z.Ket := Z.C;      --  [, line 481

      --  literal, line 481
      C := Eq_S_Backward (Z, "ετε");
      if C = 0 then
         Result := False;
         return;
      end if;
      Z.C := Z.C - C;
      Z.Bra := Z.C;      --  ], line 481

      --  delete, line 482
      Slice_Del (Z);
      --  unset test1, line 483
      Z.B_Test1 := False;
      --  or, line 484
      v_2 := Z.L - Z.C;
      --  (, line 484
      Z.Ket := Z.C;      --  [, line 484

      Z.Bra := Z.C;      --  ], line 484

      In_Grouping_Backward (Z, G_V2, 945, 969, False, C);
      if C /= 0 then
         goto lab2;
      end if;
      --  <-, line 484
      Slice_From (Z, "ετ");
      goto lab1;

      <<lab2>>
      Z.C := Z.L - v_2;
      --  (, line 485
      Z.Ket := Z.C;      --  [, line 485

      Z.Bra := Z.C;      --  ], line 485

      --  substring, line 485
      Find_Among_Backward (Z, A_46, Among_String, A);
      if A = 0 then
         goto lab3;
      end if;
      --  (, line 489
      --  <-, line 489
      Slice_From (Z, "ετ");
      goto lab1;

      <<lab3>>
      Z.C := Z.L - v_2;
      Z.Ket := Z.C;      --  [, line 491


      <<lab1>>
      Z.Bra := Z.C;      --  ], line 491

      --  substring, line 491
      Find_Among_Backward (Z, A_47, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 491
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  (, line 495
      --  <-, line 495
      Slice_From (Z, "ετ");

      Result := True;
   end R_Step5c;

   procedure R_Step5d (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_1 : Integer;
   begin
      --  (, line 499
      Z.Ket := Z.C;      --  [, line 500

      --  substring, line 500
      if Z.C - 9 <= Z.Lb or else Character'Pos (Z.P (Z.C - 1)) /= 131 then
         Result := False;
         return;
         --  substring, line 500
      end if;
      Find_Among_Backward (Z, A_48, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 500

      --  (, line 501
      --  delete, line 502
      Slice_Del (Z);
      --  unset test1, line 503
      Z.B_Test1 := False;
      --  or, line 504
      v_1 := Z.L - Z.C;
      --  (, line 504
      Z.Ket := Z.C;      --  [, line 504

      Z.Bra := Z.C;      --  ], line 504

      --  literal, line 504
      C := Eq_S_Backward (Z, "αρχ");
      if C = 0 then
         goto lab1;
      end if;
      Z.C := Z.C - C;
      --  atlimit, line 504
      if Z.C > Z.Lb then
         goto lab1;
      end if;
      --  <-, line 504
      Slice_From (Z, "οντ");
      goto lab0;

      <<lab1>>
      Z.C := Z.L - v_1;
      --  (, line 505
      Z.Ket := Z.C;      --  [, line 505

      Z.Bra := Z.C;      --  ], line 505

      --  literal, line 505
      C := Eq_S_Backward (Z, "κρε");
      if C = 0 then
         Result := False;
         return;
      end if;
      Z.C := Z.C - C;
      --  <-, line 505
      Slice_From (Z, "ωντ");

      <<lab0>>

      Result := True;
   end R_Step5d;

   procedure R_Step5e (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
   begin
      --  (, line 510
      Z.Ket := Z.C;      --  [, line 511

      --  substring, line 511
      if Z.C - 11 <= Z.Lb or else Character'Pos (Z.P (Z.C - 1)) /= 181 then
         Result := False;
         return;
         --  substring, line 511
      end if;
      Find_Among_Backward (Z, A_49, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 511

      --  (, line 512
      --  delete, line 513
      Slice_Del (Z);
      --  unset test1, line 514
      Z.B_Test1 := False;
      --  (, line 515
      Z.Ket := Z.C;      --  [, line 515

      Z.Bra := Z.C;      --  ], line 515

      --  literal, line 515
      C := Eq_S_Backward (Z, "ον");
      if C = 0 then
         Result := False;
         return;
      end if;
      Z.C := Z.C - C;
      --  atlimit, line 515
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  <-, line 515
      Slice_From (Z, "ομαστ");

      Result := True;
   end R_Step5e;

   procedure R_Step5f (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_1 : Integer;
   begin
      --  (, line 520
      --  do, line 521
      v_1 := Z.L - Z.C;
      --  (, line 521
      Z.Ket := Z.C;      --  [, line 522

      --  literal, line 522
      C := Eq_S_Backward (Z, "ιεστε");
      if C = 0 then
         goto lab0;
      end if;
      Z.C := Z.C - C;
      Z.Bra := Z.C;      --  ], line 522

      --  delete, line 523
      Slice_Del (Z);
      --  unset test1, line 524
      Z.B_Test1 := False;
      Z.Ket := Z.C;      --  [, line 525

      Z.Bra := Z.C;      --  ], line 525

      --  substring, line 525
      if Z.C - 1 <= Z.Lb or else (Character'Pos (Z.P (Z.C - 1)) /= 128 and then Character'Pos (Z.P (Z.C - 1)) /= 134) then
         goto lab0;
         --  substring, line 525
      end if;
      Find_Among_Backward (Z, A_50, Among_String, A);
      if A = 0 then
         goto lab0;
      end if;
      --  atlimit, line 525
      if Z.C > Z.Lb then
         goto lab0;
      end if;
      --  (, line 526
      --  <-, line 526
      Slice_From (Z, "ιεστ");

      <<lab0>>
      Z.C := Z.L - v_1;
      Z.Ket := Z.C;      --  [, line 529

      --  literal, line 529
      C := Eq_S_Backward (Z, "εστε");
      if C = 0 then
         Result := False;
         return;
      end if;
      Z.C := Z.C - C;
      Z.Bra := Z.C;      --  ], line 529

      --  delete, line 530
      Slice_Del (Z);
      --  unset test1, line 531
      Z.B_Test1 := False;
      Z.Ket := Z.C;      --  [, line 532

      Z.Bra := Z.C;      --  ], line 532

      --  substring, line 532
      Find_Among_Backward (Z, A_51, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 532
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  (, line 534
      --  <-, line 534
      Slice_From (Z, "ιεστ");

      Result := True;
   end R_Step5f;

   procedure R_Step5g (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_1 : Integer;
      v_2 : Integer;
   begin
      --  (, line 538
      --  do, line 539
      v_1 := Z.L - Z.C;
      --  (, line 539
      Z.Ket := Z.C;      --  [, line 540

      --  substring, line 540
      Find_Among_Backward (Z, A_52, Among_String, A);
      if A = 0 then
         goto lab0;
      end if;
      Z.Bra := Z.C;      --  ], line 540

      --  (, line 541
      --  delete, line 541
      Slice_Del (Z);
      --  unset test1, line 541
      Z.B_Test1 := False;

      <<lab0>>
      Z.C := Z.L - v_1;
      Z.Ket := Z.C;      --  [, line 544

      --  substring, line 544
      Find_Among_Backward (Z, A_55, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 544

      --  (, line 545
      --  delete, line 546
      Slice_Del (Z);
      --  unset test1, line 547
      Z.B_Test1 := False;
      --  or, line 550
      v_2 := Z.L - Z.C;
      --  (, line 548
      Z.Ket := Z.C;      --  [, line 548

      Z.Bra := Z.C;      --  ], line 548

      --  substring, line 548
      Find_Among_Backward (Z, A_53, Among_String, A);
      if A = 0 then
         goto lab2;
      end if;
      --  (, line 549
      --  <-, line 549
      Slice_From (Z, "ηκ");
      goto lab1;

      <<lab2>>
      Z.C := Z.L - v_2;
      --  (, line 551
      Z.Ket := Z.C;      --  [, line 551

      Z.Bra := Z.C;      --  ], line 551

      --  substring, line 551
      if Z.C - 1 <= Z.Lb or else Character'Pos (Z.P (Z.C - 1)) /= 184 then
         Result := False;
         return;
         --  substring, line 551
      end if;
      Find_Among_Backward (Z, A_54, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 551
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  (, line 552
      --  <-, line 552
      Slice_From (Z, "ηκ");

      <<lab1>>

      Result := True;
   end R_Step5g;

   procedure R_Step5h (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_1 : Integer;
   begin
      --  (, line 558
      Z.Ket := Z.C;      --  [, line 559

      --  substring, line 559
      Find_Among_Backward (Z, A_58, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 559

      --  (, line 560
      --  delete, line 561
      Slice_Del (Z);
      --  unset test1, line 562
      Z.B_Test1 := False;
      --  or, line 567
      v_1 := Z.L - Z.C;
      --  (, line 563
      Z.Ket := Z.C;      --  [, line 563

      Z.Bra := Z.C;      --  ], line 563

      --  substring, line 563
      Find_Among_Backward (Z, A_56, Among_String, A);
      if A = 0 then
         goto lab1;
      end if;
      --  (, line 565
      --  <-, line 565
      Slice_From (Z, "ουσ");
      goto lab0;

      <<lab1>>
      Z.C := Z.L - v_1;
      --  (, line 568
      Z.Ket := Z.C;      --  [, line 568

      Z.Bra := Z.C;      --  ], line 568

      --  substring, line 568
      Find_Among_Backward (Z, A_57, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 568
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  (, line 572
      --  <-, line 572
      Slice_From (Z, "ουσ");

      <<lab0>>

      Result := True;
   end R_Step5h;

   procedure R_Step5i (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_1 : Integer;
      v_2 : Integer;
      v_3 : Integer;
   begin
      --  (, line 578
      Z.Ket := Z.C;      --  [, line 579

      --  substring, line 579
      Find_Among_Backward (Z, A_62, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 579

      --  (, line 580
      --  delete, line 581
      Slice_Del (Z);
      --  unset test1, line 582
      Z.B_Test1 := False;
      --  or, line 583
      v_1 := Z.L - Z.C;
      --  (, line 583
      Z.Ket := Z.C;      --  [, line 583

      Z.Bra := Z.C;      --  ], line 583

      --  literal, line 583
      C := Eq_S_Backward (Z, "κολλ");
      if C = 0 then
         goto lab1;
      end if;
      Z.C := Z.C - C;
      --  <-, line 583
      Slice_From (Z, "αγ");
      goto lab0;

      <<lab1>>
      Z.C := Z.L - v_1;
      --  (, line 583
      --  not, line 584
      v_2 := Z.L - Z.C;
      --  (, line 584
      Z.Ket := Z.C;      --  [, line 584

      --  substring, line 584
      if Z.C - 5 <= Z.Lb or else (Character'Pos (Z.P (Z.C - 1)) /= 134 and then Character'Pos (Z.P (Z.C - 1)) /= 135) then
         goto lab2;
         --  substring, line 584
      end if;
      Find_Among_Backward (Z, A_59, Among_String, A);
      if A = 0 then
         goto lab2;
      end if;
      Z.Bra := Z.C;      --  ], line 584

      Result := False;
      return;

      <<lab2>>
      Z.C := Z.L - v_2;
      --  or, line 588
      v_3 := Z.L - Z.C;
      --  (, line 585
      Z.Ket := Z.C;      --  [, line 585

      Z.Bra := Z.C;      --  ], line 585

      --  substring, line 585
      Find_Among_Backward (Z, A_60, Among_String, A);
      if A = 0 then
         goto lab4;
      end if;
      --  (, line 587
      --  <-, line 587
      Slice_From (Z, "αγ");
      goto lab3;

      <<lab4>>
      Z.C := Z.L - v_3;
      --  (, line 589
      Z.Ket := Z.C;      --  [, line 589

      Z.Bra := Z.C;      --  ], line 589

      --  substring, line 589
      Find_Among_Backward (Z, A_61, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 589
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  (, line 595
      --  <-, line 595
      Slice_From (Z, "αγ");

      <<lab3>>

      <<lab0>>

      Result := True;
   end R_Step5i;

   procedure R_Step5j (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
   begin
      --  (, line 602
      Z.Ket := Z.C;      --  [, line 603

      --  substring, line 603
      Find_Among_Backward (Z, A_63, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 603

      --  (, line 604
      --  delete, line 604
      Slice_Del (Z);
      --  unset test1, line 604
      Z.B_Test1 := False;
      Z.Ket := Z.C;      --  [, line 606

      Z.Bra := Z.C;      --  ], line 606

      --  substring, line 606
      if Z.C - 1 <= Z.Lb or else Character'Pos (Z.P (Z.C - 1)) /= 189 then
         Result := False;
         return;
         --  substring, line 606
      end if;
      Find_Among_Backward (Z, A_64, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 606
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  (, line 607
      --  <-, line 607
      Slice_From (Z, "ησ");

      Result := True;
   end R_Step5j;

   procedure R_Step5k (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
   begin
      --  (, line 611
      Z.Ket := Z.C;      --  [, line 612

      --  substring, line 612
      if Z.C - 7 <= Z.Lb or else Character'Pos (Z.P (Z.C - 1)) /= 181 then
         Result := False;
         return;
         --  substring, line 612
      end if;
      Find_Among_Backward (Z, A_65, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 612

      --  (, line 613
      --  delete, line 613
      Slice_Del (Z);
      --  unset test1, line 613
      Z.B_Test1 := False;
      Z.Ket := Z.C;      --  [, line 615

      Z.Bra := Z.C;      --  ], line 615

      --  substring, line 615
      Find_Among_Backward (Z, A_66, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 615
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  (, line 617
      --  <-, line 617
      Slice_From (Z, "ηστ");

      Result := True;
   end R_Step5k;

   procedure R_Step5l (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
   begin
      --  (, line 621
      Z.Ket := Z.C;      --  [, line 622

      --  substring, line 622
      if Z.C - 7 <= Z.Lb or else Character'Pos (Z.P (Z.C - 1)) /= 181 then
         Result := False;
         return;
         --  substring, line 622
      end if;
      Find_Among_Backward (Z, A_67, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 622

      --  (, line 623
      --  delete, line 623
      Slice_Del (Z);
      --  unset test1, line 623
      Z.B_Test1 := False;
      Z.Ket := Z.C;      --  [, line 625

      Z.Bra := Z.C;      --  ], line 625

      --  substring, line 625
      Find_Among_Backward (Z, A_68, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 625
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  (, line 626
      --  <-, line 626
      Slice_From (Z, "ουν");

      Result := True;
   end R_Step5l;

   procedure R_Step5m (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
   begin
      --  (, line 630
      Z.Ket := Z.C;      --  [, line 631

      --  substring, line 631
      if Z.C - 7 <= Z.Lb or else Character'Pos (Z.P (Z.C - 1)) /= 181 then
         Result := False;
         return;
         --  substring, line 631
      end if;
      Find_Among_Backward (Z, A_69, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 631

      --  (, line 632
      --  delete, line 632
      Slice_Del (Z);
      --  unset test1, line 632
      Z.B_Test1 := False;
      Z.Ket := Z.C;      --  [, line 634

      Z.Bra := Z.C;      --  ], line 634

      --  substring, line 634
      Find_Among_Backward (Z, A_70, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 634
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  (, line 636
      --  <-, line 636
      Slice_From (Z, "ουμ");

      Result := True;
   end R_Step5m;

   procedure R_Step6 (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_1 : Integer;
   begin
      --  (, line 640
      --  do, line 641
      v_1 := Z.L - Z.C;
      --  (, line 641
      Z.Ket := Z.C;      --  [, line 642

      --  substring, line 642
      Find_Among_Backward (Z, A_71, Among_String, A);
      if A = 0 then
         goto lab0;
      end if;
      Z.Bra := Z.C;      --  ], line 642

      --  (, line 643
      --  <-, line 643
      Slice_From (Z, "μα");

      <<lab0>>
      Z.C := Z.L - v_1;
      --  Boolean test test1, line 646
      if not Z.B_Test1 then
         Result := False;
         return;
      end if;
      Z.Ket := Z.C;      --  [, line 647

      --  substring, line 647
      Find_Among_Backward (Z, A_72, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 647

      --  (, line 657
      --  delete, line 657
      Slice_Del (Z);

      Result := True;
   end R_Step6;

   procedure R_Step7 (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
   begin
      --  (, line 661
      Z.Ket := Z.C;      --  [, line 662

      --  substring, line 662
      if Z.C - 7 <= Z.Lb or else (Character'Pos (Z.P (Z.C - 1)) /= 129 and then Character'Pos (Z.P (Z.C - 1)) /= 132) then
         Result := False;
         return;
         --  substring, line 662
      end if;
      Find_Among_Backward (Z, A_73, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 662

      --  (, line 663
      --  delete, line 663
      Slice_Del (Z);

      Result := True;
   end R_Step7;

   procedure Stem (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_1 : Integer;
      v_2 : Integer;
      v_3 : Integer;
      v_4 : Integer;
      v_5 : Integer;
      v_6 : Integer;
      v_7 : Integer;
      v_8 : Integer;
      v_9 : Integer;
      v_10 : Integer;
      v_11 : Integer;
      v_12 : Integer;
      v_13 : Integer;
      v_14 : Integer;
      v_15 : Integer;
      v_16 : Integer;
      v_17 : Integer;
      v_18 : Integer;
      v_19 : Integer;
      v_20 : Integer;
      v_21 : Integer;
      v_22 : Integer;
      v_23 : Integer;
      v_24 : Integer;
      v_25 : Integer;
      v_26 : Integer;
      v_27 : Integer;
      v_28 : Integer;
      v_29 : Integer;
      v_30 : Integer;
      v_31 : Integer;
      v_32 : Integer;
      v_33 : Integer;
   begin
      --  (, line 668
      Z.Lb := Z.C; Z.C := Z.L;      --  backwards, line 669

      --  (, line 669
      --  do, line 670
      v_1 := Z.L - Z.C;
      --  call tolower, line 670
      R_Tolower (Z, Result);
      Z.C := Z.L - v_1;
      --  call has_min_length, line 671
      R_Has_min_length (Z, Result);
      if not Result then
         Result := False;
         return;
      end if;
      --  set test1, line 672
      Z.B_Test1 := True;
      --  do, line 673
      v_2 := Z.L - Z.C;
      --  call step1, line 673
      R_Step1 (Z, Result);
      Z.C := Z.L - v_2;
      --  do, line 674
      v_3 := Z.L - Z.C;
      --  call steps1, line 674
      R_Steps1 (Z, Result);
      Z.C := Z.L - v_3;
      --  do, line 675
      v_4 := Z.L - Z.C;
      --  call steps2, line 675
      R_Steps2 (Z, Result);
      Z.C := Z.L - v_4;
      --  do, line 676
      v_5 := Z.L - Z.C;
      --  call steps3, line 676
      R_Steps3 (Z, Result);
      Z.C := Z.L - v_5;
      --  do, line 677
      v_6 := Z.L - Z.C;
      --  call steps4, line 677
      R_Steps4 (Z, Result);
      Z.C := Z.L - v_6;
      --  do, line 678
      v_7 := Z.L - Z.C;
      --  call steps5, line 678
      R_Steps5 (Z, Result);
      Z.C := Z.L - v_7;
      --  do, line 679
      v_8 := Z.L - Z.C;
      --  call steps6, line 679
      R_Steps6 (Z, Result);
      Z.C := Z.L - v_8;
      --  do, line 680
      v_9 := Z.L - Z.C;
      --  call steps7, line 680
      R_Steps7 (Z, Result);
      Z.C := Z.L - v_9;
      --  do, line 681
      v_10 := Z.L - Z.C;
      --  call steps8, line 681
      R_Steps8 (Z, Result);
      Z.C := Z.L - v_10;
      --  do, line 682
      v_11 := Z.L - Z.C;
      --  call steps9, line 682
      R_Steps9 (Z, Result);
      Z.C := Z.L - v_11;
      --  do, line 683
      v_12 := Z.L - Z.C;
      --  call steps10, line 683
      R_Steps10 (Z, Result);
      Z.C := Z.L - v_12;
      --  do, line 684
      v_13 := Z.L - Z.C;
      --  call step2a, line 684
      R_Step2a (Z, Result);
      Z.C := Z.L - v_13;
      --  do, line 685
      v_14 := Z.L - Z.C;
      --  call step2b, line 685
      R_Step2b (Z, Result);
      Z.C := Z.L - v_14;
      --  do, line 686
      v_15 := Z.L - Z.C;
      --  call step2c, line 686
      R_Step2c (Z, Result);
      Z.C := Z.L - v_15;
      --  do, line 687
      v_16 := Z.L - Z.C;
      --  call step2d, line 687
      R_Step2d (Z, Result);
      Z.C := Z.L - v_16;
      --  do, line 688
      v_17 := Z.L - Z.C;
      --  call step3, line 688
      R_Step3 (Z, Result);
      Z.C := Z.L - v_17;
      --  do, line 689
      v_18 := Z.L - Z.C;
      --  call step4, line 689
      R_Step4 (Z, Result);
      Z.C := Z.L - v_18;
      --  do, line 690
      v_19 := Z.L - Z.C;
      --  call step5a, line 690
      R_Step5a (Z, Result);
      Z.C := Z.L - v_19;
      --  do, line 691
      v_20 := Z.L - Z.C;
      --  call step5b, line 691
      R_Step5b (Z, Result);
      Z.C := Z.L - v_20;
      --  do, line 692
      v_21 := Z.L - Z.C;
      --  call step5c, line 692
      R_Step5c (Z, Result);
      Z.C := Z.L - v_21;
      --  do, line 693
      v_22 := Z.L - Z.C;
      --  call step5d, line 693
      R_Step5d (Z, Result);
      Z.C := Z.L - v_22;
      --  do, line 694
      v_23 := Z.L - Z.C;
      --  call step5e, line 694
      R_Step5e (Z, Result);
      Z.C := Z.L - v_23;
      --  do, line 695
      v_24 := Z.L - Z.C;
      --  call step5f, line 695
      R_Step5f (Z, Result);
      Z.C := Z.L - v_24;
      --  do, line 696
      v_25 := Z.L - Z.C;
      --  call step5g, line 696
      R_Step5g (Z, Result);
      Z.C := Z.L - v_25;
      --  do, line 697
      v_26 := Z.L - Z.C;
      --  call step5h, line 697
      R_Step5h (Z, Result);
      Z.C := Z.L - v_26;
      --  do, line 698
      v_27 := Z.L - Z.C;
      --  call step5j, line 698
      R_Step5j (Z, Result);
      Z.C := Z.L - v_27;
      --  do, line 699
      v_28 := Z.L - Z.C;
      --  call step5i, line 699
      R_Step5i (Z, Result);
      Z.C := Z.L - v_28;
      --  do, line 700
      v_29 := Z.L - Z.C;
      --  call step5k, line 700
      R_Step5k (Z, Result);
      Z.C := Z.L - v_29;
      --  do, line 701
      v_30 := Z.L - Z.C;
      --  call step5l, line 701
      R_Step5l (Z, Result);
      Z.C := Z.L - v_30;
      --  do, line 702
      v_31 := Z.L - Z.C;
      --  call step5m, line 702
      R_Step5m (Z, Result);
      Z.C := Z.L - v_31;
      --  do, line 703
      v_32 := Z.L - Z.C;
      --  call step6, line 703
      R_Step6 (Z, Result);
      Z.C := Z.L - v_32;
      --  do, line 704
      v_33 := Z.L - Z.C;
      --  call step7, line 704
      R_Step7 (Z, Result);
      Z.C := Z.L - v_33;
      Z.C := Z.Lb;

      Result := True;
   end Stem;
end Stemmer.Greek;

--  Generated by Snowball 2.2.0 - https://snowballstem.org/

package body Stemmer.Greek is

   pragma Style_Checks ("-mr");
   pragma Warnings (Off, "*variable*is never read and never assigned*");
   pragma Warnings (Off, "*mode could be*instead of*");
   pragma Warnings (Off, "*formal parameter.*is not modified*");
   pragma Warnings (Off, "*this line is too long*");
   pragma Warnings (Off, "*is not referenced*");

   procedure R_Step7 (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step6 (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step5m (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step5l (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step5k (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step5j (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step5i (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step5h (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step5g (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step5f (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step5e (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step5d (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step5c (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step5b (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step5a (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step4 (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step3 (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step2d (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step2c (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step2b (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step2a (Z : in out Context_Type; Result : out Boolean);
   procedure R_Step1 (Z : in out Context_Type; Result : out Boolean);
   procedure R_Steps10 (Z : in out Context_Type; Result : out Boolean);
   procedure R_Steps9 (Z : in out Context_Type; Result : out Boolean);
   procedure R_Steps8 (Z : in out Context_Type; Result : out Boolean);
   procedure R_Steps7 (Z : in out Context_Type; Result : out Boolean);
   procedure R_Steps6 (Z : in out Context_Type; Result : out Boolean);
   procedure R_Steps5 (Z : in out Context_Type; Result : out Boolean);
   procedure R_Steps4 (Z : in out Context_Type; Result : out Boolean);
   procedure R_Steps3 (Z : in out Context_Type; Result : out Boolean);
   procedure R_Steps2 (Z : in out Context_Type; Result : out Boolean);
   procedure R_Steps1 (Z : in out Context_Type; Result : out Boolean);
   procedure R_Has_min_length (Z : in out Context_Type; Result : out Boolean);
   procedure R_Tolower (Z : in out Context_Type; Result : out Boolean);

   G_V : constant Grouping_Array (0 .. 31) := (
      True, False, False, False, True, False, True, False,
      True, False, False, False, False, False, True, False,
      False, False, False, False, True, False, False, False,
      True, False, False, False, False, False, False, False
   );

   G_V2 : constant Grouping_Array (0 .. 31) := (
      True, False, False, False, True, False, True, False,
      True, False, False, False, False, False, True, False,
      False, False, False, False, False, False, False, False,
      True, False, False, False, False, False, False, False
   );
   Among_String : constant String := "" & "ς" & "Ά" & "Έ" & "Ή" & "Ί"
      & "ϊ" & "ϋ" & "Ό" & "ό" & "ύ" & "Ύ" & "ώ" & "Ώ" & "ΐ" & "Α" & "Β"
      & "Γ" & "Δ" & "Ε" & "Ζ" & "Η" & "Θ" & "Ι" & "Κ" & "Λ" & "Μ" & "Ν"
      & "Ξ" & "Ο" & "Π" & "Ρ" & "Σ" & "Τ" & "Υ" & "Φ" & "Χ" & "Ψ" & "Ω"
      & "Ϊ" & "Ϋ" & "ά" & "έ" & "ή" & "ί" & "ΰ" & "καθεστωσ" & "φωσ"
      & "περασ" & "τερασ" & "κρεασ" & "καθεστωτοσ"
      & "φωτοσ" & "περατοσ" & "τερατοσ" & "κρεατοσ"
      & "γεγονοτοσ" & "γεγονοσ" & "φαγιου" & "σκαγιου"
      & "σογιου" & "τατογιου" & "ολογιου" & "καθεστωτα"
      & "φωτα" & "περατα" & "τερατα" & "κρεατα"
      & "γεγονοτα" & "φαγια" & "σκαγια" & "σογια"
      & "τατογια" & "ολογια" & "περατη" & "καθεστωτων"
      & "φωτων" & "περατων" & "τερατων" & "κρεατων"
      & "γεγονοτων" & "φαγιων" & "σκαγιων" & "σογιων"
      & "τατογιων" & "ολογιων" & "π" & "ιμπ" & "ρ" & "πρ"
      & "μπρ" & "αρρ" & "γλυκυρ" & "πολυρ" & "αμπαρ" & "μαρ"
      & "γκρ" & "πιπερορ" & "βολβορ" & "γλυκορ" & "λου"
      & "πα" & "ξαναπα" & "επα" & "περιπα" & "αναμπα"
      & "εμπα" & "β" & "δανε" & "βαθυρι" & "βαρκ" & "μαρκ"
      & "λ" & "μ" & "κορν" & "αθρο" & "συναθρο" & "ιζεσ"
      & "ιζεισ" & "ιζω" & "ιζα" & "ιζατε" & "ιζετε" & "ιζε"
      & "ιζουμε" & "ιζαμε" & "ιζουνε" & "ιζανε" & "ιζει"
      & "ιζουν" & "ιζαν" & "σ" & "χ" & "υψ" & "ζω" & "βι" & "λι"
      & "αλ" & "εν" & "ωθηκεσ" & "ωθηκα" & "ωθηκατε"
      & "ωθηκε" & "ωθηκαμε" & "ωθηκανε" & "ωθηκαν" & "π"
      & "λαρ" & "δημοκρατ" & "αφ" & "γιγαντοαφ" & "ξαναπα"
      & "επα" & "περιπα" & "αναμπα" & "εμπα" & "χαρτοπα"
      & "εξαρχα" & "πε" & "επε" & "μετεπε" & "εσε" & "γε"
      & "γκε" & "κλε" & "εσωκλε" & "εκλε" & "απεκλε"
      & "αποκλε" & "δανε" & "γκ" & "μ" & "πουκαμ" & "κομ"
      & "αν" & "αθρο" & "συναθρο" & "ολο" & "ισεσ" & "ισα"
      & "ισε" & "ισατε" & "ισαμε" & "ισανε" & "ισαν"
      & "ξαναπα" & "επα" & "περιπα" & "αναμπα" & "εμπα"
      & "χαρτοπα" & "εξαρχα" & "πε" & "επε" & "μετεπε"
      & "εσε" & "κλε" & "εσωκλε" & "εκλε" & "απεκλε"
      & "αποκλε" & "δανε" & "αθρο" & "συναθρο" & "ισεισ"
      & "ισω" & "ισετε" & "ισουμε" & "ισουνε" & "ισει"
      & "ισουν" & "π" & "ευπ" & "απ" & "εμπ" & "γυρ" & "χρ"
      & "χωρ" & "αρ" & "αορ" & "χτ" & "αχτ" & "κτ" & "ακτ" & "σχ"
      & "ασχ" & "ταχ" & "υψ" & "ατα" & "φα" & "ηφα" & "λυγ"
      & "μεγ" & "ηδ" & "σε" & "ασε" & "πλε" & "κλε" & "εσωκλε"
      & "δανε" & "εχθ" & "καθ" & "σκ" & "κακ" & "μακ" & "κυλ"
      & "φιλ" & "μ" & "γεμ" & "αχν" & "συναθρο" & "ιστουσ"
      & "ιστεσ" & "ιστησ" & "ιστοσ" & "ιστου" & "ιστα"
      & "ιστε" & "ιστη" & "ιστοι" & "ιστων" & "ιστο" & "σε"
      & "μετασε" & "μικροσε" & "εγκλε" & "αποκλε" & "δανε"
      & "αντιδανε" & "τοπικ" & "σκεπτικ" & "γνωστικ"
      & "αγνωστικ" & "εκλεκτικ" & "ατομικ" & "εθνικ"
      & "θεατριν" & "αλεξανδριν" & "βυζαντιν" & "ισμουσ"
      & "ισμοσ" & "ισμου" & "ισμοι" & "ισμων" & "ισμο" & "σ"
      & "χ" & "αρακια" & "ουδακια" & "αρακι" & "ουδακι" & "π"
      & "κατραπ" & "ρ" & "βρ" & "λαβρ" & "αμβρ" & "πατερ"
      & "μερ" & "ανθρ" & "κορ" & "σ" & "ναγκασ" & "τοσ"
      & "μουστ" & "ρυ" & "φ" & "σφ" & "αλισφ" & "νυφ" & "χ" & "β"
      & "βαμβ" & "σλοβ" & "τσεχοσλοβ" & "καρδ" & "ζ" & "τζ"
      & "κ" & "σκ" & "καπακ" & "σοκ" & "πλ" & "φυλ" & "λουλ"
      & "βαλ" & "μαλ" & "γλ" & "τριπολ" & "φαρμ" & "καιμ"
      & "κλιμ" & "μακρυν" & "σπαν" & "γιαν" & "ηγουμεν"
      & "κον" & "ιτσασ" & "ιτσεσ" & "ιτσα" & "ακια"
      & "αρακια" & "ακι" & "αρακι" & "ιτσων" & "ιρ" & "ψαλ"
      & "αιφν" & "ολο" & "ε" & "παιχν" & "ιδια" & "ιδιων"
      & "ιδιο" & "ρ" & "ιβ" & "δ" & "λυκ" & "φραγκ" & "οβελ"
      & "μην" & "ισκοσ" & "ισκου" & "ισκε" & "ισκο" & "αδεσ"
      & "αδων" & "μπαμπ" & "κυρ" & "πατερ" & "πεθερ"
      & "νταντ" & "γιαγι" & "θει" & "οκ" & "μαμ" & "μαν"
      & "εδεσ" & "εδων" & "κρασπ" & "υπ" & "δαπ" & "γηπ" & "ιπ"
      & "εμπ" & "οπ" & "μιλ" & "ουδεσ" & "ουδων" & "σπ" & "φρ"
      & "σ" & "λιχ" & "τραγ" & "φε" & "αρκ" & "σκ" & "καλιακ"
      & "λουλ" & "φλ" & "πεταλ" & "βελ" & "χν" & "πλεξ" & "εωσ"
      & "εων" & "π" & "παρ" & "δ" & "ιδ" & "θ" & "γαλ" & "ελ" & "ν"
      & "ιου" & "ια" & "ιων" & "ικου" & "ικα" & "ικων" & "ικο"
      & "καλπ" & "γερ" & "πλιατσ" & "πετσ" & "πιτσ" & "φυσ"
      & "χασ" & "μποσ" & "σερτ" & "μπαγιατ" & "νιτ"
      & "πικαντ" & "εξωδ" & "αδ" & "καταδ" & "συναδ"
      & "αντιδ" & "ενδ" & "υποδ" & "πρωτοδ" & "φυλοδ" & "ηθ"
      & "ανηθ" & "ξικ" & "μουλ" & "αλ" & "αμμοχαλ"
      & "συνομηλ" & "μπολ" & "βρωμ" & "τσαμ" & "μπαν"
      & "αμαν" & "καλλιν" & "ποστελν" & "φιλον" & "ουσαμε"
      & "ησαμε" & "αγαμε" & "ηκαμε" & "ηθηκαμε" & "αναπ"
      & "πικρ" & "αποστ" & "ποτ" & "χ" & "σιχ" & "βουβ" & "πεθ"
      & "ξεθ" & "αποθ" & "αποκ" & "ουλ" & "τρ" & "τσ"
      & "ουσανε" & "ησανε" & "ουντανε" & "ιουντανε"
      & "οντανε" & "ιοντανε" & "οτανε" & "ιοτανε"
      & "αγανε" & "ηκανε" & "ηθηκανε" & "π" & "σπ"
      & "πολυδαπ" & "αδαπ" & "χαμηλοδαπ" & "τσοπ" & "κοπ"
      & "υποκοπ" & "περιτρ" & "ουρ" & "ερ" & "βετερ" & "γερ"
      & "λουθηρ" & "κορμορ" & "σ" & "σαρακατσ" & "θυσ"
      & "βασ" & "πολισ" & "καστ" & "διατ" & "πλατ"
      & "τσαρλατ" & "τετ" & "πουριτ" & "σουλτ" & "ζωντ"
      & "μαιντ" & "φ" & "πενταρφ" & "κοιλαρφ" & "ορφ"
      & "διαφ" & "στεφ" & "φωτοστεφ" & "περηφ" & "υπερηφ"
      & "χ" & "πολυμηχ" & "αμηχ" & "βιομηχ"
      & "μικροβιομηχ" & "μεγλοβιομηχ" & "καπνοβιομηχ"
      & "λιχ" & "ταβ" & "νταβ" & "ψηλοταβ" & "λιβ" & "κλιβ"
      & "ξηροκλιβ" & "γ" & "ανοργ" & "ενοργ" & "αγ" & "τραγ"
      & "τσαγ" & "τσιγγ" & "ατσιγγ" & "αθιγγ" & "στεγ"
      & "απηγ" & "σιγ" & "καλπουζ" & "θ" & "μωαμεθ" & "πιθ"
      & "απιθ" & "βασκ" & "βραχυκ" & "δεκ" & "πελεκ" & "ικ"
      & "ανικ" & "βουλκ" & "πλ" & "διπλ" & "ψυχοπλ" & "λαοπλ"
      & "ουλ" & "γαλ" & "βαθυγαλ" & "καταγαλ" & "ολογαλ"
      & "καστελ" & "μελ" & "πορτολ" & "μ" & "δραδουμ"
      & "βραχμ" & "ολιγοδαμ" & "μουσουλμ" & "ν"
      & "αμερικαν" & "ησετε" & "πυρ" & "ευρ" & "χωρ" & "βαρ"
      & "βρ" & "αιρ" & "φορ" & "νετ" & "σχ" & "συνδ" & "ενδ"
      & "οδ" & "υπερθ" & "σθ" & "ευθ" & "ραθ" & "ταθ" & "διαθ"
      & "καθ" & "τιθ" & "εκθ" & "συνθ" & "ενθ" & "ροθ" & "αρκ"
      & "ωφελ" & "βολ" & "συν" & "αιν" & "πον" & "ρον" & "σερπ"
      & "κοπ" & "θαρρ" & "ντρ" & "αβαρ" & "εναρ" & "αβρ"
      & "μπορ" & "υ" & "συρφ" & "νιφ" & "παγ" & "δ" & "αδ" & "θ"
      & "αθ" & "σκ" & "τοκ" & "απλ" & "παρακαλ" & "σκελ" & "εμ"
      & "αν" & "βεν" & "βαρον" & "ωντασ" & "οντασ" & "ομαστε"
      & "ιομαστε" & "π" & "απ" & "ακαταπ" & "συμπ" & "ασυμπ"
      & "αμεταμφ" & "αρ" & "νισ" & "ζ" & "αλ" & "παρακαλ"
      & "εκτελ" & "μ" & "ξ" & "προ" & "ηθηκεσ" & "ηθηκα"
      & "ηθηκε" & "σφ" & "ναρθ" & "πιθ" & "οθ" & "σκουλ"
      & "σκωλ" & "θ" & "προσθ" & "παρακαταθ" & "διαθ"
      & "συνθ" & "ηκεσ" & "ηκα" & "ηκε" & "βλεπ" & "ποδαρ"
      & "πρωτ" & "κυματ" & "πανταχ" & "λαχ" & "φαγ" & "ληγ"
      & "φρυδ" & "μαντιλ" & "μαλλ" & "ομ" & "εκλιπ" & "ρ"
      & "αναρρ" & "ενδιαφερ" & "πατ" & "καθαρευ"
      & "δευτερευ" & "λεχ" & "τσα" & "χαδ" & "μεδ" & "λαμπιδ"
      & "δε" & "πλε" & "μεσαζ" & "δεσποζ" & "αιθ" & "φαρμακ"
      & "αγκ" & "ανηκ" & "λ" & "μ" & "αμ" & "βρομ" & "υποτειν"
      & "ουσεσ" & "ουσα" & "ουσε" & "ρπ" & "πρ" & "φρ" & "χορτ"
      & "σφ" & "οφ" & "ψοφ" & "λοχ" & "ναυλοχ" & "πελ" & "λλ"
      & "σμην" & "π" & "ασπ" & "ανυπ" & "αρτιπ" & "αειπ"
      & "συμπ" & "προσωποπ" & "σιδηροπ" & "δροσοπ"
      & "νεοπ" & "κροκαλοπ" & "ολοπ" & "ρ" & "τρ" & "ουρ"
      & "ασπαρ" & "χαρ" & "αχαρ" & "απερ" & "τ" & "ανυστ"
      & "αβαστ" & "προστ" & "αιμοστ" & "διατ" & "επιτ"
      & "συντ" & "υποτ" & "αποτ" & "ομοτ" & "νομοτ" & "ναυ"
      & "πολυφ" & "αφ" & "ξεφ" & "αδηφ" & "παμφ" & "αμαλλι"
      & "λ" & "αμαλ" & "μ" & "ουλαμ" & "εν" & "δερβεν" & "αγεσ"
      & "αγα" & "αγε" & "ησου" & "ησα" & "ησε" & "ν" & "επταν"
      & "δωδεκαν" & "χερσον" & "μεγαλον" & "ερημον"
      & "ηστε" & "χρ" & "δυσχρ" & "ευχρ" & "αχρ" & "κοινοχρ"
      & "παλιμψ" & "σβ" & "ασβ" & "απλ" & "αειμν" & "ουνε"
      & "ησουνε" & "ηθουνε" & "ρ" & "στραβομουτσ"
      & "κακομουτσ" & "σπι" & "ν" & "εξων" & "ουμε"
      & "ησουμε" & "ηθουμε" & "ασουσ" & "παρασουσ"
      & "αλλοσουσ" & "φ" & "χ" & "αζ" & "ωριοπλ" & "ματοσ"
      & "ματα" & "ματων" & "υσ" & "ουσ" & "ασ" & "εσ" & "ησεσ"
      & "ηδεσ" & "ησ" & "εισ" & "ηθεισ" & "οσ" & "υ" & "ου" & "ω"
      & "ησω" & "αω" & "ηθω" & "α" & "ιουμα" & "οσουνα"
      & "ιοσουνα" & "ομουνα" & "ιομουνα" & "ε" & "ιεσαστε"
      & "οσαστε" & "ιοσαστε" & "ουμαστε" & "ιουμαστε"
      & "ιεμαστε" & "ουσατε" & "ησατε" & "αγατε" & "ηκατε"
      & "ηθηκατε" & "ειτε" & "ηθειτε" & "η" & "ι" & "ασαι"
      & "εσαι" & "ιεσαι" & "αται" & "εται" & "ιεται"
      & "ουνται" & "ιουνται" & "ονται" & "ουμαι" & "αμαι"
      & "ιεμαι" & "ομαι" & "ει" & "ησει" & "αει" & "ηθει"
      & "οι" & "ουν" & "ησουν" & "οσουν" & "ιοσουν" & "ηθουν"
      & "ομουν" & "ιομουν" & "ων" & "ηδων" & "αν" & "ουσαν"
      & "οντουσαν" & "ιοντουσαν" & "ησαν" & "οσασταν"
      & "ιοσασταν" & "ομασταν" & "ιομασταν" & "ουνταν"
      & "ιουνταν" & "ονταν" & "ιονταν" & "οταν" & "ιοταν"
      & "αγαν" & "ηκαν" & "ηθηκαν" & "ο" & "εστερ" & "υτερ"
      & "ωτερ" & "οτερ" & "εστατ" & "υτατ" & "ωτατ" & "οτατ";

   A_0 : constant Among_Array_Type (0 .. 45) := (
      (1, 0, -1, 25, 0),
      (1, 2, 0, 18, 0),
      (3, 4, 0, 1, 0),
      (5, 6, 0, 5, 0),
      (7, 8, 0, 7, 0),
      (9, 10, 0, 9, 0),
      (11, 12, 0, 7, 0),
      (13, 14, 0, 20, 0),
      (15, 16, 0, 15, 0),
      (17, 18, 0, 15, 0),
      (19, 20, 0, 20, 0),
      (21, 22, 0, 20, 0),
      (23, 24, 0, 24, 0),
      (25, 26, 0, 24, 0),
      (27, 28, 0, 7, 0),
      (29, 30, 0, 1, 0),
      (31, 32, 0, 2, 0),
      (33, 34, 0, 3, 0),
      (35, 36, 0, 4, 0),
      (37, 38, 0, 5, 0),
      (39, 40, 0, 6, 0),
      (41, 42, 0, 7, 0),
      (43, 44, 0, 8, 0),
      (45, 46, 0, 9, 0),
      (47, 48, 0, 10, 0),
      (49, 50, 0, 11, 0),
      (51, 52, 0, 12, 0),
      (53, 54, 0, 13, 0),
      (55, 56, 0, 14, 0),
      (57, 58, 0, 15, 0),
      (59, 60, 0, 16, 0),
      (61, 62, 0, 17, 0),
      (63, 64, 0, 18, 0),
      (65, 66, 0, 19, 0),
      (67, 68, 0, 20, 0),
      (69, 70, 0, 21, 0),
      (71, 72, 0, 22, 0),
      (73, 74, 0, 23, 0),
      (75, 76, 0, 24, 0),
      (77, 78, 0, 9, 0),
      (79, 80, 0, 20, 0),
      (81, 82, 0, 1, 0),
      (83, 84, 0, 5, 0),
      (85, 86, 0, 7, 0),
      (87, 88, 0, 9, 0),
      (89, 90, 0, 20, 0));

   A_1 : constant Among_Array_Type (0 .. 39) := (
      (91, 106, -1, 10, 0),
      (107, 112, -1, 9, 0),
      (113, 122, -1, 7, 0),
      (123, 132, -1, 8, 0),
      (133, 142, -1, 6, 0),
      (143, 162, -1, 10, 0),
      (163, 172, -1, 9, 0),
      (173, 186, -1, 7, 0),
      (187, 200, -1, 8, 0),
      (201, 214, -1, 6, 0),
      (215, 232, -1, 11, 0),
      (233, 246, -1, 11, 0),
      (247, 258, -1, 1, 0),
      (259, 272, -1, 2, 0),
      (273, 284, -1, 4, 0),
      (285, 300, -1, 5, 0),
      (301, 314, -1, 3, 0),
      (315, 332, -1, 10, 0),
      (333, 340, -1, 9, 0),
      (341, 352, -1, 7, 0),
      (353, 364, -1, 8, 0),
      (365, 376, -1, 6, 0),
      (377, 392, -1, 11, 0),
      (393, 402, -1, 1, 0),
      (403, 414, -1, 2, 0),
      (415, 424, -1, 4, 0),
      (425, 438, -1, 5, 0),
      (439, 450, -1, 3, 0),
      (451, 462, -1, 7, 0),
      (463, 482, -1, 10, 0),
      (483, 492, -1, 9, 0),
      (493, 506, -1, 7, 0),
      (507, 520, -1, 8, 0),
      (521, 534, -1, 6, 0),
      (535, 552, -1, 11, 0),
      (553, 564, -1, 1, 0),
      (565, 578, -1, 2, 0),
      (579, 590, -1, 4, 0),
      (591, 606, -1, 5, 0),
      (607, 620, -1, 3, 0));

   A_2 : constant Among_Array_Type (0 .. 30) := (
      (621, 622, -1, 2, 0),
      (623, 628, 0, 2, 0),
      (629, 630, -1, 2, 0),
      (631, 634, 2, 2, 0),
      (635, 640, 3, 2, 0),
      (641, 646, 2, 2, 0),
      (647, 658, 2, 2, 0),
      (659, 668, 2, 2, 0),
      (669, 678, 2, 2, 0),
      (679, 684, 2, 2, 0),
      (685, 690, 2, 2, 0),
      (691, 704, 2, 2, 0),
      (705, 716, 2, 2, 0),
      (717, 728, 2, 2, 0),
      (729, 734, -1, 2, 0),
      (735, 738, -1, 1, 0),
      (739, 750, 15, 1, 0),
      (751, 756, 15, 1, 0),
      (757, 768, 15, 1, 0),
      (769, 780, 15, 1, 0),
      (781, 788, 15, 1, 0),
      (789, 790, -1, 2, 0),
      (791, 798, -1, 1, 0),
      (799, 810, -1, 2, 0),
      (811, 818, -1, 2, 0),
      (819, 826, -1, 2, 0),
      (827, 828, -1, 2, 0),
      (829, 830, -1, 2, 0),
      (831, 838, -1, 2, 0),
      (839, 846, -1, 1, 0),
      (847, 860, 29, 1, 0));

   A_3 : constant Among_Array_Type (0 .. 13) := (
      (861, 868, -1, 1, 0),
      (869, 878, -1, 1, 0),
      (879, 884, -1, 1, 0),
      (885, 890, -1, 1, 0),
      (891, 900, -1, 1, 0),
      (901, 910, -1, 1, 0),
      (911, 916, -1, 1, 0),
      (917, 928, -1, 1, 0),
      (929, 938, -1, 1, 0),
      (939, 950, -1, 1, 0),
      (951, 960, -1, 1, 0),
      (961, 968, -1, 1, 0),
      (969, 978, -1, 1, 0),
      (979, 986, -1, 1, 0));

   A_4 : constant Among_Array_Type (0 .. 7) := (
      (987, 988, -1, 1, 0),
      (989, 990, -1, 1, 0),
      (991, 994, -1, 1, 0),
      (995, 998, -1, 1, 0),
      (999, 1002, -1, 1, 0),
      (1003, 1006, -1, 1, 0),
      (1007, 1010, -1, 1, 0),
      (1011, 1014, -1, 1, 0));

   A_5 : constant Among_Array_Type (0 .. 6) := (
      (1015, 1026, -1, 1, 0),
      (1027, 1036, -1, 1, 0),
      (1037, 1050, -1, 1, 0),
      (1051, 1060, -1, 1, 0),
      (1061, 1074, -1, 1, 0),
      (1075, 1088, -1, 1, 0),
      (1089, 1100, -1, 1, 0));

   A_6 : constant Among_Array_Type (0 .. 31) := (
      (1101, 1102, -1, 2, 0),
      (1103, 1108, -1, 2, 0),
      (1109, 1124, -1, 2, 0),
      (1125, 1128, -1, 2, 0),
      (1129, 1146, 3, 2, 0),
      (1147, 1158, -1, 1, 0),
      (1159, 1164, -1, 1, 0),
      (1165, 1176, -1, 1, 0),
      (1177, 1188, -1, 1, 0),
      (1189, 1196, -1, 1, 0),
      (1197, 1210, -1, 1, 0),
      (1211, 1222, -1, 1, 0),
      (1223, 1226, -1, 1, 0),
      (1227, 1232, 12, 1, 0),
      (1233, 1244, 13, 1, 0),
      (1245, 1250, -1, 1, 0),
      (1251, 1254, -1, 2, 0),
      (1255, 1260, -1, 2, 0),
      (1261, 1266, -1, 1, 0),
      (1267, 1278, 18, 1, 0),
      (1279, 1286, 18, 1, 0),
      (1287, 1298, 20, 1, 0),
      (1299, 1310, 18, 1, 0),
      (1311, 1318, -1, 1, 0),
      (1319, 1322, -1, 2, 0),
      (1323, 1324, -1, 2, 0),
      (1325, 1336, 25, 2, 0),
      (1337, 1342, 25, 2, 0),
      (1343, 1346, -1, 2, 0),
      (1347, 1354, -1, 1, 0),
      (1355, 1368, 29, 1, 0),
      (1369, 1374, -1, 2, 0));

   A_7 : constant Among_Array_Type (0 .. 6) := (
      (1375, 1382, -1, 1, 0),
      (1383, 1388, -1, 1, 0),
      (1389, 1394, -1, 1, 0),
      (1395, 1404, -1, 1, 0),
      (1405, 1414, -1, 1, 0),
      (1415, 1424, -1, 1, 0),
      (1425, 1432, -1, 1, 0));

   A_8 : constant Among_Array_Type (0 .. 18) := (
      (1433, 1444, -1, 1, 0),
      (1445, 1450, -1, 1, 0),
      (1451, 1462, -1, 1, 0),
      (1463, 1474, -1, 1, 0),
      (1475, 1482, -1, 1, 0),
      (1483, 1496, -1, 1, 0),
      (1497, 1508, -1, 1, 0),
      (1509, 1512, -1, 1, 0),
      (1513, 1518, 7, 1, 0),
      (1519, 1530, 8, 1, 0),
      (1531, 1536, -1, 1, 0),
      (1537, 1542, -1, 1, 0),
      (1543, 1554, 11, 1, 0),
      (1555, 1562, 11, 1, 0),
      (1563, 1574, 13, 1, 0),
      (1575, 1586, 11, 1, 0),
      (1587, 1594, -1, 1, 0),
      (1595, 1602, -1, 1, 0),
      (1603, 1616, 17, 1, 0));

   A_9 : constant Among_Array_Type (0 .. 6) := (
      (1617, 1626, -1, 1, 0),
      (1627, 1632, -1, 1, 0),
      (1633, 1642, -1, 1, 0),
      (1643, 1654, -1, 1, 0),
      (1655, 1666, -1, 1, 0),
      (1667, 1674, -1, 1, 0),
      (1675, 1684, -1, 1, 0));

   A_10 : constant Among_Array_Type (0 .. 39) := (
      (1685, 1686, -1, 2, 0),
      (1687, 1692, 0, 2, 0),
      (1693, 1696, 0, 2, 0),
      (1697, 1702, 0, 2, 0),
      (1703, 1708, -1, 2, 0),
      (1709, 1712, -1, 2, 0),
      (1713, 1718, -1, 2, 0),
      (1719, 1722, -1, 2, 0),
      (1723, 1728, -1, 2, 0),
      (1729, 1732, -1, 2, 0),
      (1733, 1738, 9, 2, 0),
      (1739, 1742, -1, 2, 0),
      (1743, 1748, 11, 2, 0),
      (1749, 1752, -1, 2, 0),
      (1753, 1758, 13, 2, 0),
      (1759, 1764, -1, 2, 0),
      (1765, 1768, -1, 2, 0),
      (1769, 1774, -1, 2, 0),
      (1775, 1778, -1, 2, 0),
      (1779, 1784, 18, 2, 0),
      (1785, 1790, -1, 2, 0),
      (1791, 1796, -1, 2, 0),
      (1797, 1800, -1, 2, 0),
      (1801, 1804, -1, 1, 0),
      (1805, 1810, 23, 1, 0),
      (1811, 1816, -1, 1, 0),
      (1817, 1822, -1, 1, 0),
      (1823, 1834, 26, 1, 0),
      (1835, 1842, -1, 1, 0),
      (1843, 1848, -1, 2, 0),
      (1849, 1854, -1, 2, 0),
      (1855, 1858, -1, 2, 0),
      (1859, 1864, -1, 2, 0),
      (1865, 1870, -1, 2, 0),
      (1871, 1876, -1, 2, 0),
      (1877, 1882, -1, 2, 0),
      (1883, 1884, -1, 2, 0),
      (1885, 1890, 36, 2, 0),
      (1891, 1896, -1, 2, 0),
      (1897, 1910, -1, 1, 0));

   A_11 : constant Among_Array_Type (0 .. 10) := (
      (1911, 1922, -1, 1, 0),
      (1923, 1932, -1, 1, 0),
      (1933, 1942, -1, 1, 0),
      (1943, 1952, -1, 1, 0),
      (1953, 1962, -1, 1, 0),
      (1963, 1970, -1, 1, 0),
      (1971, 1978, -1, 1, 0),
      (1979, 1986, -1, 1, 0),
      (1987, 1996, -1, 1, 0),
      (1997, 2006, -1, 1, 0),
      (2007, 2014, -1, 1, 0));

   A_12 : constant Among_Array_Type (0 .. 6) := (
      (2015, 2018, -1, 1, 0),
      (2019, 2030, 0, 1, 0),
      (2031, 2044, 0, 1, 0),
      (2045, 2054, -1, 1, 0),
      (2055, 2066, -1, 1, 0),
      (2067, 2074, -1, 2, 0),
      (2075, 2090, 5, 2, 0));

   A_13 : constant Among_Array_Type (0 .. 9) := (
      (2091, 2100, -1, 7, 0),
      (2101, 2114, -1, 6, 0),
      (2115, 2128, -1, 3, 0),
      (2129, 2144, 2, 1, 0),
      (2145, 2160, -1, 5, 0),
      (2161, 2172, -1, 2, 0),
      (2173, 2182, -1, 4, 0),
      (2183, 2196, -1, 10, 0),
      (2197, 2216, -1, 8, 0),
      (2217, 2232, -1, 9, 0));

   A_14 : constant Among_Array_Type (0 .. 5) := (
      (2233, 2244, -1, 1, 0),
      (2245, 2254, -1, 1, 0),
      (2255, 2264, -1, 1, 0),
      (2265, 2274, -1, 1, 0),
      (2275, 2284, -1, 1, 0),
      (2285, 2292, -1, 1, 0));

   A_15 : constant Among_Array_Type (0 .. 1) := (
      (2293, 2294, -1, 1, 0),
      (2295, 2296, -1, 1, 0));

   A_16 : constant Among_Array_Type (0 .. 3) := (
      (2297, 2308, -1, 1, 0),
      (2309, 2322, -1, 1, 0),
      (2323, 2332, -1, 1, 0),
      (2333, 2344, -1, 1, 0));

   A_17 : constant Among_Array_Type (0 .. 45) := (
      (2345, 2346, -1, 2, 0),
      (2347, 2358, 0, 1, 0),
      (2359, 2360, -1, 1, 0),
      (2361, 2364, 2, 1, 0),
      (2365, 2372, 3, 1, 0),
      (2373, 2380, 3, 1, 0),
      (2381, 2390, 2, 2, 0),
      (2391, 2396, 2, 1, 0),
      (2397, 2404, 2, 1, 0),
      (2405, 2410, 2, 1, 0),
      (2411, 2412, -1, 1, 0),
      (2413, 2424, 10, 1, 0),
      (2425, 2430, 10, 2, 0),
      (2431, 2440, -1, 1, 0),
      (2441, 2444, -1, 1, 0),
      (2445, 2446, -1, 1, 0),
      (2447, 2450, 15, 1, 0),
      (2451, 2460, 16, 1, 0),
      (2461, 2466, 15, 2, 0),
      (2467, 2468, -1, 1, 0),
      (2469, 2470, -1, 2, 0),
      (2471, 2478, 20, 1, 0),
      (2479, 2486, 20, 1, 0),
      (2487, 2504, 22, 1, 0),
      (2505, 2512, -1, 2, 0),
      (2513, 2514, -1, 2, 0),
      (2515, 2518, 25, 1, 0),
      (2519, 2520, -1, 1, 0),
      (2521, 2524, 27, 1, 0),
      (2525, 2534, 27, 1, 0),
      (2535, 2540, 27, 1, 0),
      (2541, 2544, -1, 1, 0),
      (2545, 2550, -1, 1, 0),
      (2551, 2558, -1, 1, 0),
      (2559, 2564, -1, 2, 0),
      (2565, 2570, -1, 1, 0),
      (2571, 2574, -1, 2, 0),
      (2575, 2586, -1, 2, 0),
      (2587, 2594, -1, 1, 0),
      (2595, 2602, -1, 1, 0),
      (2603, 2610, -1, 1, 0),
      (2611, 2622, -1, 2, 0),
      (2623, 2630, -1, 1, 0),
      (2631, 2638, -1, 2, 0),
      (2639, 2652, -1, 2, 0),
      (2653, 2658, -1, 1, 0));

   A_18 : constant Among_Array_Type (0 .. 7) := (
      (2659, 2668, -1, 1, 0),
      (2669, 2678, -1, 1, 0),
      (2679, 2686, -1, 1, 0),
      (2687, 2694, -1, 1, 0),
      (2695, 2706, 3, 1, 0),
      (2707, 2712, -1, 1, 0),
      (2713, 2722, 5, 1, 0),
      (2723, 2732, -1, 1, 0));

   A_19 : constant Among_Array_Type (0 .. 3) := (
      (2733, 2736, -1, 1, 0),
      (2737, 2742, -1, 1, 0),
      (2743, 2750, -1, 1, 0),
      (2751, 2756, -1, 1, 0));

   A_20 : constant Among_Array_Type (0 .. 1) := (
      (2757, 2758, -1, 1, 0),
      (2759, 2768, -1, 1, 0));

   A_21 : constant Among_Array_Type (0 .. 2) := (
      (2769, 2776, -1, 1, 0),
      (2777, 2786, -1, 1, 0),
      (2787, 2794, -1, 1, 0));

   A_22 : constant Among_Array_Type (0 .. 6) := (
      (2795, 2796, -1, 1, 0),
      (2797, 2800, -1, 1, 0),
      (2801, 2802, -1, 1, 0),
      (2803, 2808, -1, 1, 0),
      (2809, 2818, -1, 1, 0),
      (2819, 2826, -1, 1, 0),
      (2827, 2832, -1, 1, 0));

   A_23 : constant Among_Array_Type (0 .. 3) := (
      (2833, 2842, -1, 1, 0),
      (2843, 2852, -1, 1, 0),
      (2853, 2860, -1, 1, 0),
      (2861, 2868, -1, 1, 0));

   A_24 : constant Among_Array_Type (0 .. 1) := (
      (2869, 2876, -1, 1, 0),
      (2877, 2884, -1, 1, 0));

   A_25 : constant Among_Array_Type (0 .. 9) := (
      (2885, 2894, -1, -1, 0),
      (2895, 2900, -1, -1, 0),
      (2901, 2910, -1, -1, 0),
      (2911, 2920, -1, -1, 0),
      (2921, 2930, -1, -1, 0),
      (2931, 2940, -1, -1, 0),
      (2941, 2946, -1, -1, 0),
      (2947, 2950, -1, -1, 0),
      (2951, 2956, -1, -1, 0),
      (2957, 2962, -1, -1, 0));

   A_26 : constant Among_Array_Type (0 .. 1) := (
      (2963, 2970, -1, 1, 0),
      (2971, 2978, -1, 1, 0));

   A_27 : constant Among_Array_Type (0 .. 7) := (
      (2979, 2988, -1, 1, 0),
      (2989, 2992, -1, 1, 0),
      (2993, 2998, -1, 1, 0),
      (2999, 3004, -1, 1, 0),
      (3005, 3008, -1, 1, 0),
      (3009, 3014, -1, 1, 0),
      (3015, 3018, -1, 1, 0),
      (3019, 3024, -1, 1, 0));

   A_28 : constant Among_Array_Type (0 .. 1) := (
      (3025, 3034, -1, 1, 0),
      (3035, 3044, -1, 1, 0));

   A_29 : constant Among_Array_Type (0 .. 14) := (
      (3045, 3048, -1, 1, 0),
      (3049, 3052, -1, 1, 0),
      (3053, 3054, -1, 1, 0),
      (3055, 3060, -1, 1, 0),
      (3061, 3068, -1, 1, 0),
      (3069, 3072, -1, 1, 0),
      (3073, 3078, -1, 1, 0),
      (3079, 3082, -1, 1, 0),
      (3083, 3094, -1, 1, 0),
      (3095, 3102, -1, 1, 0),
      (3103, 3106, -1, 1, 0),
      (3107, 3116, -1, 1, 0),
      (3117, 3122, -1, 1, 0),
      (3123, 3126, -1, 1, 0),
      (3127, 3134, -1, 1, 0));

   A_30 : constant Among_Array_Type (0 .. 1) := (
      (3135, 3140, -1, 1, 0),
      (3141, 3146, -1, 1, 0));

   A_31 : constant Among_Array_Type (0 .. 7) := (
      (3147, 3148, -1, 1, 0),
      (3149, 3154, -1, 1, 0),
      (3155, 3156, -1, 1, 0),
      (3157, 3160, 2, 1, 0),
      (3161, 3162, -1, 1, 0),
      (3163, 3168, -1, 1, 0),
      (3169, 3172, -1, 1, 0),
      (3173, 3174, -1, 1, 0));

   A_32 : constant Among_Array_Type (0 .. 2) := (
      (3175, 3180, -1, 1, 0),
      (3181, 3184, -1, 1, 0),
      (3185, 3190, -1, 1, 0));

   A_33 : constant Among_Array_Type (0 .. 3) := (
      (3191, 3198, -1, 1, 0),
      (3199, 3204, -1, 1, 0),
      (3205, 3212, -1, 1, 0),
      (3213, 3218, -1, 1, 0));

   A_34 : constant Among_Array_Type (0 .. 35) := (
      (3219, 3226, -1, 1, 0),
      (3227, 3232, -1, 1, 0),
      (3233, 3244, -1, 1, 0),
      (3245, 3252, -1, 1, 0),
      (3253, 3260, -1, 1, 0),
      (3261, 3266, -1, 1, 0),
      (3267, 3272, -1, 1, 0),
      (3273, 3280, -1, 1, 0),
      (3281, 3288, -1, 1, 0),
      (3289, 3302, -1, 1, 0),
      (3303, 3308, -1, 1, 0),
      (3309, 3320, -1, 1, 0),
      (3321, 3328, -1, 1, 0),
      (3329, 3332, -1, 1, 0),
      (3333, 3342, 13, 1, 0),
      (3343, 3352, 13, 1, 0),
      (3353, 3362, -1, 1, 0),
      (3363, 3368, -1, 1, 0),
      (3369, 3376, -1, 1, 0),
      (3377, 3388, -1, 1, 0),
      (3389, 3398, -1, 1, 0),
      (3399, 3402, -1, 1, 0),
      (3403, 3410, 21, 1, 0),
      (3411, 3416, -1, 1, 0),
      (3417, 3424, -1, 1, 0),
      (3425, 3428, -1, 1, 0),
      (3429, 3442, 25, 1, 0),
      (3443, 3456, -1, 1, 0),
      (3457, 3464, -1, 1, 0),
      (3465, 3472, -1, 1, 0),
      (3473, 3480, -1, 1, 0),
      (3481, 3488, -1, 1, 0),
      (3489, 3496, -1, 1, 0),
      (3497, 3508, -1, 1, 0),
      (3509, 3522, -1, 1, 0),
      (3523, 3532, -1, 1, 0));

   A_35 : constant Among_Array_Type (0 .. 4) := (
      (3533, 3544, -1, 1, 0),
      (3545, 3554, -1, 1, 0),
      (3555, 3564, -1, 1, 0),
      (3565, 3574, -1, 1, 0),
      (3575, 3588, 3, 1, 0));

   A_36 : constant Among_Array_Type (0 .. 11) := (
      (3589, 3596, -1, 1, 0),
      (3597, 3604, -1, 1, 0),
      (3605, 3614, -1, 1, 0),
      (3615, 3620, -1, 1, 0),
      (3621, 3622, -1, 1, 0),
      (3623, 3628, 4, 1, 0),
      (3629, 3636, -1, 1, 0),
      (3637, 3642, -1, 1, 0),
      (3643, 3648, -1, 1, 0),
      (3649, 3656, -1, 1, 0),
      (3657, 3664, -1, 1, 0),
      (3665, 3670, -1, 1, 0));

   A_37 : constant Among_Array_Type (0 .. 1) := (
      (3671, 3674, -1, 1, 0),
      (3675, 3678, -1, 1, 0));

   A_38 : constant Among_Array_Type (0 .. 10) := (
      (3679, 3690, -1, 1, 0),
      (3691, 3700, -1, 1, 0),
      (3701, 3714, -1, 1, 0),
      (3715, 3730, 2, 1, 0),
      (3731, 3742, -1, 1, 0),
      (3743, 3756, 4, 1, 0),
      (3757, 3766, -1, 1, 0),
      (3767, 3778, 6, 1, 0),
      (3779, 3788, -1, 1, 0),
      (3789, 3798, -1, 1, 0),
      (3799, 3812, 9, 1, 0));

   A_39 : constant Among_Array_Type (0 .. 94) := (
      (3813, 3814, -1, 1, 0),
      (3815, 3818, 0, 1, 0),
      (3819, 3832, 0, 1, 0),
      (3833, 3840, 0, 1, 0),
      (3841, 3858, 0, 1, 0),
      (3859, 3866, 0, 1, 0),
      (3867, 3872, 0, 1, 0),
      (3873, 3884, 6, 1, 0),
      (3885, 3896, -1, 1, 0),
      (3897, 3902, -1, 1, 0),
      (3903, 3906, -1, 1, 0),
      (3907, 3916, 10, 1, 0),
      (3917, 3922, 10, 1, 0),
      (3923, 3934, -1, 1, 0),
      (3935, 3946, -1, 1, 0),
      (3947, 3948, -1, 1, 0),
      (3949, 3964, 15, 1, 0),
      (3965, 3970, 15, 1, 0),
      (3971, 3976, 15, 1, 0),
      (3977, 3986, 15, 1, 0),
      (3987, 3994, -1, 1, 0),
      (3995, 4002, -1, 1, 0),
      (4003, 4010, -1, 1, 0),
      (4011, 4024, -1, 1, 0),
      (4025, 4030, -1, 1, 0),
      (4031, 4042, -1, 1, 0),
      (4043, 4052, -1, 1, 0),
      (4053, 4060, -1, 1, 0),
      (4061, 4070, -1, 1, 0),
      (4071, 4072, -1, 1, 0),
      (4073, 4086, 29, 1, 0),
      (4087, 4100, 29, 1, 0),
      (4101, 4106, 29, 1, 0),
      (4107, 4114, 29, 1, 0),
      (4115, 4122, 29, 1, 0),
      (4123, 4138, 34, 1, 0),
      (4139, 4148, 29, 1, 0),
      (4149, 4160, 36, 1, 0),
      (4161, 4162, -1, 1, 0),
      (4163, 4176, 38, 1, 0),
      (4177, 4184, 38, 1, 0),
      (4185, 4196, 38, 1, 0),
      (4197, 4218, 41, 1, 0),
      (4219, 4240, 41, 1, 0),
      (4241, 4262, 41, 1, 0),
      (4263, 4268, 38, 1, 0),
      (4269, 4274, -1, 1, 0),
      (4275, 4282, 46, 1, 0),
      (4283, 4296, 46, 1, 0),
      (4297, 4302, -1, 1, 0),
      (4303, 4310, 49, 1, 0),
      (4311, 4326, 50, 1, 0),
      (4327, 4328, -1, 1, 0),
      (4329, 4338, 52, 1, 0),
      (4339, 4348, 52, 1, 0),
      (4349, 4352, 52, 1, 0),
      (4353, 4360, 55, 1, 0),
      (4361, 4368, 55, 1, 0),
      (4369, 4378, 52, 1, 0),
      (4379, 4390, 58, 1, 0),
      (4391, 4400, 52, 1, 0),
      (4401, 4408, 52, 1, 0),
      (4409, 4416, 52, 1, 0),
      (4417, 4422, 52, 1, 0),
      (4423, 4436, -1, 1, 0),
      (4437, 4438, -1, 1, 0),
      (4439, 4450, 65, 1, 0),
      (4451, 4456, 65, 1, 0),
      (4457, 4464, 67, 1, 0),
      (4465, 4472, -1, 1, 0),
      (4473, 4484, -1, 1, 0),
      (4485, 4490, -1, 1, 0),
      (4491, 4500, -1, 1, 0),
      (4501, 4504, -1, 1, 0),
      (4505, 4512, 73, 1, 0),
      (4513, 4522, -1, 1, 0),
      (4523, 4526, -1, 1, 0),
      (4527, 4534, 76, 1, 0),
      (4535, 4546, 76, 1, 0),
      (4547, 4556, 76, 1, 0),
      (4557, 4562, -1, 1, 0),
      (4563, 4568, -1, 1, 0),
      (4569, 4582, 81, 1, 0),
      (4583, 4596, 81, 1, 0),
      (4597, 4608, 81, 1, 0),
      (4609, 4620, -1, 1, 0),
      (4621, 4626, -1, 1, 0),
      (4627, 4638, -1, 1, 0),
      (4639, 4640, -1, 1, 0),
      (4641, 4654, 88, 1, 0),
      (4655, 4664, 88, 1, 0),
      (4665, 4680, 88, 1, 0),
      (4681, 4696, 88, 1, 0),
      (4697, 4698, -1, 1, 0),
      (4699, 4714, 93, 1, 0));

   A_40 : constant Among_Array_Type (0 .. 0) := (
      others => (4715, 4724, -1, 1, 0));

   A_41 : constant Among_Array_Type (0 .. 30) := (
      (4725, 4730, -1, 1, 0),
      (4731, 4736, -1, 1, 0),
      (4737, 4742, -1, 1, 0),
      (4743, 4748, -1, 1, 0),
      (4749, 4752, -1, 1, 0),
      (4753, 4758, -1, 1, 0),
      (4759, 4764, -1, 1, 0),
      (4765, 4770, -1, 1, 0),
      (4771, 4774, -1, 1, 0),
      (4775, 4782, -1, 1, 0),
      (4783, 4788, -1, 1, 0),
      (4789, 4792, -1, 1, 0),
      (4793, 4802, -1, 1, 0),
      (4803, 4806, -1, 1, 0),
      (4807, 4812, -1, 1, 0),
      (4813, 4818, -1, 1, 0),
      (4819, 4824, -1, 1, 0),
      (4825, 4832, -1, 1, 0),
      (4833, 4838, -1, 1, 0),
      (4839, 4844, -1, 1, 0),
      (4845, 4850, -1, 1, 0),
      (4851, 4858, -1, 1, 0),
      (4859, 4864, -1, 1, 0),
      (4865, 4870, -1, 1, 0),
      (4871, 4876, -1, 1, 0),
      (4877, 4884, -1, 1, 0),
      (4885, 4890, -1, 1, 0),
      (4891, 4896, -1, 1, 0),
      (4897, 4902, -1, 1, 0),
      (4903, 4908, -1, 1, 0),
      (4909, 4914, -1, 1, 0));

   A_42 : constant Among_Array_Type (0 .. 24) := (
      (4915, 4922, -1, 1, 0),
      (4923, 4928, -1, 1, 0),
      (4929, 4936, -1, 1, 0),
      (4937, 4942, -1, 1, 0),
      (4943, 4950, -1, 1, 0),
      (4951, 4958, -1, 1, 0),
      (4959, 4964, -1, 1, 0),
      (4965, 4972, -1, 1, 0),
      (4973, 4974, -1, 1, 0),
      (4975, 4982, -1, 1, 0),
      (4983, 4988, -1, 1, 0),
      (4989, 4994, -1, 1, 0),
      (4995, 4996, -1, 1, 0),
      (4997, 5000, 12, 1, 0),
      (5001, 5002, -1, 1, 0),
      (5003, 5006, 14, 1, 0),
      (5007, 5010, -1, 1, 0),
      (5011, 5016, -1, 1, 0),
      (5017, 5022, -1, 1, 0),
      (5023, 5036, -1, 1, 0),
      (5037, 5044, -1, 1, 0),
      (5045, 5048, -1, 1, 0),
      (5049, 5052, -1, 1, 0),
      (5053, 5058, -1, 1, 0),
      (5059, 5068, -1, 1, 0));

   A_43 : constant Among_Array_Type (0 .. 1) := (
      (5069, 5078, -1, 1, 0),
      (5079, 5088, -1, 1, 0));

   A_44 : constant Among_Array_Type (0 .. 1) := (
      (5089, 5100, -1, 1, 0),
      (5101, 5114, 0, 1, 0));

   A_45 : constant Among_Array_Type (0 .. 5) := (
      (5115, 5116, -1, 1, 0),
      (5117, 5120, 0, 1, 0),
      (5121, 5132, 1, 1, 0),
      (5133, 5140, 0, 1, 0),
      (5141, 5150, 3, 1, 0),
      (5151, 5164, -1, 1, 0));

   A_46 : constant Among_Array_Type (0 .. 8) := (
      (5165, 5168, -1, 1, 0),
      (5169, 5174, -1, 1, 0),
      (5175, 5176, -1, 1, 0),
      (5177, 5180, -1, 1, 0),
      (5181, 5194, 3, 1, 0),
      (5195, 5204, -1, 1, 0),
      (5205, 5206, -1, 1, 0),
      (5207, 5208, -1, 1, 0),
      (5209, 5214, -1, 1, 0));

   A_47 : constant Among_Array_Type (0 .. 2) := (
      (5215, 5226, -1, 1, 0),
      (5227, 5236, -1, 1, 0),
      (5237, 5246, -1, 1, 0));

   A_48 : constant Among_Array_Type (0 .. 5) := (
      (5247, 5250, -1, 1, 0),
      (5251, 5258, -1, 1, 0),
      (5259, 5264, -1, 1, 0),
      (5265, 5268, -1, 1, 0),
      (5269, 5278, -1, 1, 0),
      (5279, 5286, -1, 1, 0));

   A_49 : constant Among_Array_Type (0 .. 4) := (
      (5287, 5288, -1, 1, 0),
      (5289, 5298, 0, 1, 0),
      (5299, 5316, 0, 1, 0),
      (5317, 5324, 0, 1, 0),
      (5325, 5332, 0, 1, 0));

   A_50 : constant Among_Array_Type (0 .. 2) := (
      (5333, 5340, -1, 1, 0),
      (5341, 5346, -1, 1, 0),
      (5347, 5352, -1, 1, 0));

   A_51 : constant Among_Array_Type (0 .. 11) := (
      (5353, 5360, -1, 1, 0),
      (5361, 5370, -1, 1, 0),
      (5371, 5378, -1, 1, 0),
      (5379, 5388, -1, 1, 0),
      (5389, 5400, -1, 1, 0),
      (5401, 5406, -1, 1, 0),
      (5407, 5412, -1, 1, 0),
      (5413, 5418, -1, 1, 0),
      (5419, 5426, -1, 1, 0),
      (5427, 5438, -1, 1, 0),
      (5439, 5446, -1, 1, 0),
      (5447, 5450, -1, 1, 0));

   A_52 : constant Among_Array_Type (0 .. 24) := (
      (5451, 5460, -1, 1, 0),
      (5461, 5462, -1, 1, 0),
      (5463, 5472, 1, 1, 0),
      (5473, 5488, 1, 1, 0),
      (5489, 5494, -1, 1, 0),
      (5495, 5508, -1, 1, 0),
      (5509, 5524, -1, 1, 0),
      (5525, 5530, -1, 1, 0),
      (5531, 5536, -1, 1, 0),
      (5537, 5542, -1, 1, 0),
      (5543, 5548, -1, 1, 0),
      (5549, 5560, -1, 1, 0),
      (5561, 5564, -1, 1, 0),
      (5565, 5570, -1, 1, 0),
      (5571, 5580, -1, 1, 0),
      (5581, 5592, -1, 1, 0),
      (5593, 5598, -1, 1, 0),
      (5599, 5610, -1, 1, 0),
      (5611, 5616, -1, 1, 0),
      (5617, 5624, -1, 1, 0),
      (5625, 5626, -1, 1, 0),
      (5627, 5628, -1, 1, 0),
      (5629, 5632, 21, 1, 0),
      (5633, 5640, 21, 1, 0),
      (5641, 5654, -1, 1, 0));

   A_53 : constant Among_Array_Type (0 .. 2) := (
      (5655, 5664, -1, 1, 0),
      (5665, 5672, -1, 1, 0),
      (5673, 5680, -1, 1, 0));

   A_54 : constant Among_Array_Type (0 .. 11) := (
      (5681, 5684, -1, 1, 0),
      (5685, 5688, -1, 1, 0),
      (5689, 5692, -1, 1, 0),
      (5693, 5700, -1, 1, 0),
      (5701, 5704, -1, 1, 0),
      (5705, 5708, -1, 1, 0),
      (5709, 5714, 5, -1, 0),
      (5715, 5720, -1, 1, 0),
      (5721, 5732, 7, -1, 0),
      (5733, 5738, -1, 1, 0),
      (5739, 5742, -1, 1, 0),
      (5743, 5750, -1, 1, 0));

   A_55 : constant Among_Array_Type (0 .. 43) := (
      (5751, 5752, -1, 1, 0),
      (5753, 5758, 0, 1, 0),
      (5759, 5766, 0, 1, 0),
      (5767, 5776, 0, 1, 0),
      (5777, 5784, 0, 1, 0),
      (5785, 5792, 0, 1, 0),
      (5793, 5808, 0, 1, 0),
      (5809, 5822, 0, 1, 0),
      (5823, 5834, 0, 1, 0),
      (5835, 5842, 0, 1, 0),
      (5843, 5858, 0, 1, 0),
      (5859, 5866, 0, 1, 0),
      (5867, 5868, -1, 1, 0),
      (5869, 5872, 12, 1, 0),
      (5873, 5878, 12, 1, 0),
      (5879, 5888, 12, 1, 0),
      (5889, 5894, 12, 1, 0),
      (5895, 5902, 16, 1, 0),
      (5903, 5910, 12, 1, 0),
      (5911, 5912, -1, 1, 0),
      (5913, 5922, 19, 1, 0),
      (5923, 5932, 19, 1, 0),
      (5933, 5942, 19, 1, 0),
      (5943, 5954, 19, 1, 0),
      (5955, 5962, 19, 1, 0),
      (5963, 5970, 19, 1, 0),
      (5971, 5978, 19, 1, 0),
      (5979, 5986, 19, 1, 0),
      (5987, 5994, 19, 1, 0),
      (5995, 6002, 19, 1, 0),
      (6003, 6012, 29, 1, 0),
      (6013, 6018, -1, 1, 0),
      (6019, 6028, -1, 1, 0),
      (6029, 6032, -1, 1, 0),
      (6033, 6038, -1, 1, 0),
      (6039, 6046, -1, 1, 0),
      (6047, 6054, -1, 1, 0),
      (6055, 6066, -1, 1, 0),
      (6067, 6068, -1, 1, 0),
      (6069, 6076, 38, 1, 0),
      (6077, 6078, -1, 1, 0),
      (6079, 6088, 40, 1, 0),
      (6089, 6092, -1, 1, 0),
      (6093, 6104, 42, 1, 0));

   A_56 : constant Among_Array_Type (0 .. 2) := (
      (6105, 6112, -1, 1, 0),
      (6113, 6118, -1, 1, 0),
      (6119, 6124, -1, 1, 0));

   A_57 : constant Among_Array_Type (0 .. 2) := (
      (6125, 6132, -1, 1, 0),
      (6133, 6138, -1, 1, 0),
      (6139, 6144, -1, 1, 0));

   A_58 : constant Among_Array_Type (0 .. 5) := (
      (6145, 6146, -1, 1, 0),
      (6147, 6156, 0, 1, 0),
      (6157, 6170, 0, 1, 0),
      (6171, 6182, 0, 1, 0),
      (6183, 6196, 0, 1, 0),
      (6197, 6208, 0, 1, 0));

   A_59 : constant Among_Array_Type (0 .. 0) := (
      others => (6209, 6216, -1, 1, 0));

   A_60 : constant Among_Array_Type (0 .. 9) := (
      (6217, 6220, -1, 1, 0),
      (6221, 6230, 0, 1, 0),
      (6231, 6238, 0, 1, 0),
      (6239, 6244, 0, 1, 0),
      (6245, 6258, 0, 1, 0),
      (6259, 6270, -1, 1, 0),
      (6271, 6274, -1, 1, 0),
      (6275, 6280, 6, 1, 0),
      (6281, 6286, -1, 1, 0),
      (6287, 6296, -1, 1, 0));

   A_61 : constant Among_Array_Type (0 .. 2) := (
      (6297, 6304, -1, 1, 0),
      (6305, 6316, 0, 1, 0),
      (6317, 6328, 0, 1, 0));

   A_62 : constant Among_Array_Type (0 .. 5) := (
      (6329, 6330, -1, 1, 0),
      (6331, 6352, -1, 1, 0),
      (6353, 6370, -1, 1, 0),
      (6371, 6376, -1, 1, 0),
      (6377, 6378, -1, 1, 0),
      (6379, 6386, 4, 1, 0));

   A_63 : constant Among_Array_Type (0 .. 2) := (
      (6387, 6394, -1, 1, 0),
      (6395, 6406, 0, 1, 0),
      (6407, 6418, 0, 1, 0));

   A_64 : constant Among_Array_Type (0 .. 6) := (
      (6419, 6428, -1, 1, 0),
      (6429, 6444, 0, 1, 0),
      (6445, 6460, -1, 1, 0),
      (6461, 6462, -1, 1, 0),
      (6463, 6464, -1, 1, 0),
      (6465, 6468, -1, 1, 0),
      (6469, 6480, -1, 1, 0));

   A_65 : constant Among_Array_Type (0 .. 2) := (
      (6481, 6490, -1, 1, 0),
      (6491, 6498, -1, 1, 0),
      (6499, 6508, -1, 1, 0));

   A_66 : constant Among_Array_Type (0 .. 83) := (
      (6509, 6512, -1, 1, 0),
      (6513, 6518, 0, 1, 0),
      (6519, 6522, -1, 1, 0),
      (6523, 6526, -1, 1, 0),
      (6527, 6534, 3, 1, 0),
      (6535, 6542, 3, 1, 0),
      (6543, 6546, -1, 1, 0),
      (6547, 6552, -1, 1, 0),
      (6553, 6562, 7, 1, 0),
      (6563, 6566, -1, 1, 0),
      (6567, 6568, -1, 1, 0),
      (6569, 6572, 10, 1, 0),
      (6573, 6574, -1, 1, 0),
      (6575, 6580, 12, 1, 0),
      (6581, 6584, 12, 1, 0),
      (6585, 6590, 12, 1, 0),
      (6591, 6592, -1, 1, 0),
      (6593, 6602, 16, 1, 0),
      (6603, 6614, 16, 1, 0),
      (6615, 6628, 18, 1, 0),
      (6629, 6640, 16, 1, 0),
      (6641, 6654, 20, 1, 0),
      (6655, 6656, -1, 1, 0),
      (6657, 6670, 22, 1, 0),
      (6671, 6682, 22, 1, 0),
      (6683, 6696, 24, 1, 0),
      (6697, 6710, 22, 1, 0),
      (6711, 6726, 26, 1, 0),
      (6727, 6740, 22, 1, 0),
      (6741, 6752, 22, 1, 0),
      (6753, 6762, 22, 1, 0),
      (6763, 6772, 22, 1, 0),
      (6773, 6782, 22, 1, 0),
      (6783, 6796, 32, 1, 0),
      (6797, 6804, 22, 1, 0),
      (6805, 6816, 34, 1, 0),
      (6817, 6818, -1, 1, 0),
      (6819, 6820, -1, 1, 0),
      (6821, 6828, 37, 1, 0),
      (6829, 6836, 37, 1, 0),
      (6837, 6846, 39, 1, 0),
      (6847, 6854, 37, 1, 0),
      (6855, 6862, 37, 1, 0),
      (6863, 6872, 42, 1, 0),
      (6873, 6884, 37, 1, 0),
      (6885, 6898, 44, 1, 0),
      (6899, 6908, 37, 1, 0),
      (6909, 6918, 37, 1, 0),
      (6919, 6926, 37, 1, 0),
      (6927, 6936, 37, 1, 0),
      (6937, 6944, 37, 1, 0),
      (6945, 6948, 37, 1, 0),
      (6949, 6956, 51, 1, 0),
      (6957, 6962, 51, 1, 0),
      (6963, 6970, 51, 1, 0),
      (6971, 6974, 37, 1, 0),
      (6975, 6980, -1, 1, 0),
      (6981, 6990, 56, 1, 0),
      (6991, 7000, 56, 1, 0),
      (7001, 7012, 58, 1, 0),
      (7013, 7022, 56, 1, 0),
      (7023, 7032, 56, 1, 0),
      (7033, 7044, 61, 1, 0),
      (7045, 7048, -1, 1, 0),
      (7049, 7056, 63, 1, 0),
      (7057, 7060, -1, 1, 0),
      (7061, 7070, 65, 1, 0),
      (7071, 7086, 66, 1, 0),
      (7087, 7104, 67, 1, 0),
      (7105, 7112, 65, 1, 0),
      (7113, 7126, 65, 1, 0),
      (7127, 7142, 70, 1, 0),
      (7143, 7156, 65, 1, 0),
      (7157, 7172, 72, 1, 0),
      (7173, 7184, 65, 1, 0),
      (7185, 7198, 74, 1, 0),
      (7199, 7208, 65, 1, 0),
      (7209, 7220, 76, 1, 0),
      (7221, 7228, 65, 1, 0),
      (7229, 7238, 78, 1, 0),
      (7239, 7246, 65, 1, 0),
      (7247, 7254, 65, 1, 0),
      (7255, 7266, 81, 1, 0),
      (7267, 7268, -1, 1, 0));

   A_67 : constant Among_Array_Type (0 .. 7) := (
      (7269, 7278, -1, 1, 0),
      (7279, 7286, -1, 1, 0),
      (7287, 7294, -1, 1, 0),
      (7295, 7302, -1, 1, 0),
      (7303, 7312, -1, 1, 0),
      (7313, 7320, -1, 1, 0),
      (7321, 7328, -1, 1, 0),
      (7329, 7336, -1, 1, 0));


   procedure R_Has_min_length (Z : in out Context_Type; Result : out Boolean) is
   begin
      Result := (Length_Utf8 (Z) >= 3);
   end R_Has_min_length;

   procedure R_Tolower (Z : in out Context_Type; Result : out Boolean) is
      C : Result_Index;
      A : Integer;
      v_1 : Char_Index;
   begin
      --  repeat, line 113

      <<lab0>>

      loop
         v_1 := Z.L - Z.C;
         --  (, line 113
         Z.Ket := Z.C;         --  [, line 114

         --  substring, line 114
         Find_Among_Backward (Z, A_0, Among_String, null, A);
         if A = 0 then
            goto lab1;
         end if;
         Z.Bra := Z.C;         --  ], line 114

         --  among, line 114
         case A is
            when 1 =>
               --  (, line 115
               --  <-, line 115
               Slice_From (Z, "α");
            when 2 =>
               --  (, line 116
               --  <-, line 116
               Slice_From (Z, "β");
            when 3 =>
               --  (, line 117
               --  <-, line 117
               Slice_From (Z, "γ");
            when 4 =>
               --  (, line 118
               --  <-, line 118
               Slice_From (Z, "δ");
            when 5 =>
               --  (, line 119
               --  <-, line 119
               Slice_From (Z, "ε");
            when 6 =>
               --  (, line 120
               --  <-, line 120
               Slice_From (Z, "ζ");
            when 7 =>
               --  (, line 121
               --  <-, line 121
               Slice_From (Z, "η");
            when 8 =>
               --  (, line 122
               --  <-, line 122
               Slice_From (Z, "θ");
            when 9 =>
               --  (, line 123
               --  <-, line 123
               Slice_From (Z, "ι");
            when 10 =>
               --  (, line 124
               --  <-, line 124
               Slice_From (Z, "κ");
            when 11 =>
               --  (, line 125
               --  <-, line 125
               Slice_From (Z, "λ");
            when 12 =>
               --  (, line 126
               --  <-, line 126
               Slice_From (Z, "μ");
            when 13 =>
               --  (, line 127
               --  <-, line 127
               Slice_From (Z, "ν");
            when 14 =>
               --  (, line 128
               --  <-, line 128
               Slice_From (Z, "ξ");
            when 15 =>
               --  (, line 129
               --  <-, line 129
               Slice_From (Z, "ο");
            when 16 =>
               --  (, line 130
               --  <-, line 130
               Slice_From (Z, "π");
            when 17 =>
               --  (, line 131
               --  <-, line 131
               Slice_From (Z, "ρ");
            when 18 =>
               --  (, line 132
               --  <-, line 132
               Slice_From (Z, "σ");
            when 19 =>
               --  (, line 133
               --  <-, line 133
               Slice_From (Z, "τ");
            when 20 =>
               --  (, line 134
               --  <-, line 134
               Slice_From (Z, "υ");
            when 21 =>
               --  (, line 135
               --  <-, line 135
               Slice_From (Z, "φ");
            when 22 =>
               --  (, line 136
               --  <-, line 136
               Slice_From (Z, "χ");
            when 23 =>
               --  (, line 137
               --  <-, line 137
               Slice_From (Z, "ψ");
            when 24 =>
               --  (, line 138
               --  <-, line 138
               Slice_From (Z, "ω");
            when 25 =>
               --  (, line 160
               --  next, line 160
               C := Skip_Utf8_Backward (Z);
               if C < 0 then
                  goto lab1;
               end if;
               Z.C := C;
            when others =>
               null;
         end case;
         goto lab0;

         <<lab1>>
         Z.C := Z.L - v_1;

         exit;
      end loop;

      Result := True;
   end R_Tolower;

   procedure R_Step1 (Z : in out Context_Type; Result : out Boolean) is
      C : Result_Index;
      A : Integer;
   begin
      --  (, line 165
      Z.Ket := Z.C;      --  [, line 166

      --  substring, line 166
      Find_Among_Backward (Z, A_1, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 166

      --  among, line 166
      case A is
         when 1 =>
            --  (, line 167
            --  <-, line 167
            Slice_From (Z, "φα");
         when 2 =>
            --  (, line 168
            --  <-, line 168
            Slice_From (Z, "σκα");
         when 3 =>
            --  (, line 169
            --  <-, line 169
            Slice_From (Z, "ολο");
         when 4 =>
            --  (, line 170
            --  <-, line 170
            Slice_From (Z, "σο");
         when 5 =>
            --  (, line 171
            --  <-, line 171
            Slice_From (Z, "τατο");
         when 6 =>
            --  (, line 172
            --  <-, line 172
            Slice_From (Z, "κρε");
         when 7 =>
            --  (, line 173
            --  <-, line 173
            Slice_From (Z, "περ");
         when 8 =>
            --  (, line 174
            --  <-, line 174
            Slice_From (Z, "τερ");
         when 9 =>
            --  (, line 175
            --  <-, line 175
            Slice_From (Z, "φω");
         when 10 =>
            --  (, line 176
            --  <-, line 176
            Slice_From (Z, "καθεστ");
         when 11 =>
            --  (, line 177
            --  <-, line 177
            Slice_From (Z, "γεγον");
         when others =>
            null;
      end case;
      --  unset test1, line 179
      Z.B_Test1 := False;

      Result := True;
   end R_Step1;

   procedure R_Steps1 (Z : in out Context_Type; Result : out Boolean) is
      C : Result_Index;
      A : Integer;
   begin
      --  (, line 182
      Z.Ket := Z.C;      --  [, line 183

      --  substring, line 183
      Find_Among_Backward (Z, A_3, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 183

      --  (, line 185
      --  delete, line 186
      Slice_Del (Z);
      --  unset test1, line 187
      Z.B_Test1 := False;
      --  (, line 188
      Z.Ket := Z.C;      --  [, line 188

      Z.Bra := Z.C;      --  ], line 188

      --  substring, line 188
      Find_Among_Backward (Z, A_2, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 188
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  among, line 188
      case A is
         when 1 =>
            --  (, line 190
            --  <-, line 190
            Slice_From (Z, "ι");
         when 2 =>
            --  (, line 194
            --  <-, line 194
            Slice_From (Z, "ιζ");
         when others =>
            null;
      end case;

      Result := True;
   end R_Steps1;

   procedure R_Steps2 (Z : in out Context_Type; Result : out Boolean) is
      C : Result_Index;
      A : Integer;
   begin
      --  (, line 200
      Z.Ket := Z.C;      --  [, line 201

      --  substring, line 201
      Find_Among_Backward (Z, A_5, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 201

      --  (, line 202
      --  delete, line 203
      Slice_Del (Z);
      --  unset test1, line 204
      Z.B_Test1 := False;
      Z.Ket := Z.C;      --  [, line 205

      Z.Bra := Z.C;      --  ], line 205

      --  substring, line 205
      Find_Among_Backward (Z, A_4, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 205
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  (, line 206
      --  <-, line 206
      Slice_From (Z, "ων");

      Result := True;
   end R_Steps2;

   procedure R_Steps3 (Z : in out Context_Type; Result : out Boolean) is
      C : Result_Index;
      A : Integer;
      v_1 : Char_Index;
   begin
      --  (, line 212
      Z.Ket := Z.C;      --  [, line 213

      --  substring, line 213
      Find_Among_Backward (Z, A_7, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 213

      --  (, line 214
      --  delete, line 215
      Slice_Del (Z);
      --  unset test1, line 216
      Z.B_Test1 := False;
      --  or, line 217
      v_1 := Z.L - Z.C;
      --  (, line 217
      --  literal, line 217
      C := Eq_S_Backward (Z, "ισα");
      if C = 0 then
         goto lab1;
      end if;
      Z.C := Z.C - C;
      --  atlimit, line 217
      if Z.C > Z.Lb then
         goto lab1;
      end if;
      --  <-, line 217
      Slice_From (Z, "ισ");
      goto lab0;

      <<lab1>>
      Z.C := Z.L - v_1;
      --  (, line 218
      Z.Ket := Z.C;      --  [, line 218

      Z.Bra := Z.C;      --  ], line 218

      --  substring, line 218
      Find_Among_Backward (Z, A_6, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 218
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  among, line 218
      case A is
         when 1 =>
            --  (, line 222
            --  <-, line 222
            Slice_From (Z, "ι");
         when 2 =>
            --  (, line 225
            --  <-, line 225
            Slice_From (Z, "ισ");
         when others =>
            null;
      end case;

      <<lab0>>

      Result := True;
   end R_Steps3;

   procedure R_Steps4 (Z : in out Context_Type; Result : out Boolean) is
      C : Result_Index;
      A : Integer;
   begin
      --  (, line 231
      Z.Ket := Z.C;      --  [, line 232

      --  substring, line 232
      Find_Among_Backward (Z, A_9, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 232

      --  (, line 233
      --  delete, line 234
      Slice_Del (Z);
      --  unset test1, line 235
      Z.B_Test1 := False;
      Z.Ket := Z.C;      --  [, line 236

      Z.Bra := Z.C;      --  ], line 236

      --  substring, line 236
      if Z.C - 3 <= Z.Lb or else Check_Among (Z, Z.C - 1, 5, 16#80220000#) then
         Result := False;
         return;
         --  substring, line 236
      end if;
      Find_Among_Backward (Z, A_8, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 236
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  (, line 240
      --  <-, line 240
      Slice_From (Z, "ι");

      Result := True;
   end R_Steps4;

   procedure R_Steps5 (Z : in out Context_Type; Result : out Boolean) is
      C : Result_Index;
      A : Integer;
   begin
      --  (, line 246
      Z.Ket := Z.C;      --  [, line 247

      --  substring, line 247
      Find_Among_Backward (Z, A_11, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 247

      --  (, line 249
      --  delete, line 250
      Slice_Del (Z);
      --  unset test1, line 251
      Z.B_Test1 := False;
      --  (, line 252
      Z.Ket := Z.C;      --  [, line 252

      Z.Bra := Z.C;      --  ], line 252

      --  substring, line 252
      Find_Among_Backward (Z, A_10, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 252
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  among, line 252
      case A is
         when 1 =>
            --  (, line 254
            --  <-, line 254
            Slice_From (Z, "ι");
         when 2 =>
            --  (, line 258
            --  <-, line 258
            Slice_From (Z, "ιστ");
         when others =>
            null;
      end case;

      Result := True;
   end R_Steps5;

   procedure R_Steps6 (Z : in out Context_Type; Result : out Boolean) is
      C : Result_Index;
      A : Integer;
      v_1 : Char_Index;
   begin
      --  (, line 264
      Z.Ket := Z.C;      --  [, line 265

      --  substring, line 265
      Find_Among_Backward (Z, A_14, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 265

      --  (, line 266
      --  delete, line 267
      Slice_Del (Z);
      --  unset test1, line 268
      Z.B_Test1 := False;
      --  or, line 274
      v_1 := Z.L - Z.C;
      --  (, line 269
      Z.Ket := Z.C;      --  [, line 269

      Z.Bra := Z.C;      --  ], line 269

      --  substring, line 269
      if Z.C - 3 <= Z.Lb or else Character'Pos (Z.P (Z.C)) /= 181 then
         goto lab1;
         --  substring, line 269
      end if;
      Find_Among_Backward (Z, A_12, Among_String, null, A);
      if A = 0 then
         goto lab1;
      end if;
      --  atlimit, line 269
      if Z.C > Z.Lb then
         goto lab1;
      end if;
      --  among, line 269
      case A is
         when 1 =>
            --  (, line 271
            --  <-, line 271
            Slice_From (Z, "ισμ");
         when 2 =>
            --  (, line 273
            --  <-, line 273
            Slice_From (Z, "ι");
         when others =>
            null;
      end case;
      goto lab0;

      <<lab1>>
      Z.C := Z.L - v_1;
      --  (, line 275
      Z.Ket := Z.C;      --  [, line 275

      --  substring, line 275
      if Z.C - 9 <= Z.Lb or else (Character'Pos (Z.P (Z.C)) /= 186 and then Character'Pos (Z.P (Z.C)) /= 189) then
         Result := False;
         return;
         --  substring, line 275
      end if;
      Find_Among_Backward (Z, A_13, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 275

      --  among, line 275
      case A is
         when 1 =>
            --  (, line 276
            --  <-, line 276
            Slice_From (Z, "αγνωστ");
         when 2 =>
            --  (, line 277
            --  <-, line 277
            Slice_From (Z, "ατομ");
         when 3 =>
            --  (, line 278
            --  <-, line 278
            Slice_From (Z, "γνωστ");
         when 4 =>
            --  (, line 279
            --  <-, line 279
            Slice_From (Z, "εθν");
         when 5 =>
            --  (, line 280
            --  <-, line 280
            Slice_From (Z, "εκλεκτ");
         when 6 =>
            --  (, line 281
            --  <-, line 281
            Slice_From (Z, "σκεπτ");
         when 7 =>
            --  (, line 282
            --  <-, line 282
            Slice_From (Z, "τοπ");
         when 8 =>
            --  (, line 283
            --  <-, line 283
            Slice_From (Z, "αλεξανδρ");
         when 9 =>
            --  (, line 284
            --  <-, line 284
            Slice_From (Z, "βυζαντ");
         when 10 =>
            --  (, line 285
            --  <-, line 285
            Slice_From (Z, "θεατρ");
         when others =>
            null;
      end case;

      <<lab0>>

      Result := True;
   end R_Steps6;

   procedure R_Steps7 (Z : in out Context_Type; Result : out Boolean) is
      C : Result_Index;
      A : Integer;
   begin
      --  (, line 291
      Z.Ket := Z.C;      --  [, line 292

      --  substring, line 292
      if Z.C - 9 <= Z.Lb or else (Character'Pos (Z.P (Z.C)) /= 177 and then Character'Pos (Z.P (Z.C)) /= 185) then
         Result := False;
         return;
         --  substring, line 292
      end if;
      Find_Among_Backward (Z, A_16, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 292

      --  (, line 293
      --  delete, line 294
      Slice_Del (Z);
      --  unset test1, line 295
      Z.B_Test1 := False;
      Z.Ket := Z.C;      --  [, line 296

      Z.Bra := Z.C;      --  ], line 296

      --  substring, line 296
      if Z.C - 1 <= Z.Lb or else (Character'Pos (Z.P (Z.C)) /= 131 and then Character'Pos (Z.P (Z.C)) /= 135) then
         Result := False;
         return;
         --  substring, line 296
      end if;
      Find_Among_Backward (Z, A_15, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 296
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  (, line 298
      --  <-, line 298
      Slice_From (Z, "αρακ");

      Result := True;
   end R_Steps7;

   procedure R_Steps8 (Z : in out Context_Type; Result : out Boolean) is
      C : Result_Index;
      A : Integer;
      v_1 : Char_Index;
   begin
      --  (, line 304
      Z.Ket := Z.C;      --  [, line 305

      --  substring, line 305
      Find_Among_Backward (Z, A_18, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 305

      --  (, line 306
      --  delete, line 307
      Slice_Del (Z);
      --  unset test1, line 308
      Z.B_Test1 := False;
      --  or, line 323
      v_1 := Z.L - Z.C;
      --  (, line 309
      Z.Ket := Z.C;      --  [, line 309

      Z.Bra := Z.C;      --  ], line 309

      --  substring, line 309
      Find_Among_Backward (Z, A_17, Among_String, null, A);
      if A = 0 then
         goto lab1;
      end if;
      --  atlimit, line 309
      if Z.C > Z.Lb then
         goto lab1;
      end if;
      --  among, line 309
      case A is
         when 1 =>
            --  (, line 314
            --  <-, line 314
            Slice_From (Z, "ακ");
         when 2 =>
            --  (, line 322
            --  <-, line 322
            Slice_From (Z, "ιτσ");
         when others =>
            null;
      end case;
      goto lab0;

      <<lab1>>
      Z.C := Z.L - v_1;
      --  (, line 324
      Z.Ket := Z.C;      --  [, line 324

      Z.Bra := Z.C;      --  ], line 324

      --  literal, line 324
      C := Eq_S_Backward (Z, "κορ");
      if C = 0 then
         Result := False;
         return;
      end if;
      Z.C := Z.C - C;
      --  <-, line 324
      Slice_From (Z, "ιτσ");

      <<lab0>>

      Result := True;
   end R_Steps8;

   procedure R_Steps9 (Z : in out Context_Type; Result : out Boolean) is
      C : Result_Index;
      A : Integer;
      v_1 : Char_Index;
   begin
      --  (, line 329
      Z.Ket := Z.C;      --  [, line 330

      --  substring, line 330
      if Z.C - 7 <= Z.Lb or else Check_Among (Z, Z.C - 1, 5, 16#a0020000#) then
         Result := False;
         return;
         --  substring, line 330
      end if;
      Find_Among_Backward (Z, A_21, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 330

      --  (, line 331
      --  delete, line 332
      Slice_Del (Z);
      --  unset test1, line 333
      Z.B_Test1 := False;
      --  or, line 336
      v_1 := Z.L - Z.C;
      --  (, line 334
      Z.Ket := Z.C;      --  [, line 334

      Z.Bra := Z.C;      --  ], line 334

      --  substring, line 334
      Find_Among_Backward (Z, A_19, Among_String, null, A);
      if A = 0 then
         goto lab1;
      end if;
      --  atlimit, line 334
      if Z.C > Z.Lb then
         goto lab1;
      end if;
      --  (, line 335
      --  <-, line 335
      Slice_From (Z, "ιδ");
      goto lab0;

      <<lab1>>
      Z.C := Z.L - v_1;
      --  (, line 337
      Z.Ket := Z.C;      --  [, line 337

      Z.Bra := Z.C;      --  ], line 337

      --  substring, line 337
      if Z.C - 1 <= Z.Lb or else (Character'Pos (Z.P (Z.C)) /= 181 and then Character'Pos (Z.P (Z.C)) /= 189) then
         Result := False;
         return;
         --  substring, line 337
      end if;
      Find_Among_Backward (Z, A_20, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  (, line 338
      --  <-, line 338
      Slice_From (Z, "ιδ");

      <<lab0>>

      Result := True;
   end R_Steps9;

   procedure R_Steps10 (Z : in out Context_Type; Result : out Boolean) is
      C : Result_Index;
      A : Integer;
   begin
      --  (, line 344
      Z.Ket := Z.C;      --  [, line 345

      --  substring, line 345
      Find_Among_Backward (Z, A_23, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 345

      --  (, line 346
      --  delete, line 347
      Slice_Del (Z);
      --  unset test1, line 348
      Z.B_Test1 := False;
      Z.Ket := Z.C;      --  [, line 349

      Z.Bra := Z.C;      --  ], line 349

      --  substring, line 349
      Find_Among_Backward (Z, A_22, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 349
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  (, line 351
      --  <-, line 351
      Slice_From (Z, "ισκ");

      Result := True;
   end R_Steps10;

   procedure R_Step2a (Z : in out Context_Type; Result : out Boolean) is
      C : Result_Index;
      A : Integer;
      v_1 : Char_Index;
   begin
      --  (, line 357
      Z.Ket := Z.C;      --  [, line 358

      --  substring, line 358
      if Z.C - 7 <= Z.Lb or else (Character'Pos (Z.P (Z.C)) /= 131 and then Character'Pos (Z.P (Z.C)) /= 189) then
         Result := False;
         return;
         --  substring, line 358
      end if;
      Find_Among_Backward (Z, A_24, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 358

      --  (, line 359
      --  delete, line 359
      Slice_Del (Z);
      --  not, line 361
      v_1 := Z.L - Z.C;
      --  (, line 361
      --  substring, line 361
      Find_Among_Backward (Z, A_25, Among_String, null, A);
      if A = 0 then
         goto lab0;
      end if;
      Result := False;
      return;

      <<lab0>>
      Z.C := Z.L - v_1;
      --  <+, line 364
      C := Z.C;
      Insert (Z, Z.C, Z.C, "αδ");
      Z.C := C;

      Result := True;
   end R_Step2a;

   procedure R_Step2b (Z : in out Context_Type; Result : out Boolean) is
      C : Result_Index;
      A : Integer;
   begin
      --  (, line 367
      Z.Ket := Z.C;      --  [, line 368

      --  substring, line 368
      if Z.C - 7 <= Z.Lb or else (Character'Pos (Z.P (Z.C)) /= 131 and then Character'Pos (Z.P (Z.C)) /= 189) then
         Result := False;
         return;
         --  substring, line 368
      end if;
      Find_Among_Backward (Z, A_26, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 368

      --  (, line 369
      --  delete, line 369
      Slice_Del (Z);
      Z.Ket := Z.C;      --  [, line 371

      Z.Bra := Z.C;      --  ], line 371

      --  substring, line 371
      if Z.C - 3 <= Z.Lb or else (Character'Pos (Z.P (Z.C)) /= 128 and then Character'Pos (Z.P (Z.C)) /= 187) then
         Result := False;
         return;
         --  substring, line 371
      end if;
      Find_Among_Backward (Z, A_27, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  (, line 372
      --  <-, line 372
      Slice_From (Z, "εδ");

      Result := True;
   end R_Step2b;

   procedure R_Step2c (Z : in out Context_Type; Result : out Boolean) is
      C : Result_Index;
      A : Integer;
   begin
      --  (, line 376
      Z.Ket := Z.C;      --  [, line 377

      --  substring, line 377
      if Z.C - 9 <= Z.Lb or else (Character'Pos (Z.P (Z.C)) /= 131 and then Character'Pos (Z.P (Z.C)) /= 189) then
         Result := False;
         return;
         --  substring, line 377
      end if;
      Find_Among_Backward (Z, A_28, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 377

      --  (, line 378
      --  delete, line 378
      Slice_Del (Z);
      Z.Ket := Z.C;      --  [, line 380

      Z.Bra := Z.C;      --  ], line 380

      --  substring, line 380
      Find_Among_Backward (Z, A_29, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  (, line 382
      --  <-, line 382
      Slice_From (Z, "ουδ");

      Result := True;
   end R_Step2c;

   procedure R_Step2d (Z : in out Context_Type; Result : out Boolean) is
      C : Result_Index;
      A : Integer;
   begin
      --  (, line 386
      Z.Ket := Z.C;      --  [, line 387

      --  substring, line 387
      if Z.C - 5 <= Z.Lb or else (Character'Pos (Z.P (Z.C)) /= 131 and then Character'Pos (Z.P (Z.C)) /= 189) then
         Result := False;
         return;
         --  substring, line 387
      end if;
      Find_Among_Backward (Z, A_30, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 387

      --  (, line 388
      --  delete, line 388
      Slice_Del (Z);
      --  unset test1, line 388
      Z.B_Test1 := False;
      Z.Ket := Z.C;      --  [, line 390

      Z.Bra := Z.C;      --  ], line 390

      --  substring, line 390
      Find_Among_Backward (Z, A_31, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 390
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  (, line 391
      --  <-, line 391
      Slice_From (Z, "ε");

      Result := True;
   end R_Step2d;

   procedure R_Step3 (Z : in out Context_Type; Result : out Boolean) is
      C : Result_Index;
      A : Integer;
   begin
      --  (, line 395
      Z.Ket := Z.C;      --  [, line 396

      --  substring, line 396
      Find_Among_Backward (Z, A_32, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 396

      --  (, line 397
      --  delete, line 397
      Slice_Del (Z);
      --  unset test1, line 397
      Z.B_Test1 := False;
      --  (, line 399
      Z.Ket := Z.C;      --  [, line 399

      Z.Bra := Z.C;      --  ], line 399

      In_Grouping_Backward (Z, G_V, 945, 969, False, C);
      if C /= 0 then
         Result := False;
         return;
      end if;
      --  <-, line 399
      Slice_From (Z, "ι");

      Result := True;
   end R_Step3;

   procedure R_Step4 (Z : in out Context_Type; Result : out Boolean) is
      C : Result_Index;
      A : Integer;
      v_1 : Char_Index;
   begin
      --  (, line 402
      Z.Ket := Z.C;      --  [, line 403

      --  substring, line 403
      Find_Among_Backward (Z, A_33, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 403

      --  (, line 404
      --  delete, line 404
      Slice_Del (Z);
      --  unset test1, line 404
      Z.B_Test1 := False;
      --  or, line 406
      v_1 := Z.L - Z.C;
      --  (, line 406
      Z.Ket := Z.C;      --  [, line 406

      Z.Bra := Z.C;      --  ], line 406

      In_Grouping_Backward (Z, G_V, 945, 969, False, C);
      if C /= 0 then
         goto lab1;
      end if;
      --  <-, line 406
      Slice_From (Z, "ικ");
      goto lab0;

      <<lab1>>
      Z.C := Z.L - v_1;
      Z.Ket := Z.C;      --  [, line 407


      <<lab0>>
      Z.Bra := Z.C;      --  ], line 407

      --  substring, line 407
      Find_Among_Backward (Z, A_34, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 407
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  (, line 412
      --  <-, line 412
      Slice_From (Z, "ικ");

      Result := True;
   end R_Step4;

   procedure R_Step5a (Z : in out Context_Type; Result : out Boolean) is
      C : Result_Index;
      A : Integer;
      v_1 : Char_Index;
      v_2 : Char_Index;
   begin
      --  (, line 416
      --  do, line 417
      v_1 := Z.L - Z.C;
      --  (, line 417
      --  literal, line 417
      C := Eq_S_Backward (Z, "αγαμε");
      if C = 0 then
         goto lab0;
      end if;
      Z.C := Z.C - C;
      --  atlimit, line 417
      if Z.C > Z.Lb then
         goto lab0;
      end if;
      --  <-, line 417
      Slice_From (Z, "αγαμ");

      <<lab0>>
      Z.C := Z.L - v_1;
      --  do, line 418
      v_2 := Z.L - Z.C;
      --  (, line 418
      Z.Ket := Z.C;      --  [, line 419

      --  substring, line 419
      if Z.C - 9 <= Z.Lb or else Character'Pos (Z.P (Z.C)) /= 181 then
         goto lab1;
         --  substring, line 419
      end if;
      Find_Among_Backward (Z, A_35, Among_String, null, A);
      if A = 0 then
         goto lab1;
      end if;
      Z.Bra := Z.C;      --  ], line 419

      --  (, line 420
      --  delete, line 420
      Slice_Del (Z);
      --  unset test1, line 420
      Z.B_Test1 := False;

      <<lab1>>
      Z.C := Z.L - v_2;
      Z.Ket := Z.C;      --  [, line 423

      --  literal, line 423
      C := Eq_S_Backward (Z, "αμε");
      if C = 0 then
         Result := False;
         return;
      end if;
      Z.C := Z.C - C;
      Z.Bra := Z.C;      --  ], line 423

      --  delete, line 424
      Slice_Del (Z);
      --  unset test1, line 425
      Z.B_Test1 := False;
      Z.Ket := Z.C;      --  [, line 426

      Z.Bra := Z.C;      --  ], line 426

      --  substring, line 426
      Find_Among_Backward (Z, A_36, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 426
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  (, line 428
      --  <-, line 428
      Slice_From (Z, "αμ");

      Result := True;
   end R_Step5a;

   procedure R_Step5b (Z : in out Context_Type; Result : out Boolean) is
      C : Result_Index;
      A : Integer;
      v_1 : Char_Index;
      v_2 : Char_Index;
   begin
      --  (, line 432
      --  do, line 433
      v_1 := Z.L - Z.C;
      --  (, line 433
      Z.Ket := Z.C;      --  [, line 434

      --  substring, line 434
      if Z.C - 9 <= Z.Lb or else Character'Pos (Z.P (Z.C)) /= 181 then
         goto lab0;
         --  substring, line 434
      end if;
      Find_Among_Backward (Z, A_38, Among_String, null, A);
      if A = 0 then
         goto lab0;
      end if;
      Z.Bra := Z.C;      --  ], line 434

      --  (, line 436
      --  delete, line 437
      Slice_Del (Z);
      --  unset test1, line 438
      Z.B_Test1 := False;
      Z.Ket := Z.C;      --  [, line 439

      Z.Bra := Z.C;      --  ], line 439

      --  substring, line 439
      if Z.C - 3 <= Z.Lb or else (Character'Pos (Z.P (Z.C)) /= 129 and then Character'Pos (Z.P (Z.C)) /= 131) then
         goto lab0;
         --  substring, line 439
      end if;
      Find_Among_Backward (Z, A_37, Among_String, null, A);
      if A = 0 then
         goto lab0;
      end if;
      --  atlimit, line 439
      if Z.C > Z.Lb then
         goto lab0;
      end if;
      --  (, line 440
      --  <-, line 440
      Slice_From (Z, "αγαν");

      <<lab0>>
      Z.C := Z.L - v_1;
      Z.Ket := Z.C;      --  [, line 445

      --  literal, line 445
      C := Eq_S_Backward (Z, "ανε");
      if C = 0 then
         Result := False;
         return;
      end if;
      Z.C := Z.C - C;
      Z.Bra := Z.C;      --  ], line 445

      --  delete, line 446
      Slice_Del (Z);
      --  unset test1, line 447
      Z.B_Test1 := False;
      --  or, line 448
      v_2 := Z.L - Z.C;
      --  (, line 448
      Z.Ket := Z.C;      --  [, line 448

      Z.Bra := Z.C;      --  ], line 448

      In_Grouping_Backward (Z, G_V2, 945, 969, False, C);
      if C /= 0 then
         goto lab2;
      end if;
      --  <-, line 448
      Slice_From (Z, "αν");
      goto lab1;

      <<lab2>>
      Z.C := Z.L - v_2;
      Z.Ket := Z.C;      --  [, line 449


      <<lab1>>
      Z.Bra := Z.C;      --  ], line 449

      --  substring, line 449
      Find_Among_Backward (Z, A_39, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 449
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  (, line 466
      --  <-, line 466
      Slice_From (Z, "αν");

      Result := True;
   end R_Step5b;

   procedure R_Step5c (Z : in out Context_Type; Result : out Boolean) is
      C : Result_Index;
      A : Integer;
      v_1 : Char_Index;
      v_2 : Char_Index;
   begin
      --  (, line 470
      --  do, line 471
      v_1 := Z.L - Z.C;
      --  (, line 471
      Z.Ket := Z.C;      --  [, line 472

      --  substring, line 472
      if Z.C - 9 <= Z.Lb or else Character'Pos (Z.P (Z.C)) /= 181 then
         goto lab0;
         --  substring, line 472
      end if;
      Find_Among_Backward (Z, A_40, Among_String, null, A);
      if A = 0 then
         goto lab0;
      end if;
      Z.Bra := Z.C;      --  ], line 472

      --  (, line 473
      --  delete, line 473
      Slice_Del (Z);
      --  unset test1, line 473
      Z.B_Test1 := False;

      <<lab0>>
      Z.C := Z.L - v_1;
      Z.Ket := Z.C;      --  [, line 476

      --  literal, line 476
      C := Eq_S_Backward (Z, "ετε");
      if C = 0 then
         Result := False;
         return;
      end if;
      Z.C := Z.C - C;
      Z.Bra := Z.C;      --  ], line 476

      --  delete, line 477
      Slice_Del (Z);
      --  unset test1, line 478
      Z.B_Test1 := False;
      --  or, line 479
      v_2 := Z.L - Z.C;
      --  (, line 479
      Z.Ket := Z.C;      --  [, line 479

      Z.Bra := Z.C;      --  ], line 479

      In_Grouping_Backward (Z, G_V2, 945, 969, False, C);
      if C /= 0 then
         goto lab2;
      end if;
      --  <-, line 479
      Slice_From (Z, "ετ");
      goto lab1;

      <<lab2>>
      Z.C := Z.L - v_2;
      --  (, line 480
      Z.Ket := Z.C;      --  [, line 480

      Z.Bra := Z.C;      --  ], line 480

      --  substring, line 480
      Find_Among_Backward (Z, A_41, Among_String, null, A);
      if A = 0 then
         goto lab3;
      end if;
      --  (, line 484
      --  <-, line 484
      Slice_From (Z, "ετ");
      goto lab1;

      <<lab3>>
      Z.C := Z.L - v_2;
      Z.Ket := Z.C;      --  [, line 486


      <<lab1>>
      Z.Bra := Z.C;      --  ], line 486

      --  substring, line 486
      Find_Among_Backward (Z, A_42, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 486
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  (, line 490
      --  <-, line 490
      Slice_From (Z, "ετ");

      Result := True;
   end R_Step5c;

   procedure R_Step5d (Z : in out Context_Type; Result : out Boolean) is
      C : Result_Index;
      A : Integer;
      v_1 : Char_Index;
   begin
      --  (, line 494
      Z.Ket := Z.C;      --  [, line 495

      --  substring, line 495
      if Z.C - 9 <= Z.Lb or else Character'Pos (Z.P (Z.C)) /= 131 then
         Result := False;
         return;
         --  substring, line 495
      end if;
      Find_Among_Backward (Z, A_43, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 495

      --  (, line 496
      --  delete, line 497
      Slice_Del (Z);
      --  unset test1, line 498
      Z.B_Test1 := False;
      --  or, line 499
      v_1 := Z.L - Z.C;
      --  (, line 499
      Z.Ket := Z.C;      --  [, line 499

      Z.Bra := Z.C;      --  ], line 499

      --  literal, line 499
      C := Eq_S_Backward (Z, "αρχ");
      if C = 0 then
         goto lab1;
      end if;
      Z.C := Z.C - C;
      --  atlimit, line 499
      if Z.C > Z.Lb then
         goto lab1;
      end if;
      --  <-, line 499
      Slice_From (Z, "οντ");
      goto lab0;

      <<lab1>>
      Z.C := Z.L - v_1;
      --  (, line 500
      Z.Ket := Z.C;      --  [, line 500

      Z.Bra := Z.C;      --  ], line 500

      --  literal, line 500
      C := Eq_S_Backward (Z, "κρε");
      if C = 0 then
         Result := False;
         return;
      end if;
      Z.C := Z.C - C;
      --  <-, line 500
      Slice_From (Z, "ωντ");

      <<lab0>>

      Result := True;
   end R_Step5d;

   procedure R_Step5e (Z : in out Context_Type; Result : out Boolean) is
      C : Result_Index;
      A : Integer;
   begin
      --  (, line 505
      Z.Ket := Z.C;      --  [, line 506

      --  substring, line 506
      if Z.C - 11 <= Z.Lb or else Character'Pos (Z.P (Z.C)) /= 181 then
         Result := False;
         return;
         --  substring, line 506
      end if;
      Find_Among_Backward (Z, A_44, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 506

      --  (, line 507
      --  delete, line 508
      Slice_Del (Z);
      --  unset test1, line 509
      Z.B_Test1 := False;
      --  (, line 510
      Z.Ket := Z.C;      --  [, line 510

      Z.Bra := Z.C;      --  ], line 510

      --  literal, line 510
      C := Eq_S_Backward (Z, "ον");
      if C = 0 then
         Result := False;
         return;
      end if;
      Z.C := Z.C - C;
      --  atlimit, line 510
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  <-, line 510
      Slice_From (Z, "ομαστ");

      Result := True;
   end R_Step5e;

   procedure R_Step5f (Z : in out Context_Type; Result : out Boolean) is
      C : Result_Index;
      A : Integer;
      v_1 : Char_Index;
   begin
      --  (, line 515
      --  do, line 516
      v_1 := Z.L - Z.C;
      --  (, line 516
      Z.Ket := Z.C;      --  [, line 517

      --  literal, line 517
      C := Eq_S_Backward (Z, "ιεστε");
      if C = 0 then
         goto lab0;
      end if;
      Z.C := Z.C - C;
      Z.Bra := Z.C;      --  ], line 517

      --  delete, line 518
      Slice_Del (Z);
      --  unset test1, line 519
      Z.B_Test1 := False;
      Z.Ket := Z.C;      --  [, line 520

      Z.Bra := Z.C;      --  ], line 520

      --  substring, line 520
      if Z.C - 1 <= Z.Lb or else (Character'Pos (Z.P (Z.C)) /= 128 and then Character'Pos (Z.P (Z.C)) /= 134) then
         goto lab0;
         --  substring, line 520
      end if;
      Find_Among_Backward (Z, A_45, Among_String, null, A);
      if A = 0 then
         goto lab0;
      end if;
      --  atlimit, line 520
      if Z.C > Z.Lb then
         goto lab0;
      end if;
      --  (, line 521
      --  <-, line 521
      Slice_From (Z, "ιεστ");

      <<lab0>>
      Z.C := Z.L - v_1;
      Z.Ket := Z.C;      --  [, line 524

      --  literal, line 524
      C := Eq_S_Backward (Z, "εστε");
      if C = 0 then
         Result := False;
         return;
      end if;
      Z.C := Z.C - C;
      Z.Bra := Z.C;      --  ], line 524

      --  delete, line 525
      Slice_Del (Z);
      --  unset test1, line 526
      Z.B_Test1 := False;
      Z.Ket := Z.C;      --  [, line 527

      Z.Bra := Z.C;      --  ], line 527

      --  substring, line 527
      Find_Among_Backward (Z, A_46, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 527
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  (, line 529
      --  <-, line 529
      Slice_From (Z, "ιεστ");

      Result := True;
   end R_Step5f;

   procedure R_Step5g (Z : in out Context_Type; Result : out Boolean) is
      C : Result_Index;
      A : Integer;
      v_1 : Char_Index;
      v_2 : Char_Index;
   begin
      --  (, line 533
      --  do, line 534
      v_1 := Z.L - Z.C;
      --  (, line 534
      Z.Ket := Z.C;      --  [, line 535

      --  substring, line 535
      Find_Among_Backward (Z, A_47, Among_String, null, A);
      if A = 0 then
         goto lab0;
      end if;
      Z.Bra := Z.C;      --  ], line 535

      --  (, line 536
      --  delete, line 536
      Slice_Del (Z);
      --  unset test1, line 536
      Z.B_Test1 := False;

      <<lab0>>
      Z.C := Z.L - v_1;
      Z.Ket := Z.C;      --  [, line 539

      --  substring, line 539
      Find_Among_Backward (Z, A_50, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 539

      --  (, line 540
      --  delete, line 541
      Slice_Del (Z);
      --  unset test1, line 542
      Z.B_Test1 := False;
      --  or, line 545
      v_2 := Z.L - Z.C;
      --  (, line 543
      Z.Ket := Z.C;      --  [, line 543

      Z.Bra := Z.C;      --  ], line 543

      --  substring, line 543
      Find_Among_Backward (Z, A_48, Among_String, null, A);
      if A = 0 then
         goto lab2;
      end if;
      --  (, line 544
      --  <-, line 544
      Slice_From (Z, "ηκ");
      goto lab1;

      <<lab2>>
      Z.C := Z.L - v_2;
      --  (, line 546
      Z.Ket := Z.C;      --  [, line 546

      Z.Bra := Z.C;      --  ], line 546

      --  substring, line 546
      if Z.C - 1 <= Z.Lb or else Character'Pos (Z.P (Z.C)) /= 184 then
         Result := False;
         return;
         --  substring, line 546
      end if;
      Find_Among_Backward (Z, A_49, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 546
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  (, line 547
      --  <-, line 547
      Slice_From (Z, "ηκ");

      <<lab1>>

      Result := True;
   end R_Step5g;

   procedure R_Step5h (Z : in out Context_Type; Result : out Boolean) is
      C : Result_Index;
      A : Integer;
      v_1 : Char_Index;
   begin
      --  (, line 553
      Z.Ket := Z.C;      --  [, line 554

      --  substring, line 554
      Find_Among_Backward (Z, A_53, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 554

      --  (, line 555
      --  delete, line 556
      Slice_Del (Z);
      --  unset test1, line 557
      Z.B_Test1 := False;
      --  or, line 562
      v_1 := Z.L - Z.C;
      --  (, line 558
      Z.Ket := Z.C;      --  [, line 558

      Z.Bra := Z.C;      --  ], line 558

      --  substring, line 558
      Find_Among_Backward (Z, A_51, Among_String, null, A);
      if A = 0 then
         goto lab1;
      end if;
      --  (, line 560
      --  <-, line 560
      Slice_From (Z, "ουσ");
      goto lab0;

      <<lab1>>
      Z.C := Z.L - v_1;
      --  (, line 563
      Z.Ket := Z.C;      --  [, line 563

      Z.Bra := Z.C;      --  ], line 563

      --  substring, line 563
      Find_Among_Backward (Z, A_52, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 563
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  (, line 567
      --  <-, line 567
      Slice_From (Z, "ουσ");

      <<lab0>>

      Result := True;
   end R_Step5h;

   procedure R_Step5i (Z : in out Context_Type; Result : out Boolean) is
      C : Result_Index;
      A : Integer;
      v_1 : Char_Index;
      v_2 : Char_Index;
   begin
      --  (, line 573
      Z.Ket := Z.C;      --  [, line 574

      --  substring, line 574
      Find_Among_Backward (Z, A_56, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 574

      --  (, line 575
      --  delete, line 576
      Slice_Del (Z);
      --  unset test1, line 577
      Z.B_Test1 := False;
      --  or, line 578
      v_1 := Z.L - Z.C;
      --  (, line 578
      Z.Ket := Z.C;      --  [, line 578

      Z.Bra := Z.C;      --  ], line 578

      --  literal, line 578
      C := Eq_S_Backward (Z, "κολλ");
      if C = 0 then
         goto lab1;
      end if;
      Z.C := Z.C - C;
      --  <-, line 578
      Slice_From (Z, "αγ");
      goto lab0;

      <<lab1>>
      Z.C := Z.L - v_1;
      --  or, line 583
      v_2 := Z.L - Z.C;
      --  (, line 579
      Z.Ket := Z.C;      --  [, line 579

      Z.Bra := Z.C;      --  ], line 579

      --  substring, line 579
      Find_Among_Backward (Z, A_54, Among_String, null, A);
      if A = 0 then
         goto lab3;
      end if;
      --  among, line 579
      case A is
         when 1 =>
            --  (, line 582
            --  <-, line 582
            Slice_From (Z, "αγ");
         when others =>
            null;
      end case;
      goto lab2;

      <<lab3>>
      Z.C := Z.L - v_2;
      --  (, line 584
      Z.Ket := Z.C;      --  [, line 584

      Z.Bra := Z.C;      --  ], line 584

      --  substring, line 584
      Find_Among_Backward (Z, A_55, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 584
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  (, line 590
      --  <-, line 590
      Slice_From (Z, "αγ");

      <<lab2>>

      <<lab0>>

      Result := True;
   end R_Step5i;

   procedure R_Step5j (Z : in out Context_Type; Result : out Boolean) is
      C : Result_Index;
      A : Integer;
   begin
      --  (, line 597
      Z.Ket := Z.C;      --  [, line 598

      --  substring, line 598
      Find_Among_Backward (Z, A_57, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 598

      --  (, line 599
      --  delete, line 599
      Slice_Del (Z);
      --  unset test1, line 599
      Z.B_Test1 := False;
      Z.Ket := Z.C;      --  [, line 601

      Z.Bra := Z.C;      --  ], line 601

      --  substring, line 601
      if Z.C - 1 <= Z.Lb or else Character'Pos (Z.P (Z.C)) /= 189 then
         Result := False;
         return;
         --  substring, line 601
      end if;
      Find_Among_Backward (Z, A_58, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 601
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  (, line 602
      --  <-, line 602
      Slice_From (Z, "ησ");

      Result := True;
   end R_Step5j;

   procedure R_Step5k (Z : in out Context_Type; Result : out Boolean) is
      C : Result_Index;
      A : Integer;
   begin
      --  (, line 606
      Z.Ket := Z.C;      --  [, line 607

      --  substring, line 607
      if Z.C - 7 <= Z.Lb or else Character'Pos (Z.P (Z.C)) /= 181 then
         Result := False;
         return;
         --  substring, line 607
      end if;
      Find_Among_Backward (Z, A_59, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 607

      --  (, line 608
      --  delete, line 608
      Slice_Del (Z);
      --  unset test1, line 608
      Z.B_Test1 := False;
      Z.Ket := Z.C;      --  [, line 610

      Z.Bra := Z.C;      --  ], line 610

      --  substring, line 610
      Find_Among_Backward (Z, A_60, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 610
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  (, line 612
      --  <-, line 612
      Slice_From (Z, "ηστ");

      Result := True;
   end R_Step5k;

   procedure R_Step5l (Z : in out Context_Type; Result : out Boolean) is
      C : Result_Index;
      A : Integer;
   begin
      --  (, line 616
      Z.Ket := Z.C;      --  [, line 617

      --  substring, line 617
      if Z.C - 7 <= Z.Lb or else Character'Pos (Z.P (Z.C)) /= 181 then
         Result := False;
         return;
         --  substring, line 617
      end if;
      Find_Among_Backward (Z, A_61, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 617

      --  (, line 618
      --  delete, line 618
      Slice_Del (Z);
      --  unset test1, line 618
      Z.B_Test1 := False;
      Z.Ket := Z.C;      --  [, line 620

      Z.Bra := Z.C;      --  ], line 620

      --  substring, line 620
      Find_Among_Backward (Z, A_62, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 620
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  (, line 621
      --  <-, line 621
      Slice_From (Z, "ουν");

      Result := True;
   end R_Step5l;

   procedure R_Step5m (Z : in out Context_Type; Result : out Boolean) is
      C : Result_Index;
      A : Integer;
   begin
      --  (, line 625
      Z.Ket := Z.C;      --  [, line 626

      --  substring, line 626
      if Z.C - 7 <= Z.Lb or else Character'Pos (Z.P (Z.C)) /= 181 then
         Result := False;
         return;
         --  substring, line 626
      end if;
      Find_Among_Backward (Z, A_63, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 626

      --  (, line 627
      --  delete, line 627
      Slice_Del (Z);
      --  unset test1, line 627
      Z.B_Test1 := False;
      Z.Ket := Z.C;      --  [, line 629

      Z.Bra := Z.C;      --  ], line 629

      --  substring, line 629
      Find_Among_Backward (Z, A_64, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      --  atlimit, line 629
      if Z.C > Z.Lb then
         Result := False;
         return;
      end if;
      --  (, line 631
      --  <-, line 631
      Slice_From (Z, "ουμ");

      Result := True;
   end R_Step5m;

   procedure R_Step6 (Z : in out Context_Type; Result : out Boolean) is
      C : Result_Index;
      A : Integer;
      v_1 : Char_Index;
   begin
      --  (, line 635
      --  do, line 636
      v_1 := Z.L - Z.C;
      --  (, line 636
      Z.Ket := Z.C;      --  [, line 637

      --  substring, line 637
      Find_Among_Backward (Z, A_65, Among_String, null, A);
      if A = 0 then
         goto lab0;
      end if;
      Z.Bra := Z.C;      --  ], line 637

      --  (, line 638
      --  <-, line 638
      Slice_From (Z, "μα");

      <<lab0>>
      Z.C := Z.L - v_1;
      --  Boolean test test1, line 641
      if not Z.B_Test1 then
         Result := False;
         return;
      end if;
      Z.Ket := Z.C;      --  [, line 642

      --  substring, line 642
      Find_Among_Backward (Z, A_66, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 642

      --  (, line 652
      --  delete, line 652
      Slice_Del (Z);

      Result := True;
   end R_Step6;

   procedure R_Step7 (Z : in out Context_Type; Result : out Boolean) is
      C : Result_Index;
      A : Integer;
   begin
      --  (, line 656
      Z.Ket := Z.C;      --  [, line 657

      --  substring, line 657
      if Z.C - 7 <= Z.Lb or else (Character'Pos (Z.P (Z.C)) /= 129 and then Character'Pos (Z.P (Z.C)) /= 132) then
         Result := False;
         return;
         --  substring, line 657
      end if;
      Find_Among_Backward (Z, A_67, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 657

      --  (, line 658
      --  delete, line 658
      Slice_Del (Z);

      Result := True;
   end R_Step7;

   procedure Stem (Z : in out Context_Type; Result : out Boolean) is
      C : Result_Index;
      A : Integer;
      v_1 : Char_Index;
      v_2 : Char_Index;
      v_3 : Char_Index;
      v_4 : Char_Index;
      v_5 : Char_Index;
      v_6 : Char_Index;
      v_7 : Char_Index;
      v_8 : Char_Index;
      v_9 : Char_Index;
      v_10 : Char_Index;
      v_11 : Char_Index;
      v_12 : Char_Index;
      v_13 : Char_Index;
      v_14 : Char_Index;
      v_15 : Char_Index;
      v_16 : Char_Index;
      v_17 : Char_Index;
      v_18 : Char_Index;
      v_19 : Char_Index;
      v_20 : Char_Index;
      v_21 : Char_Index;
      v_22 : Char_Index;
      v_23 : Char_Index;
      v_24 : Char_Index;
      v_25 : Char_Index;
      v_26 : Char_Index;
      v_27 : Char_Index;
      v_28 : Char_Index;
      v_29 : Char_Index;
      v_30 : Char_Index;
      v_31 : Char_Index;
      v_32 : Char_Index;
      v_33 : Char_Index;
   begin
      Z.Lb := Z.C; Z.C := Z.L;      --  backwards, line 664

      --  (, line 664
      --  do, line 665
      v_1 := Z.L - Z.C;
      --  call tolower, line 665
      R_Tolower (Z, Result);
      Z.C := Z.L - v_1;
      --  call has_min_length, line 666
      R_Has_min_length (Z, Result);
      if not Result then
         Result := False;
         return;
      end if;
      --  set test1, line 667
      Z.B_Test1 := True;
      --  do, line 668
      v_2 := Z.L - Z.C;
      --  call step1, line 668
      R_Step1 (Z, Result);
      Z.C := Z.L - v_2;
      --  do, line 669
      v_3 := Z.L - Z.C;
      --  call steps1, line 669
      R_Steps1 (Z, Result);
      Z.C := Z.L - v_3;
      --  do, line 670
      v_4 := Z.L - Z.C;
      --  call steps2, line 670
      R_Steps2 (Z, Result);
      Z.C := Z.L - v_4;
      --  do, line 671
      v_5 := Z.L - Z.C;
      --  call steps3, line 671
      R_Steps3 (Z, Result);
      Z.C := Z.L - v_5;
      --  do, line 672
      v_6 := Z.L - Z.C;
      --  call steps4, line 672
      R_Steps4 (Z, Result);
      Z.C := Z.L - v_6;
      --  do, line 673
      v_7 := Z.L - Z.C;
      --  call steps5, line 673
      R_Steps5 (Z, Result);
      Z.C := Z.L - v_7;
      --  do, line 674
      v_8 := Z.L - Z.C;
      --  call steps6, line 674
      R_Steps6 (Z, Result);
      Z.C := Z.L - v_8;
      --  do, line 675
      v_9 := Z.L - Z.C;
      --  call steps7, line 675
      R_Steps7 (Z, Result);
      Z.C := Z.L - v_9;
      --  do, line 676
      v_10 := Z.L - Z.C;
      --  call steps8, line 676
      R_Steps8 (Z, Result);
      Z.C := Z.L - v_10;
      --  do, line 677
      v_11 := Z.L - Z.C;
      --  call steps9, line 677
      R_Steps9 (Z, Result);
      Z.C := Z.L - v_11;
      --  do, line 678
      v_12 := Z.L - Z.C;
      --  call steps10, line 678
      R_Steps10 (Z, Result);
      Z.C := Z.L - v_12;
      --  do, line 679
      v_13 := Z.L - Z.C;
      --  call step2a, line 679
      R_Step2a (Z, Result);
      Z.C := Z.L - v_13;
      --  do, line 680
      v_14 := Z.L - Z.C;
      --  call step2b, line 680
      R_Step2b (Z, Result);
      Z.C := Z.L - v_14;
      --  do, line 681
      v_15 := Z.L - Z.C;
      --  call step2c, line 681
      R_Step2c (Z, Result);
      Z.C := Z.L - v_15;
      --  do, line 682
      v_16 := Z.L - Z.C;
      --  call step2d, line 682
      R_Step2d (Z, Result);
      Z.C := Z.L - v_16;
      --  do, line 683
      v_17 := Z.L - Z.C;
      --  call step3, line 683
      R_Step3 (Z, Result);
      Z.C := Z.L - v_17;
      --  do, line 684
      v_18 := Z.L - Z.C;
      --  call step4, line 684
      R_Step4 (Z, Result);
      Z.C := Z.L - v_18;
      --  do, line 685
      v_19 := Z.L - Z.C;
      --  call step5a, line 685
      R_Step5a (Z, Result);
      Z.C := Z.L - v_19;
      --  do, line 686
      v_20 := Z.L - Z.C;
      --  call step5b, line 686
      R_Step5b (Z, Result);
      Z.C := Z.L - v_20;
      --  do, line 687
      v_21 := Z.L - Z.C;
      --  call step5c, line 687
      R_Step5c (Z, Result);
      Z.C := Z.L - v_21;
      --  do, line 688
      v_22 := Z.L - Z.C;
      --  call step5d, line 688
      R_Step5d (Z, Result);
      Z.C := Z.L - v_22;
      --  do, line 689
      v_23 := Z.L - Z.C;
      --  call step5e, line 689
      R_Step5e (Z, Result);
      Z.C := Z.L - v_23;
      --  do, line 690
      v_24 := Z.L - Z.C;
      --  call step5f, line 690
      R_Step5f (Z, Result);
      Z.C := Z.L - v_24;
      --  do, line 691
      v_25 := Z.L - Z.C;
      --  call step5g, line 691
      R_Step5g (Z, Result);
      Z.C := Z.L - v_25;
      --  do, line 692
      v_26 := Z.L - Z.C;
      --  call step5h, line 692
      R_Step5h (Z, Result);
      Z.C := Z.L - v_26;
      --  do, line 693
      v_27 := Z.L - Z.C;
      --  call step5j, line 693
      R_Step5j (Z, Result);
      Z.C := Z.L - v_27;
      --  do, line 694
      v_28 := Z.L - Z.C;
      --  call step5i, line 694
      R_Step5i (Z, Result);
      Z.C := Z.L - v_28;
      --  do, line 695
      v_29 := Z.L - Z.C;
      --  call step5k, line 695
      R_Step5k (Z, Result);
      Z.C := Z.L - v_29;
      --  do, line 696
      v_30 := Z.L - Z.C;
      --  call step5l, line 696
      R_Step5l (Z, Result);
      Z.C := Z.L - v_30;
      --  do, line 697
      v_31 := Z.L - Z.C;
      --  call step5m, line 697
      R_Step5m (Z, Result);
      Z.C := Z.L - v_31;
      --  do, line 698
      v_32 := Z.L - Z.C;
      --  call step6, line 698
      R_Step6 (Z, Result);
      Z.C := Z.L - v_32;
      --  do, line 699
      v_33 := Z.L - Z.C;
      --  call step7, line 699
      R_Step7 (Z, Result);
      Z.C := Z.L - v_33;
      Z.C := Z.Lb;

      Result := True;
   end Stem;
end Stemmer.Greek;

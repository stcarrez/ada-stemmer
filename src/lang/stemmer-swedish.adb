--  Generated by Snowball 2.0.0 - https://snowballstem.org/

package body Stemmer.Swedish is
   procedure r_other_suffix (Z : in out Context_Type; Result : out Boolean);
   procedure r_consonant_pair (Z : in out Context_Type; Result : out Boolean);
   procedure r_main_suffix (Z : in out Context_Type; Result : out Boolean);
   procedure r_mark_regions (Z : in out Context_Type; Result : out Boolean);

   g_v : constant Grouping_Array (0 .. 151) := (
      True, False, False, False, True, False, False, False,
      True, False, False, False, False, False, True, False,
      False, False, False, False, True, False, False, False,
      True, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, True, True, False, False, False,
      False, False, False, False, False, False, False, False,
      False, False, False, False, False, True, False, False
   );

   g_s_ending : constant Grouping_Array (0 .. 23) := (
      True, True, True, False, True, True, True, False,
      True, True, True, True, True, True, True, False,
      True, False, True, False, True, False, False, True
   );
   Among_String : constant String := "a" & "arna" & "erna" & "heterna"
      & "orna" & "ad" & "e" & "ade" & "ande" & "arne" & "are" & "aste" & "en" & "anden"
      & "aren" & "heten" & "ern" & "ar" & "er" & "heter" & "or" & "s" & "as" & "arnas"
      & "ernas" & "ornas" & "es" & "ades" & "andes" & "ens" & "arens" & "hetens"
      & "erns" & "at" & "andet" & "het" & "ast" & "dd" & "gd" & "nn" & "dt" & "gt"
      & "kt" & "tt" & "ig" & "lig" & "els" & "fullt" & "löst";

   A_0 : constant Among_Array_Type (0 .. 36) := (
      (1, 1, -1, 1),
      (2, 5, 0, 1),
      (6, 9, 0, 1),
      (10, 16, 2, 1),
      (17, 20, 0, 1),
      (21, 22, -1, 1),
      (23, 23, -1, 1),
      (24, 26, 6, 1),
      (27, 30, 6, 1),
      (31, 34, 6, 1),
      (35, 37, 6, 1),
      (38, 41, 6, 1),
      (42, 43, -1, 1),
      (44, 48, 12, 1),
      (49, 52, 12, 1),
      (53, 57, 12, 1),
      (58, 60, -1, 1),
      (61, 62, -1, 1),
      (63, 64, -1, 1),
      (65, 69, 18, 1),
      (70, 71, -1, 1),
      (72, 72, -1, 2),
      (73, 74, 21, 1),
      (75, 79, 22, 1),
      (80, 84, 22, 1),
      (85, 89, 22, 1),
      (90, 91, 21, 1),
      (92, 95, 26, 1),
      (96, 100, 26, 1),
      (101, 103, 21, 1),
      (104, 108, 29, 1),
      (109, 114, 29, 1),
      (115, 118, 21, 1),
      (119, 120, -1, 1),
      (121, 125, -1, 1),
      (126, 128, -1, 1),
      (129, 131, -1, 1));

   A_1 : constant Among_Array_Type (0 .. 6) := (
      (132, 133, -1, -1),
      (134, 135, -1, -1),
      (136, 137, -1, -1),
      (138, 139, -1, -1),
      (140, 141, -1, -1),
      (142, 143, -1, -1),
      (144, 145, -1, -1));

   A_2 : constant Among_Array_Type (0 .. 4) := (
      (146, 147, -1, 1),
      (148, 150, 0, 1),
      (151, 153, -1, 1),
      (154, 158, -1, 3),
      (159, 163, -1, 2));


   procedure r_mark_regions (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_1 : Integer;
   begin
      --  (, line 26
      Z.I_p1 := Z.L;
      --  test, line 29
      v_1 := Z.C;
      --  (, line 29
      C := Skip_Utf8 (Z, 3);      --  hop, line 29

      if C < 0 then
         Result := False;
         return;
      end if;
      Z.C := C;
      --  setmark x, line 29
      Z.I_x := Z.C;
      Z.C := v_1;
            --  goto, line 30
      Out_Grouping (Z, g_v, 97, 246, True, C);      if C < 0 then
         Result := False;
         return;
      end if;
            --  gopast, line 30
      --  non v, line 30
      In_Grouping (Z, g_v, 97, 246, True, C);
      if C < 0 then
         Result := False;
         return;
      end if;
      Z.C := Z.C + C;
      --  setmark p1, line 30
      Z.I_p1 := Z.C;
      --  try, line 31
      --  (, line 31
      if not (Z.I_p1 < Z.I_x) then
      goto lab2;
      end if;
      Z.I_p1 := Z.I_x;

      <<lab2>>

      Result := True;
   end r_mark_regions;

   procedure r_main_suffix (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_2 : Integer;
   begin
      --  (, line 36
      if Z.C < Z.I_p1 then
         Result := False;
         return;
      end if;
      v_2 := Z.Lb; Z.Lb := Z.I_p1;
      --  (, line 37
      Z.Ket := Z.C;      --  [, line 37

      --  substring, line 37
      Find_Among_Backward (Z, A_0, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 37

      Z.Lb := v_2;
      --  among, line 38
      case A is
         when 1 =>
            --  (, line 44
            --  delete, line 44
            Slice_Del (Z);
         when 2 =>
            --  (, line 46
            In_Grouping_Backward (Z, g_s_ending, 98, 121, False, C);
            if C /= 0 then
               Result := False;
               return;
            end if;
            --  delete, line 46
            Slice_Del (Z);
         when others =>
            null;
      end case;

      Result := True;
   end r_main_suffix;

   procedure r_consonant_pair (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_2 : Integer;
      v_3 : Integer;
   begin
      if Z.C < Z.I_p1 then
         Result := False;
         return;
      end if;
      v_2 := Z.Lb; Z.Lb := Z.I_p1;
      --  (, line 50
      --  and, line 52
      v_3 := Z.L - Z.C;
      --  among, line 51
      Find_Among_Backward (Z, A_1, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.C := Z.L - v_3;
      --  (, line 52
      Z.Ket := Z.C;      --  [, line 52

      --  next, line 52
      C := Skip_Utf8_Backward (Z, 1);      if C < 0 then
         Result := False;
         return;
      end if;
      Z.C := C;
      Z.Bra := Z.C;      --  ], line 52

      --  delete, line 52
      Slice_Del (Z);
      Z.Lb := v_2;

      Result := True;
   end r_consonant_pair;

   procedure r_other_suffix (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_2 : Integer;
   begin
      if Z.C < Z.I_p1 then
         Result := False;
         return;
      end if;
      v_2 := Z.Lb; Z.Lb := Z.I_p1;
      --  (, line 55
      Z.Ket := Z.C;      --  [, line 56

      --  substring, line 56
      Find_Among_Backward (Z, A_2, Among_String, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 56

      --  among, line 56
      case A is
         when 1 =>
            --  (, line 57
            --  delete, line 57
            Slice_Del (Z);
         when 2 =>
            --  (, line 58
            --  <-, line 58
            Slice_From (Z, "lös");
         when 3 =>
            --  (, line 59
            --  <-, line 59
            Slice_From (Z, "full");
         when others =>
            null;
      end case;
      Z.Lb := v_2;

      Result := True;
   end r_other_suffix;

   procedure Stem (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_1 : Integer;
      v_2 : Integer;
      v_3 : Integer;
      v_4 : Integer;
   begin
      --  (, line 64
      --  do, line 66
      v_1 := Z.C;
      --  call mark_regions, line 66
      r_mark_regions (Z, Result);
      Z.C := v_1;
      Z.Lb := Z.C; Z.C := Z.L;      --  backwards, line 67

      --  (, line 67
      --  do, line 68
      v_2 := Z.L - Z.C;
      --  call main_suffix, line 68
      r_main_suffix (Z, Result);
      Z.C := Z.L - v_2;
      --  do, line 69
      v_3 := Z.L - Z.C;
      --  call consonant_pair, line 69
      r_consonant_pair (Z, Result);
      Z.C := Z.L - v_3;
      --  do, line 70
      v_4 := Z.L - Z.C;
      --  call other_suffix, line 70
      r_other_suffix (Z, Result);
      Z.C := Z.L - v_4;
      Z.C := Z.Lb;

      Result := True;
   end Stem;
end Stemmer.Swedish;

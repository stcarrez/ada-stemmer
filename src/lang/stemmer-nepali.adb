--  Generated by Snowball 2.0.0 - https://snowballstem.org/

package body Stemmer.Nepali is

   pragma Style_Checks ("-mr");
   pragma Warnings (Off, "*variable*is never read and never assigned*");
   pragma Warnings (Off, "*mode could be*instead of*");
   pragma Warnings (Off, "*formal parameter.*is not modified*");
   pragma Warnings (Off, "*this line is too long*");
   pragma Warnings (Off, "*is not referenced*");

   procedure R_Remove_category_3 (Z : in out Context_Type; Result : out Boolean);
   procedure R_Remove_category_2 (Z : in out Context_Type; Result : out Boolean);
   procedure R_Check_category_2 (Z : in out Context_Type; Result : out Boolean);
   procedure R_Remove_category_1 (Z : in out Context_Type; Result : out Boolean);
   Among_String : constant String := "की" & "लाइ" & "ले"
      & "लाई" & "कै" & "सँगै" & "मै" & "को" & "सँग"
      & "संग" & "मार्फत" & "रत" & "का" & "मा"
      & "द्वारा" & "कि" & "पछि" & "ँ" & "ं" & "ै" & "ँ"
      & "ं" & "ै" & "ेकी" & "एकी" & "इएकी" & "िएकी"
      & "देखी" & "थी" & "दी" & "छु" & "ेछु" & "नेछु"
      & "एछु" & "नु" & "हरु" & "हरू" & "छे" & "थे"
      & "ने" & "ेकै" & "नेकै" & "एकै" & "दै" & "इदै"
      & "िदै" & "ेको" & "नेको" & "एको" & "इएको"
      & "िएको" & "दो" & "इदो" & "िदो" & "यो" & "इयो"
      & "थ्यो" & "भयो" & "ियो" & "थियो" & "दियो"
      & "छौ" & "इछौ" & "ेछौ" & "नेछौ" & "एछौ"
      & "िछौ" & "यौ" & "छ्यौ" & "थ्यौ" & "थियौ"
      & "छन्" & "इछन्" & "ेछन्" & "नेछन्"
      & "एछन्" & "िछन्" & "लान्" & "छिन्"
      & "थिन्" & "पर्" & "इस्" & "थिइस्" & "छेस्"
      & "होस्" & "छस्" & "इछस्" & "ेछस्"
      & "नेछस्" & "एछस्" & "िछस्" & "िस्"
      & "थिस्" & "थिए" & "छ" & "इछ" & "ेछ" & "नेछ"
      & "हुनेछ" & "हुन्छ" & "इन्छ" & "िन्छ"
      & "एछ" & "िछ" & "ेका" & "नेका" & "एका"
      & "इएका" & "िएका" & "दा" & "इदा" & "िदा"
      & "देखि" & "माथि";

   A_0 : constant Among_Array_Type (0 .. 16) := (
      (1, 6, -1, 2, 0),
      (7, 15, -1, 1, 0),
      (16, 21, -1, 1, 0),
      (22, 30, -1, 1, 0),
      (31, 36, -1, 2, 0),
      (37, 48, -1, 1, 0),
      (49, 54, -1, 1, 0),
      (55, 60, -1, 2, 0),
      (61, 69, -1, 1, 0),
      (70, 78, -1, 1, 0),
      (79, 96, -1, 1, 0),
      (97, 102, -1, 1, 0),
      (103, 108, -1, 2, 0),
      (109, 114, -1, 1, 0),
      (115, 132, -1, 1, 0),
      (133, 138, -1, 2, 0),
      (139, 147, -1, 1, 0));

   A_1 : constant Among_Array_Type (0 .. 2) := (
      (148, 150, -1, -1, 0),
      (151, 153, -1, -1, 0),
      (154, 156, -1, -1, 0));

   A_2 : constant Among_Array_Type (0 .. 2) := (
      (157, 159, -1, 1, 0),
      (160, 162, -1, 1, 0),
      (163, 165, -1, 2, 0));

   A_3 : constant Among_Array_Type (0 .. 90) := (
      (166, 174, -1, 1, 0),
      (175, 183, -1, 1, 0),
      (184, 195, 1, 1, 0),
      (196, 207, 1, 1, 0),
      (208, 219, -1, 1, 0),
      (220, 225, -1, 1, 0),
      (226, 231, -1, 1, 0),
      (232, 237, -1, 1, 0),
      (238, 246, 7, 1, 0),
      (247, 258, 8, 1, 0),
      (259, 267, 7, 1, 0),
      (268, 273, -1, 1, 0),
      (274, 282, -1, 1, 0),
      (283, 291, -1, 1, 0),
      (292, 297, -1, 1, 0),
      (298, 303, -1, 1, 0),
      (304, 309, -1, 1, 0),
      (310, 318, -1, 1, 0),
      (319, 330, 17, 1, 0),
      (331, 339, -1, 1, 0),
      (340, 345, -1, 1, 0),
      (346, 354, 20, 1, 0),
      (355, 363, 20, 1, 0),
      (364, 372, -1, 1, 0),
      (373, 384, 23, 1, 0),
      (385, 393, -1, 1, 0),
      (394, 405, 25, 1, 0),
      (406, 417, 25, 1, 0),
      (418, 423, -1, 1, 0),
      (424, 432, 28, 1, 0),
      (433, 441, 28, 1, 0),
      (442, 447, -1, 1, 0),
      (448, 456, 31, 1, 0),
      (457, 468, 31, 1, 0),
      (469, 477, 31, 1, 0),
      (478, 486, 31, 1, 0),
      (487, 498, 35, 1, 0),
      (499, 510, 35, 1, 0),
      (511, 516, -1, 1, 0),
      (517, 525, 38, 1, 0),
      (526, 534, 38, 1, 0),
      (535, 546, 40, 1, 0),
      (547, 555, 38, 1, 0),
      (556, 564, 38, 1, 0),
      (565, 570, -1, 1, 0),
      (571, 582, 44, 1, 0),
      (583, 594, 44, 1, 0),
      (595, 606, 44, 1, 0),
      (607, 615, -1, 1, 0),
      (616, 627, 48, 1, 0),
      (628, 639, 48, 1, 0),
      (640, 654, 50, 1, 0),
      (655, 666, 48, 1, 0),
      (667, 678, 48, 1, 0),
      (679, 690, -1, 1, 0),
      (691, 702, -1, 1, 0),
      (703, 714, -1, 1, 0),
      (715, 723, -1, 1, 0),
      (724, 732, -1, 1, 0),
      (733, 747, 58, 1, 0),
      (748, 759, -1, 1, 0),
      (760, 771, -1, 1, 0),
      (772, 780, -1, 1, 0),
      (781, 792, 62, 1, 0),
      (793, 804, 62, 1, 0),
      (805, 819, 64, 1, 0),
      (820, 831, 62, 1, 0),
      (832, 843, 62, 1, 0),
      (844, 852, -1, 1, 0),
      (853, 864, 68, 1, 0),
      (865, 873, -1, 1, 0),
      (874, 876, -1, 1, 0),
      (877, 882, 71, 1, 0),
      (883, 888, 71, 1, 0),
      (889, 897, 73, 1, 0),
      (898, 912, 74, 1, 0),
      (913, 927, 71, 1, 0),
      (928, 939, 71, 1, 0),
      (940, 951, 71, 1, 0),
      (952, 957, 71, 1, 0),
      (958, 963, 71, 1, 0),
      (964, 972, -1, 1, 0),
      (973, 984, 81, 1, 0),
      (985, 993, -1, 1, 0),
      (994, 1005, 83, 1, 0),
      (1006, 1017, 83, 1, 0),
      (1018, 1023, -1, 1, 0),
      (1024, 1032, 86, 1, 0),
      (1033, 1041, 86, 1, 0),
      (1042, 1053, -1, 1, 0),
      (1054, 1065, -1, 1, 0));


   procedure R_Remove_category_1 (Z : in out Context_Type; Result : out Boolean) is
      C : Result_Index;
      A : Integer;
      v_1 : Char_Index;
      v_2 : Char_Index;
   begin
      --  (, line 53
      Z.Ket := Z.C;      --  [, line 54

      --  substring, line 54
      Find_Among_Backward (Z, A_0, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 54

      --  among, line 54
      case A is
         when 1 =>
            --  (, line 58
            --  delete, line 58
            Slice_Del (Z);
         when 2 =>
            --  (, line 59
            --  or, line 59
            v_1 := Z.L - Z.C;
            --  (, line 59
            --  or, line 59
            v_2 := Z.L - Z.C;
            --  literal, line 59
            C := Eq_S_Backward (Z, "ए");
            if C = 0 then
               goto lab3;
            end if;
            Z.C := Z.C - C;
            goto lab2;

            <<lab3>>
            Z.C := Z.L - v_2;
            --  literal, line 59
            C := Eq_S_Backward (Z, "े");
            if C = 0 then
               goto lab1;
            end if;
            Z.C := Z.C - C;

            <<lab2>>
            --  (, line 59
            goto lab0;

            <<lab1>>
            Z.C := Z.L - v_1;
            --  delete, line 59
            Slice_Del (Z);

            <<lab0>>
         when others =>
            null;
      end case;

      Result := True;
   end R_Remove_category_1;

   procedure R_Check_category_2 (Z : in out Context_Type; Result : out Boolean) is
      C : Result_Index;
      A : Integer;
   begin
      --  (, line 63
      Z.Ket := Z.C;      --  [, line 64

      --  substring, line 64
      if Z.C - 2 <= Z.Lb or else Check_Among (Z, Z.C - 1, 4, 16#106#) then
         Result := False;
         return;
         --  substring, line 64
      end if;
      Find_Among_Backward (Z, A_1, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 64


      Result := True;
   end R_Check_category_2;

   procedure R_Remove_category_2 (Z : in out Context_Type; Result : out Boolean) is
      C : Result_Index;
      A : Integer;
      v_1 : Char_Index;
   begin
      --  (, line 69
      Z.Ket := Z.C;      --  [, line 70

      --  substring, line 70
      if Z.C - 2 <= Z.Lb or else Check_Among (Z, Z.C - 1, 4, 16#106#) then
         Result := False;
         return;
         --  substring, line 70
      end if;
      Find_Among_Backward (Z, A_2, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 70

      --  among, line 70
      case A is
         when 1 =>
            --  (, line 71
            --  or, line 71
            v_1 := Z.L - Z.C;
            --  literal, line 71
            C := Eq_S_Backward (Z, "यौ");
            if C = 0 then
               goto lab1;
            end if;
            Z.C := Z.C - C;
            goto lab0;

            <<lab1>>
            Z.C := Z.L - v_1;
            --  literal, line 71
            C := Eq_S_Backward (Z, "छौ");
            if C = 0 then
               goto lab2;
            end if;
            Z.C := Z.C - C;
            goto lab0;

            <<lab2>>
            Z.C := Z.L - v_1;
            --  literal, line 71
            C := Eq_S_Backward (Z, "नौ");
            if C = 0 then
               goto lab3;
            end if;
            Z.C := Z.C - C;
            goto lab0;

            <<lab3>>
            Z.C := Z.L - v_1;
            --  literal, line 71
            C := Eq_S_Backward (Z, "थे");
            if C = 0 then
               Result := False;
               return;
            end if;
            Z.C := Z.C - C;

            <<lab0>>
            --  delete, line 71
            Slice_Del (Z);
         when 2 =>
            --  (, line 72
            --  literal, line 72
            C := Eq_S_Backward (Z, "त्र");
            if C = 0 then
               Result := False;
               return;
            end if;
            Z.C := Z.C - C;
            --  delete, line 72
            Slice_Del (Z);
         when others =>
            null;
      end case;

      Result := True;
   end R_Remove_category_2;

   procedure R_Remove_category_3 (Z : in out Context_Type; Result : out Boolean) is
      C : Result_Index;
      A : Integer;
   begin
      --  (, line 76
      Z.Ket := Z.C;      --  [, line 77

      --  substring, line 77
      Find_Among_Backward (Z, A_3, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 77

      --  (, line 79
      --  delete, line 79
      Slice_Del (Z);

      Result := True;
   end R_Remove_category_3;

   procedure Stem (Z : in out Context_Type; Result : out Boolean) is
      C : Result_Index;
      A : Integer;
      v_1 : Char_Index;
      v_2 : Char_Index;
      v_3 : Char_Index;
      v_4 : Char_Index;
      v_5 : Char_Index;
   begin
      --  (, line 85
      Z.Lb := Z.C; Z.C := Z.L;      --  backwards, line 86

      --  (, line 86
      --  do, line 87
      v_1 := Z.L - Z.C;
      --  call remove_category_1, line 87
      R_Remove_category_1 (Z, Result);
      Z.C := Z.L - v_1;
      --  do, line 88
      v_2 := Z.L - Z.C;
      --  (, line 88
      --  repeat, line 89

      <<lab1>>

      loop
         v_3 := Z.L - Z.C;
         --  (, line 89
         --  do, line 89
         v_4 := Z.L - Z.C;
         --  (, line 89
         --  and, line 89
         v_5 := Z.L - Z.C;
         --  call check_category_2, line 89
         R_Check_category_2 (Z, Result);
         if not Result then
            goto lab3;
         end if;
         Z.C := Z.L - v_5;
         --  call remove_category_2, line 89
         R_Remove_category_2 (Z, Result);
         if not Result then
            goto lab3;
         end if;

         <<lab3>>
         Z.C := Z.L - v_4;
         --  call remove_category_3, line 89
         R_Remove_category_3 (Z, Result);
         if not Result then
            goto lab2;
         end if;
         goto lab1;

         <<lab2>>
         Z.C := Z.L - v_3;

         exit;
      end loop;

      <<lab0>>
      Z.C := Z.L - v_2;
      Z.C := Z.Lb;

      Result := True;
   end Stem;
end Stemmer.Nepali;

--  Generated by Snowball 2.0.0 - https://snowballstem.org/

package body Stemmer.Basque is

   pragma Style_Checks ("-mr");
   pragma Warnings (Off, "*variable*is never read and never assigned*");
   pragma Warnings (Off, "*mode could be*instead of*");
   pragma Warnings (Off, "*formal parameter.*is not modified*");
   pragma Warnings (Off, "*this line is too long*");
   pragma Warnings (Off, "*is not referenced*");

   procedure R_R1 (Z : in out Context_Type; Result : out Boolean);
   procedure R_R2 (Z : in out Context_Type; Result : out Boolean);
   procedure R_RV (Z : in out Context_Type; Result : out Boolean);
   procedure R_Mark_regions (Z : in out Context_Type; Result : out Boolean);
   procedure R_Adjetiboak (Z : in out Context_Type; Result : out Boolean);
   procedure R_Izenak (Z : in out Context_Type; Result : out Boolean);
   procedure R_Aditzak (Z : in out Context_Type; Result : out Boolean);

   G_V : constant Grouping_Array (0 .. 23) := (
      True, False, False, False, True, False, False, False,
      True, False, False, False, False, False, True, False,
      False, False, False, False, True, False, False, False
   );
   Among_String : constant String := "idea" & "bidea" & "kidea" & "pidea"
      & "kundea" & "galea" & "tailea" & "tzailea" & "gunea" & "kunea" & "tzaga"
      & "gaia" & "aldia" & "taldia" & "karia" & "garria" & "karria" & "ka" & "tzaka"
      & "la" & "mena" & "pena" & "kina" & "ezina" & "tezina" & "kuna" & "tuna"
      & "kizuna" & "era" & "bera" & "arabera" & "kera" & "pera" & "orra" & "korra"
      & "dura" & "gura" & "kura" & "tura" & "eta" & "keta" & "gailua" & "eza"
      & "erreza" & "tza" & "gaitza" & "kaitza" & "kuntza" & "ide" & "bide" & "kide"
      & "pide" & "kunde" & "tzake" & "tzeke" & "le" & "gale" & "taile" & "tzaile"
      & "gune" & "kune" & "tze" & "atze" & "gai" & "aldi" & "taldi" & "ki" & "ari"
      & "kari" & "lari" & "tari" & "etari" & "garri" & "karri" & "arazi" & "tarazi"
      & "an" & "ean" & "rean" & "kan" & "etan" & "atseden" & "men" & "pen" & "kin"
      & "rekin" & "ezin" & "tezin" & "tun" & "kizun" & "go" & "ago" & "tio" & "dako"
      & "or" & "kor" & "tzat" & "du" & "gailu" & "tu" & "atu" & "aldatu" & "tatu"
      & "baditu" & "ez" & "errez" & "tzez" & "gaitz" & "kaitz" & "ada" & "kada"
      & "anda" & "denda" & "gabea" & "kabea" & "aldea" & "kaldea" & "taldea" & "ordea"
      & "zalea" & "tzalea" & "gilea" & "emea" & "kumea" & "nea" & "enea" & "zionea"
      & "unea" & "gunea" & "pea" & "aurrea" & "tea" & "kotea" & "artea" & "ostea"
      & "etxea" & "ga" & "anga" & "gaia" & "aldia" & "taldia" & "handia" & "mendia"
      & "geia" & "egia" & "degia" & "tegia" & "nahia" & "ohia" & "kia" & "tokia"
      & "oia" & "koia" & "aria" & "karia" & "laria" & "taria" & "eria" & "keria"
      & "teria" & "garria" & "larria" & "kirria" & "duria" & "asia" & "tia" & "ezia"
      & "bizia" & "ontzia" & "ka" & "joka" & "aurka" & "ska" & "xka" & "zka" & "gibela"
      & "gela" & "kaila" & "skila" & "tila" & "ola" & "na" & "kana" & "ena" & "garrena"
      & "gerrena" & "urrena" & "zaina" & "tzaina" & "kina" & "mina" & "garna" & "una"
      & "duna" & "asuna" & "tasuna" & "ondoa" & "kondoa" & "ngoa" & "zioa" & "koa"
      & "takoa" & "zkoa" & "noa" & "zinoa" & "aroa" & "taroa" & "zaroa" & "eroa"
      & "oroa" & "osoa" & "toa" & "ttoa" & "ztoa" & "txoa" & "tzoa" & "ñoa" & "ra"
      & "ara" & "dara" & "liara" & "tiara" & "tara" & "etara" & "tzara" & "bera"
      & "kera" & "pera" & "ora" & "tzarra" & "korra" & "tra" & "sa" & "osa" & "ta"
      & "eta" & "keta" & "sta" & "dua" & "mendua" & "ordua" & "lekua" & "burua"
      & "durua" & "tsua" & "tua" & "mentua" & "estua" & "txua" & "zua" & "tzua" & "za"
      & "eza" & "eroza" & "tza" & "koitza" & "antza" & "gintza" & "kintza" & "kuntza"
      & "gabe" & "kabe" & "kide" & "alde" & "kalde" & "talde" & "orde" & "ge" & "zale"
      & "tzale" & "gile" & "eme" & "kume" & "ne" & "zione" & "une" & "gune" & "pe"
      & "aurre" & "te" & "kote" & "arte" & "oste" & "etxe" & "gai" & "di" & "aldi"
      & "taldi" & "geldi" & "handi" & "mendi" & "gei" & "egi" & "degi" & "tegi"
      & "nahi" & "ohi" & "ki" & "toki" & "oi" & "goi" & "koi" & "ari" & "kari" & "lari"
      & "tari" & "garri" & "larri" & "kirri" & "duri" & "asi" & "ti" & "ontzi" & "ñi"
      & "ak" & "ek" & "tarik" & "gibel" & "ail" & "kail" & "kan" & "tan" & "etan"
      & "en" & "ren" & "garren" & "gerren" & "urren" & "ten" & "tzen" & "zain"
      & "tzain" & "kin" & "min" & "dun" & "asun" & "tasun" & "aizun" & "ondo" & "kondo"
      & "go" & "ngo" & "zio" & "ko" & "trako" & "tako" & "etako" & "eko" & "tariko"
      & "sko" & "tuko" & "minutuko" & "zko" & "no" & "zino" & "ro" & "aro" & "igaro"
      & "taro" & "zaro" & "ero" & "giro" & "oro" & "oso" & "to" & "tto" & "zto" & "txo"
      & "tzo" & "gintzo" & "ño" & "zp" & "ar" & "dar" & "behar" & "zehar" & "liar"
      & "tiar" & "tar" & "tzar" & "or" & "kor" & "os" & "ket" & "du" & "mendu" & "ordu"
      & "leku" & "buru" & "duru" & "tsu" & "tu" & "tatu" & "mentu" & "estu" & "txu"
      & "zu" & "tzu" & "gintzu" & "z" & "ez" & "eroz" & "tz" & "koitz" & "zlea"
      & "keria" & "la" & "era" & "dade" & "tade" & "date" & "tate" & "gi" & "ki" & "ik"
      & "lanik" & "rik" & "larik" & "ztik" & "go" & "ro" & "ero" & "to";

   A_0 : constant Among_Array_Type (0 .. 108) := (
      (1, 4, -1, 1, 0),
      (5, 9, 0, 1, 0),
      (10, 14, 0, 1, 0),
      (15, 19, 0, 1, 0),
      (20, 25, -1, 1, 0),
      (26, 30, -1, 1, 0),
      (31, 36, -1, 1, 0),
      (37, 43, -1, 1, 0),
      (44, 48, -1, 1, 0),
      (49, 53, -1, 1, 0),
      (54, 58, -1, 1, 0),
      (59, 62, -1, 1, 0),
      (63, 67, -1, 1, 0),
      (68, 73, 12, 1, 0),
      (74, 78, -1, 1, 0),
      (79, 84, -1, 2, 0),
      (85, 90, -1, 1, 0),
      (91, 92, -1, 1, 0),
      (93, 97, 17, 1, 0),
      (98, 99, -1, 1, 0),
      (100, 103, -1, 1, 0),
      (104, 107, -1, 1, 0),
      (108, 111, -1, 1, 0),
      (112, 116, -1, 1, 0),
      (117, 122, 23, 1, 0),
      (123, 126, -1, 1, 0),
      (127, 130, -1, 1, 0),
      (131, 136, -1, 1, 0),
      (137, 139, -1, 1, 0),
      (140, 143, 28, 1, 0),
      (144, 150, 29, 4, 0),
      (151, 154, 28, 1, 0),
      (155, 158, 28, 1, 0),
      (159, 162, -1, 1, 0),
      (163, 167, 33, 1, 0),
      (168, 171, -1, 1, 0),
      (172, 175, -1, 1, 0),
      (176, 179, -1, 1, 0),
      (180, 183, -1, 1, 0),
      (184, 186, -1, 1, 0),
      (187, 190, 39, 1, 0),
      (191, 196, -1, 1, 0),
      (197, 199, -1, 1, 0),
      (200, 205, 42, 1, 0),
      (206, 208, -1, 2, 0),
      (209, 214, 44, 1, 0),
      (215, 220, 44, 1, 0),
      (221, 226, 44, 1, 0),
      (227, 229, -1, 1, 0),
      (230, 233, 48, 1, 0),
      (234, 237, 48, 1, 0),
      (238, 241, 48, 1, 0),
      (242, 246, -1, 1, 0),
      (247, 251, -1, 1, 0),
      (252, 256, -1, 1, 0),
      (257, 258, -1, 1, 0),
      (259, 262, 55, 1, 0),
      (263, 267, 55, 1, 0),
      (268, 273, 55, 1, 0),
      (274, 277, -1, 1, 0),
      (278, 281, -1, 1, 0),
      (282, 284, -1, 1, 0),
      (285, 288, 61, 1, 0),
      (289, 291, -1, 1, 0),
      (292, 295, -1, 1, 0),
      (296, 300, 64, 1, 0),
      (301, 302, -1, 1, 0),
      (303, 305, -1, 1, 0),
      (306, 309, 67, 1, 0),
      (310, 313, 67, 1, 0),
      (314, 317, 67, 1, 0),
      (318, 322, 70, 1, 0),
      (323, 327, -1, 2, 0),
      (328, 332, -1, 1, 0),
      (333, 337, -1, 1, 0),
      (338, 343, 74, 1, 0),
      (344, 345, -1, 1, 0),
      (346, 348, 76, 1, 0),
      (349, 352, 77, 1, 0),
      (353, 355, 76, 1, 0),
      (356, 359, 76, 1, 0),
      (360, 366, -1, 3, 0),
      (367, 369, -1, 1, 0),
      (370, 372, -1, 1, 0),
      (373, 375, -1, 1, 0),
      (376, 380, 84, 1, 0),
      (381, 384, -1, 1, 0),
      (385, 389, 86, 1, 0),
      (390, 392, -1, 1, 0),
      (393, 397, -1, 1, 0),
      (398, 399, -1, 1, 0),
      (400, 402, 90, 1, 0),
      (403, 405, -1, 1, 0),
      (406, 409, -1, 1, 0),
      (410, 411, -1, 1, 0),
      (412, 414, 94, 1, 0),
      (415, 418, -1, 1, 0),
      (419, 420, -1, 1, 0),
      (421, 425, -1, 1, 0),
      (426, 427, -1, 1, 0),
      (428, 430, 99, 1, 0),
      (431, 436, 100, 1, 0),
      (437, 440, 100, 1, 0),
      (441, 446, 99, 5, 0),
      (447, 448, -1, 1, 0),
      (449, 453, 104, 1, 0),
      (454, 457, 104, 1, 0),
      (458, 462, -1, 1, 0),
      (463, 467, -1, 1, 0));

   A_1 : constant Among_Array_Type (0 .. 294) := (
      (468, 470, -1, 1, 0),
      (471, 474, 0, 1, 0),
      (475, 478, -1, 1, 0),
      (479, 483, -1, 1, 0),
      (484, 488, -1, 1, 0),
      (489, 493, -1, 1, 0),
      (494, 498, -1, 1, 0),
      (499, 504, 6, 1, 0),
      (505, 510, 6, 1, 0),
      (511, 515, -1, 1, 0),
      (516, 520, -1, 1, 0),
      (521, 526, 10, 1, 0),
      (527, 531, -1, 1, 0),
      (532, 535, -1, 1, 0),
      (536, 540, -1, 1, 0),
      (541, 543, -1, 1, 0),
      (544, 547, 15, 1, 0),
      (548, 553, 15, 1, 0),
      (554, 557, 15, 1, 0),
      (558, 562, 18, 1, 0),
      (563, 565, -1, 1, 0),
      (566, 571, -1, 1, 0),
      (572, 574, -1, 1, 0),
      (575, 579, 22, 1, 0),
      (580, 584, 22, 1, 0),
      (585, 589, 22, 1, 0),
      (590, 594, -1, 1, 0),
      (595, 596, -1, 1, 0),
      (597, 600, 27, 1, 0),
      (601, 604, -1, 1, 0),
      (605, 609, -1, 1, 0),
      (610, 615, 30, 1, 0),
      (616, 621, -1, 1, 0),
      (622, 627, -1, 1, 0),
      (628, 631, -1, 1, 0),
      (632, 635, -1, 1, 0),
      (636, 640, 35, 1, 0),
      (641, 645, 35, 1, 0),
      (646, 650, -1, 1, 0),
      (651, 654, -1, 1, 0),
      (655, 657, -1, 1, 0),
      (658, 662, 40, 1, 0),
      (663, 665, -1, 1, 0),
      (666, 669, 42, 1, 0),
      (670, 673, -1, 1, 0),
      (674, 678, 44, 1, 0),
      (679, 683, 44, 1, 0),
      (684, 688, 44, 1, 0),
      (689, 692, -1, 1, 0),
      (693, 697, 48, 1, 0),
      (698, 702, 48, 1, 0),
      (703, 708, -1, 2, 0),
      (709, 714, -1, 1, 0),
      (715, 720, -1, 1, 0),
      (721, 725, -1, 1, 0),
      (726, 729, -1, 1, 0),
      (730, 732, -1, 1, 0),
      (733, 736, -1, 1, 0),
      (737, 741, -1, 1, 0),
      (742, 747, -1, 1, 0),
      (748, 749, -1, 1, 0),
      (750, 753, 60, 3, 0),
      (754, 758, 60, 10, 0),
      (759, 761, 60, 1, 0),
      (762, 764, 60, 1, 0),
      (765, 767, 60, 1, 0),
      (768, 773, -1, 1, 0),
      (774, 777, -1, 1, 0),
      (778, 782, -1, 1, 0),
      (783, 787, -1, 1, 0),
      (788, 791, -1, 1, 0),
      (792, 794, -1, 1, 0),
      (795, 796, -1, 1, 0),
      (797, 800, 72, 1, 0),
      (801, 803, 72, 1, 0),
      (804, 810, 74, 1, 0),
      (811, 817, 74, 1, 0),
      (818, 823, 74, 1, 0),
      (824, 828, 72, 1, 0),
      (829, 834, 78, 1, 0),
      (835, 838, 72, 1, 0),
      (839, 842, 72, 1, 0),
      (843, 847, 72, 1, 0),
      (848, 850, 72, 1, 0),
      (851, 854, 83, 1, 0),
      (855, 859, 83, 1, 0),
      (860, 865, 85, 1, 0),
      (866, 870, -1, 1, 0),
      (871, 876, 87, 1, 0),
      (877, 880, -1, 1, 0),
      (881, 884, -1, 1, 0),
      (885, 887, -1, 1, 0),
      (888, 892, 91, 1, 0),
      (893, 896, 91, 1, 0),
      (897, 899, -1, 1, 0),
      (900, 904, 94, 1, 0),
      (905, 908, -1, 1, 0),
      (909, 913, 96, 1, 0),
      (914, 918, 96, 1, 0),
      (919, 922, -1, 1, 0),
      (923, 926, -1, 1, 0),
      (927, 930, -1, 1, 0),
      (931, 933, -1, 1, 0),
      (934, 937, 102, 1, 0),
      (938, 941, 102, 1, 0),
      (942, 945, -1, 1, 0),
      (946, 949, -1, 1, 0),
      (950, 953, -1, 1, 0),
      (954, 955, -1, 1, 0),
      (956, 958, 108, 1, 0),
      (959, 962, 109, 1, 0),
      (963, 967, 109, 1, 0),
      (968, 972, 109, 1, 0),
      (973, 976, 109, 1, 0),
      (977, 981, 113, 1, 0),
      (982, 986, 109, 1, 0),
      (987, 990, 108, 1, 0),
      (991, 994, 108, 1, 0),
      (995, 998, 108, 1, 0),
      (999, 1001, 108, 2, 0),
      (1002, 1007, 108, 1, 0),
      (1008, 1012, 108, 1, 0),
      (1013, 1015, 108, 1, 0),
      (1016, 1017, -1, 1, 0),
      (1018, 1020, 123, 1, 0),
      (1021, 1022, -1, 1, 0),
      (1023, 1025, 125, 1, 0),
      (1026, 1029, 126, 1, 0),
      (1030, 1032, 125, 1, 0),
      (1033, 1035, -1, 1, 0),
      (1036, 1041, 129, 1, 0),
      (1042, 1046, 129, 1, 0),
      (1047, 1051, -1, 1, 0),
      (1052, 1056, -1, 1, 0),
      (1057, 1061, -1, 1, 0),
      (1062, 1065, -1, 1, 0),
      (1066, 1068, -1, 1, 0),
      (1069, 1074, 136, 1, 0),
      (1075, 1079, 136, 1, 0),
      (1080, 1083, -1, 1, 0),
      (1084, 1086, -1, 1, 0),
      (1087, 1090, 140, 1, 0),
      (1091, 1092, -1, 1, 0),
      (1093, 1095, 142, 1, 0),
      (1096, 1100, 142, 1, 0),
      (1101, 1103, 142, 2, 0),
      (1104, 1109, 145, 1, 0),
      (1110, 1114, 145, 1, 0),
      (1115, 1120, 145, 1, 0),
      (1121, 1126, 145, 1, 0),
      (1127, 1132, 145, 1, 0),
      (1133, 1136, -1, 1, 0),
      (1137, 1140, -1, 1, 0),
      (1141, 1144, -1, 1, 0),
      (1145, 1148, -1, 1, 0),
      (1149, 1153, 154, 1, 0),
      (1154, 1158, 154, 1, 0),
      (1159, 1162, -1, 1, 0),
      (1163, 1164, -1, 1, 0),
      (1165, 1168, -1, 1, 0),
      (1169, 1173, 159, 1, 0),
      (1174, 1177, -1, 1, 0),
      (1178, 1180, -1, 1, 0),
      (1181, 1184, -1, 1, 0),
      (1185, 1186, -1, 1, 0),
      (1187, 1191, 164, 1, 0),
      (1192, 1194, 164, 1, 0),
      (1195, 1198, 166, 1, 0),
      (1199, 1200, -1, 1, 0),
      (1201, 1205, -1, 1, 0),
      (1206, 1207, -1, 1, 0),
      (1208, 1211, 170, 1, 0),
      (1212, 1215, 170, 1, 0),
      (1216, 1219, 170, 1, 0),
      (1220, 1223, -1, 1, 0),
      (1224, 1226, -1, 1, 0),
      (1227, 1228, -1, 1, 0),
      (1229, 1232, 176, 1, 0),
      (1233, 1237, 177, 1, 0),
      (1238, 1242, 176, 8, 0),
      (1243, 1247, 176, 1, 0),
      (1248, 1252, 176, 1, 0),
      (1253, 1255, -1, 1, 0),
      (1256, 1258, -1, 1, 0),
      (1259, 1262, 183, 1, 0),
      (1263, 1266, 183, 1, 0),
      (1267, 1270, -1, 1, 0),
      (1271, 1273, -1, 1, 0),
      (1274, 1275, -1, 1, 0),
      (1276, 1279, 188, 1, 0),
      (1280, 1281, -1, 1, 0),
      (1282, 1284, 190, 1, 0),
      (1285, 1287, 190, 1, 0),
      (1288, 1290, -1, 1, 0),
      (1291, 1294, 193, 1, 0),
      (1295, 1298, 193, 1, 0),
      (1299, 1302, 193, 1, 0),
      (1303, 1307, -1, 2, 0),
      (1308, 1312, -1, 1, 0),
      (1313, 1317, -1, 1, 0),
      (1318, 1321, -1, 1, 0),
      (1322, 1324, -1, 1, 0),
      (1325, 1326, -1, 1, 0),
      (1327, 1331, -1, 1, 0),
      (1332, 1334, -1, 1, 0),
      (1335, 1336, -1, 1, 0),
      (1337, 1338, -1, 1, 0),
      (1339, 1343, -1, 1, 0),
      (1344, 1348, -1, 1, 0),
      (1349, 1351, -1, 1, 0),
      (1352, 1355, 209, 1, 0),
      (1356, 1358, -1, 1, 0),
      (1359, 1361, -1, 1, 0),
      (1362, 1365, 212, 1, 0),
      (1366, 1367, -1, 4, 0),
      (1368, 1370, 214, 2, 0),
      (1371, 1376, 215, 1, 0),
      (1377, 1382, 215, 1, 0),
      (1383, 1387, 215, 1, 0),
      (1388, 1390, 214, 4, 0),
      (1391, 1394, 214, 4, 0),
      (1395, 1398, -1, 1, 0),
      (1399, 1403, 221, 1, 0),
      (1404, 1406, -1, 1, 0),
      (1407, 1409, -1, 1, 0),
      (1410, 1412, -1, 1, 0),
      (1413, 1416, -1, 1, 0),
      (1417, 1421, 226, 1, 0),
      (1422, 1426, -1, 1, 0),
      (1427, 1430, -1, 1, 0),
      (1431, 1435, 229, 1, 0),
      (1436, 1437, -1, 1, 0),
      (1438, 1440, 231, 1, 0),
      (1441, 1443, -1, 1, 0),
      (1444, 1445, -1, 1, 0),
      (1446, 1450, 234, 5, 0),
      (1451, 1454, 234, 1, 0),
      (1455, 1459, 236, 1, 0),
      (1460, 1462, 234, 1, 0),
      (1463, 1468, 234, 1, 0),
      (1469, 1471, 234, 1, 0),
      (1472, 1475, 234, 1, 0),
      (1476, 1483, 241, 6, 0),
      (1484, 1486, 234, 1, 0),
      (1487, 1488, -1, 1, 0),
      (1489, 1492, 244, 1, 0),
      (1493, 1494, -1, 1, 0),
      (1495, 1497, 246, 1, 0),
      (1498, 1502, 247, 9, 0),
      (1503, 1506, 247, 1, 0),
      (1507, 1510, 247, 1, 0),
      (1511, 1513, 246, 1, 0),
      (1514, 1517, 246, 1, 0),
      (1518, 1520, 246, 1, 0),
      (1521, 1523, -1, 1, 0),
      (1524, 1525, -1, 1, 0),
      (1526, 1528, 255, 1, 0),
      (1529, 1531, 255, 1, 0),
      (1532, 1534, -1, 1, 0),
      (1535, 1537, -1, 1, 0),
      (1538, 1543, 259, 1, 0),
      (1544, 1546, -1, 1, 0),
      (1547, 1548, -1, 1, 0),
      (1549, 1550, -1, 1, 0),
      (1551, 1553, 263, 1, 0),
      (1554, 1558, 263, 1, 0),
      (1559, 1563, 263, 7, 0),
      (1564, 1567, 263, 1, 0),
      (1568, 1571, 263, 1, 0),
      (1572, 1574, 263, 1, 0),
      (1575, 1578, 263, 1, 0),
      (1579, 1580, -1, 2, 0),
      (1581, 1583, 271, 1, 0),
      (1584, 1585, -1, 1, 0),
      (1586, 1588, -1, 1, 0),
      (1589, 1590, -1, 1, 0),
      (1591, 1595, 275, 1, 0),
      (1596, 1599, 275, 1, 0),
      (1600, 1603, -1, 1, 0),
      (1604, 1607, -1, 2, 0),
      (1608, 1611, -1, 1, 0),
      (1612, 1614, -1, 1, 0),
      (1615, 1616, -1, 1, 0),
      (1617, 1620, 282, 4, 0),
      (1621, 1625, 282, 1, 0),
      (1626, 1629, 282, 1, 0),
      (1630, 1632, -1, 1, 0),
      (1633, 1634, -1, 1, 0),
      (1635, 1637, 287, 1, 0),
      (1638, 1643, 288, 1, 0),
      (1644, 1644, -1, 1, 0),
      (1645, 1646, 290, 1, 0),
      (1647, 1650, 290, 1, 0),
      (1651, 1652, 290, 1, 0),
      (1653, 1657, 293, 1, 0));

   A_2 : constant Among_Array_Type (0 .. 18) := (
      (1658, 1661, -1, 2, 0),
      (1662, 1666, -1, 1, 0),
      (1667, 1668, -1, 1, 0),
      (1669, 1671, -1, 1, 0),
      (1672, 1675, -1, 1, 0),
      (1676, 1679, -1, 1, 0),
      (1680, 1683, -1, 1, 0),
      (1684, 1687, -1, 1, 0),
      (1688, 1689, -1, 1, 0),
      (1690, 1691, -1, 1, 0),
      (1692, 1693, -1, 1, 0),
      (1694, 1698, 10, 1, 0),
      (1699, 1701, 10, 1, 0),
      (1702, 1706, 12, 1, 0),
      (1707, 1710, 10, 1, 0),
      (1711, 1712, -1, 1, 0),
      (1713, 1714, -1, 1, 0),
      (1715, 1717, 16, 1, 0),
      (1718, 1719, -1, 1, 0));


   procedure R_Mark_regions (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_1 : Integer;
      v_2 : Integer;
      v_3 : Integer;
      v_4 : Integer;
      v_5 : Integer;
   begin
      --  (, line 23
      Z.I_PV := Z.L;
      Z.I_P1 := Z.L;
      Z.I_P2 := Z.L;
      --  do, line 29
      v_1 := Z.C;
      --  (, line 29
      --  or, line 31
      v_2 := Z.C;
      --  (, line 30
      In_Grouping (Z, G_V, 97, 117, False, C);
      if C /= 0 then
         goto lab2;
      end if;
      --  or, line 30
      v_3 := Z.C;
      --  (, line 30
      Out_Grouping (Z, G_V, 97, 117, False, C);
      if C /= 0 then
         goto lab4;
      end if;
            --  gopast, line 30
      --  grouping v, line 30
      Out_Grouping (Z, G_V, 97, 117, True, C);
      if C < 0 then
         goto lab4;
      end if;
      Z.C := Z.C + C;
      goto lab3;

      <<lab4>>
      Z.C := v_3;
      --  (, line 30
      In_Grouping (Z, G_V, 97, 117, False, C);
      if C /= 0 then
         goto lab2;
      end if;
            --  gopast, line 30
      --  non v, line 30
      In_Grouping (Z, G_V, 97, 117, True, C);
      if C < 0 then
         goto lab2;
      end if;
      Z.C := Z.C + C;

      <<lab3>>
      goto lab1;

      <<lab2>>
      Z.C := v_2;
      --  (, line 32
      Out_Grouping (Z, G_V, 97, 117, False, C);
      if C /= 0 then
         goto lab0;
      end if;
      --  or, line 32
      v_4 := Z.C;
      --  (, line 32
      Out_Grouping (Z, G_V, 97, 117, False, C);
      if C /= 0 then
         goto lab8;
      end if;
            --  gopast, line 32
      --  grouping v, line 32
      Out_Grouping (Z, G_V, 97, 117, True, C);
      if C < 0 then
         goto lab8;
      end if;
      Z.C := Z.C + C;
      goto lab7;

      <<lab8>>
      Z.C := v_4;
      --  (, line 32
      In_Grouping (Z, G_V, 97, 117, False, C);
      if C /= 0 then
         goto lab0;
      end if;
      --  next, line 32
      C := Skip_Utf8 (Z, 1);
      if C < 0 then
         goto lab0;
      end if;
      Z.C := C;

      <<lab7>>

      <<lab1>>
      --  setmark pV, line 33
      Z.I_PV := Z.C;

      <<lab0>>
      Z.C := v_1;
      --  do, line 35
      v_5 := Z.C;
      --  (, line 35
            --  gopast, line 36
      --  grouping v, line 36
      Out_Grouping (Z, G_V, 97, 117, True, C);
      if C < 0 then
         goto lab10;
      end if;
      Z.C := Z.C + C;
            --  gopast, line 36
      --  non v, line 36
      In_Grouping (Z, G_V, 97, 117, True, C);
      if C < 0 then
         goto lab10;
      end if;
      Z.C := Z.C + C;
      --  setmark p1, line 36
      Z.I_P1 := Z.C;
            --  gopast, line 37
      --  grouping v, line 37
      Out_Grouping (Z, G_V, 97, 117, True, C);
      if C < 0 then
         goto lab10;
      end if;
      Z.C := Z.C + C;
            --  gopast, line 37
      --  non v, line 37
      In_Grouping (Z, G_V, 97, 117, True, C);
      if C < 0 then
         goto lab10;
      end if;
      Z.C := Z.C + C;
      --  setmark p2, line 37
      Z.I_P2 := Z.C;

      <<lab10>>
      Z.C := v_5;

      Result := True;
   end R_Mark_regions;

   procedure R_RV (Z : in out Context_Type; Result : out Boolean) is
   begin
      Result := (Z.I_PV <= Z.C);
   end R_RV;

   procedure R_R2 (Z : in out Context_Type; Result : out Boolean) is
   begin
      Result := (Z.I_P2 <= Z.C);
   end R_R2;

   procedure R_R1 (Z : in out Context_Type; Result : out Boolean) is
   begin
      Result := (Z.I_P1 <= Z.C);
   end R_R1;

   procedure R_Aditzak (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
   begin
      --  (, line 47
      Z.Ket := Z.C;      --  [, line 48

      --  substring, line 48
      if Z.C - 1 <= Z.Lb or else Check_Among (Z, Z.C - 1, 3, 16#434c222#) then
         Result := False;
         return;
         --  substring, line 48
      end if;
      Find_Among_Backward (Z, A_0, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 48

      --  among, line 48
      case A is
         when 1 =>
            --  (, line 59
            --  call RV, line 59
            R_RV (Z, Result);
            if not Result then
               Result := False;
               return;
            end if;
            --  delete, line 59
            Slice_Del (Z);
         when 2 =>
            --  (, line 61
            --  call R2, line 61
            R_R2 (Z, Result);
            if not Result then
               Result := False;
               return;
            end if;
            --  delete, line 61
            Slice_Del (Z);
         when 3 =>
            --  (, line 63
            --  <-, line 63
            Slice_From (Z, "atseden");
         when 4 =>
            --  (, line 65
            --  <-, line 65
            Slice_From (Z, "arabera");
         when 5 =>
            --  (, line 67
            --  <-, line 67
            Slice_From (Z, "baditu");
         when others =>
            null;
      end case;

      Result := True;
   end R_Aditzak;

   procedure R_Izenak (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
   begin
      --  (, line 72
      Z.Ket := Z.C;      --  [, line 73

      --  substring, line 73
      if Z.C <= Z.Lb or else Check_Among (Z, Z.C - 1, 3, 16#43dda22#) then
         Result := False;
         return;
         --  substring, line 73
      end if;
      Find_Among_Backward (Z, A_1, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 73

      --  among, line 73
      case A is
         when 1 =>
            --  (, line 103
            --  call RV, line 103
            R_RV (Z, Result);
            if not Result then
               Result := False;
               return;
            end if;
            --  delete, line 103
            Slice_Del (Z);
         when 2 =>
            --  (, line 105
            --  call R2, line 105
            R_R2 (Z, Result);
            if not Result then
               Result := False;
               return;
            end if;
            --  delete, line 105
            Slice_Del (Z);
         when 3 =>
            --  (, line 107
            --  <-, line 107
            Slice_From (Z, "jok");
         when 4 =>
            --  (, line 109
            --  call R1, line 109
            R_R1 (Z, Result);
            if not Result then
               Result := False;
               return;
            end if;
            --  delete, line 109
            Slice_Del (Z);
         when 5 =>
            --  (, line 111
            --  <-, line 111
            Slice_From (Z, "tra");
         when 6 =>
            --  (, line 113
            --  <-, line 113
            Slice_From (Z, "minutu");
         when 7 =>
            --  (, line 115
            --  <-, line 115
            Slice_From (Z, "zehar");
         when 8 =>
            --  (, line 117
            --  <-, line 117
            Slice_From (Z, "geldi");
         when 9 =>
            --  (, line 119
            --  <-, line 119
            Slice_From (Z, "igaro");
         when 10 =>
            --  (, line 121
            --  <-, line 121
            Slice_From (Z, "aurka");
         when others =>
            null;
      end case;

      Result := True;
   end R_Izenak;

   procedure R_Adjetiboak (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
   begin
      --  (, line 125
      Z.Ket := Z.C;      --  [, line 126

      --  substring, line 126
      if Z.C - 1 <= Z.Lb or else Check_Among (Z, Z.C - 1, 3, 16#8a22#) then
         Result := False;
         return;
         --  substring, line 126
      end if;
      Find_Among_Backward (Z, A_2, Among_String, null, A);
      if A = 0 then
         Result := False;
         return;
      end if;
      Z.Bra := Z.C;      --  ], line 126

      --  among, line 126
      case A is
         when 1 =>
            --  (, line 129
            --  call RV, line 129
            R_RV (Z, Result);
            if not Result then
               Result := False;
               return;
            end if;
            --  delete, line 129
            Slice_Del (Z);
         when 2 =>
            --  (, line 131
            --  <-, line 131
            Slice_From (Z, "z");
         when others =>
            null;
      end case;

      Result := True;
   end R_Adjetiboak;

   procedure Stem (Z : in out Context_Type; Result : out Boolean) is
      C : Integer;
      A : Integer;
      v_2 : Integer;
      v_3 : Integer;
      v_4 : Integer;
   begin
      --  (, line 137
      --  do, line 138
      --  call mark_regions, line 138
      R_Mark_regions (Z, Result);
      Z.Lb := Z.C; Z.C := Z.L;      --  backwards, line 139

      --  (, line 139
      --  repeat, line 140

      <<lab0>>

      loop
         v_2 := Z.L - Z.C;
         --  call aditzak, line 140
         R_Aditzak (Z, Result);
         if not Result then
            goto lab1;
         end if;
         goto lab0;

         <<lab1>>
         Z.C := Z.L - v_2;

         exit;
      end loop;
      --  repeat, line 141

      <<lab2>>

      loop
         v_3 := Z.L - Z.C;
         --  call izenak, line 141
         R_Izenak (Z, Result);
         if not Result then
            goto lab3;
         end if;
         goto lab2;

         <<lab3>>
         Z.C := Z.L - v_3;

         exit;
      end loop;
      --  do, line 142
      v_4 := Z.L - Z.C;
      --  call adjetiboak, line 142
      R_Adjetiboak (Z, Result);
      Z.C := Z.L - v_4;
      Z.C := Z.Lb;

      Result := True;
   end Stem;
end Stemmer.Basque;
